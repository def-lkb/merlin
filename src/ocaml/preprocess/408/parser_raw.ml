
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20181006

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | WITH
    | WHILE_LWT
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNDERSCORE
    | UIDENT of (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23 "src/ocaml/preprocess/parser_raw.ml"
  )
    | TYPE
    | TRY_LWT
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (
# 717 "src/ocaml/preprocess/parser_raw.mly"
       (string * string option)
# 36 "src/ocaml/preprocess/parser_raw.ml"
  )
    | STAR
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTE
    | QUESTIONQUESTION
    | QUESTION
    | PRIVATE
    | PREFIXOP of (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 53 "src/ocaml/preprocess/parser_raw.ml"
  )
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of (
# 696 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 63 "src/ocaml/preprocess/parser_raw.ml"
  )
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH_LWT
    | MATCH
    | LPAREN
    | LIDENT of (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 82 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET_LWT
    | LETOP of (
# 661 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 88 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of (
# 666 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 108 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INT of (
# 665 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 113 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of (
# 659 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 120 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP3 of (
# 658 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 125 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP2 of (
# 657 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 130 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP1 of (
# 656 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 135 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP0 of (
# 655 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 140 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INCLUDE
    | IN
    | IF
    | HASHOP of (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 148 "src/ocaml/preprocess/parser_raw.ml"
  )
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATERDOT
    | GREATER
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR_LWT
    | FOR
    | FLOAT of (
# 644 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 163 "src/ocaml/preprocess/parser_raw.ml"
  )
    | FINALLY_LWT
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTTILDE
    | DOTOP of (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 179 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DOTLESS
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of (
# 733 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 188 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DO
    | CONSTRAINT
    | COMMENT of (
# 732 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 195 "src/ocaml/preprocess/parser_raw.ml"
  )
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of (
# 624 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 206 "src/ocaml/preprocess/parser_raw.ml"
  )
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | ANDOP of (
# 662 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 219 "src/ocaml/preprocess/parser_raw.ml"
  )
    | AND
    | AMPERSAND
    | AMPERAMPER
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 18 "src/ocaml/preprocess/parser_raw.mly"
  

[@@@ocaml.warning "-9"]

open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir
open Msupport_parsing

let mkloc = Location.mkloc
let mknoloc = Location.mknoloc

let make_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}

let ghost_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = true;
}

let mktyp ~loc d = Typ.mk ~loc:(make_loc loc) d
let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d

let pstr_typext (te, ext) =
  (Pstr_typext te, ext)
let pstr_primitive (vd, ext) =
  (Pstr_primitive vd, ext)
let pstr_type ((nr, ext), tys) =
  (Pstr_type (nr, tys), ext)
let pstr_exception (te, ext) =
  (Pstr_exception te, ext)
let pstr_include (body, ext) =
  (Pstr_include body, ext)
let pstr_recmodule (ext, bindings) =
  (Pstr_recmodule bindings, ext)

let psig_typext (te, ext) =
  (Psig_typext te, ext)
let psig_value (vd, ext) =
  (Psig_value vd, ext)
let psig_type ((nr, ext), tys) =
  (Psig_type (nr, tys), ext)
let psig_typesubst ((nr, ext), tys) =
  assert (nr = Recursive); (* see [no_nonrec_flag] *)
  (Psig_typesubst tys, ext)
let psig_exception (te, ext) =
  (Psig_exception te, ext)
let psig_include (body, ext) =
  (Psig_include body, ext)

let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkrhs rhs loc = mkloc rhs (make_loc loc)
let ghrhs rhs loc = mkloc rhs (ghost_loc loc)

let push_loc x acc =
  if x.Location.loc_ghost
  then acc
  else x :: acc

let reloc_pat ~loc x =
  { x with ppat_loc = make_loc loc;
           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
let reloc_exp ~loc x =
  { x with pexp_loc = make_loc loc;
           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
let reloc_typ ~loc x =
  { x with ptyp_loc = make_loc loc;
           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;

let mkexpvar ~loc (name : string) =
  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))

let mkoperator =
  mkexpvar

let mkpatvar ~loc name =
  mkpat ~loc (Ppat_var (mkrhs name loc))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d

let mkinfix arg1 op arg2 =
  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~oploc name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      Pexp_constant(Pconst_integer(neg_string n,m))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      Pexp_constant(Pconst_float(neg_string f, m))
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)

let mkexp_cons_desc consloc args =
  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
let mkexp_cons ~loc consloc args =
  mkexp ~loc (mkexp_cons_desc consloc args)

let mkpat_cons_desc consloc args =
  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
let mkpat_cons ~loc consloc args =
  mkpat ~loc (mkpat_cons_desc consloc args)

let ghexp_cons_desc consloc args =
  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
let ghpat_cons_desc consloc args =
  Ppat_construct(ghrhs (Lident "::") consloc, Some args)

let rec mktailexp nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Pexp_construct (nil, None), nilloc
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
      ghexp_cons_desc loc arg, loc

let rec mktailpat nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Ppat_construct (nil, None), nilloc
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
      ghpat_cons_desc loc arg, loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint ~loc e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> mkpat ~loc (Ppat_constraint(p, typ))

(*let syntax_error () =
  raise Syntaxerr.Escape_error*)

let not_expecting loc nonterm =
  raise_error Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))

(*
let unclosed opening_name opening_loc closing_name closing_loc =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
                                           make_loc closing_loc, closing_name)))

let expecting loc nonterm =
    raise Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))
*)

let dotop_fun ~loc dotop =
  (* We could use ghexp here, but sticking to mkexp for parser.mly
     compatibility. TODO improve parser.mly *)
  mkexp ~loc (Pexp_ident (ghloc ~loc dotop))

let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str,
                   (if !Clflags.fast then "unsafe_" ^ name else name)))

let array_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
let string_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))

let array_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
let string_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))

let index_get ~loc get_fun array index =
  let args = [Nolabel, array; Nolabel, index] in
   mkexp ~loc (Pexp_apply(get_fun, args))

let index_set ~loc set_fun array index value =
  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
   mkexp ~loc (Pexp_apply(set_fun, args))

let array_get ~loc = index_get ~loc (array_get_fun ~loc)
let string_get ~loc = index_get ~loc (string_get_fun ~loc)
let dotop_get ~loc dotop = index_get ~loc (dotop_fun ~loc dotop)

let array_set ~loc = index_set ~loc (array_set_fun ~loc)
let string_set ~loc = index_set ~loc (string_set_fun ~loc)
let dotop_set ~loc dotop = index_set ~loc (dotop_fun ~loc dotop)

let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]

let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.fast then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))

let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.fast then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))

let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(
                  Syntaxerr.Applicative_path (make_loc loc)))

let exp_of_longident ~loc lid =
  mkexp ~loc (Pexp_ident {lid with txt = Lident(Longident.last lid.txt)})

(* [loc_map] could be [Location.map]. *)
let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
  { x with txt = f x.txt }

let loc_last (id : Longident.t Location.loc) : string Location.loc =
  loc_map Longident.last id

let loc_lident (id : string Location.loc) : Longident.t Location.loc =
  loc_map (fun x -> Lident x) id

let exp_of_label ~loc lbl =
  mkexp ~loc (Pexp_ident (loc_lident lbl))

let pat_of_label ~loc lbl =
  mkpat ~loc (Ppat_var (loc_last lbl))

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))

let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs ~loc:_ body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs ~loc:_ attrs body =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs ~loc:_ attrs body =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))

let wrap_mkstr_ext ~loc (item, ext) =
  wrap_str_ext ~loc (mkstr ~loc item) ext

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))

let wrap_mksig_ext ~loc (item, ext) =
  wrap_sig_ext ~loc (mksig ~loc item) ext

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos = [Ptop_def (Str.text (rhs_text pos))]

let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
        text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
let extra_def p1 p2 items =
  extra_text p1 p2 (fun txt -> [Ptop_def (Str.text txt)]) items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }


let mklb first ~loc (p, e) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy
               else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }

let mklbs ~loc ext rf lb =
  {
    lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = make_loc loc;
  }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    (* Our use of let_bindings(no_ext) guarantees the following: *)
    assert (lbs.lbs_extension = None);
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))

(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        assert (ptyp.ptype_kind = Ptype_abstract);
        assert (ptyp.ptype_attributes = []);
        let ty =
          match ptyp.ptype_manifest with
          | Some ty -> ty
          | None -> assert false
        in
        (lid, ty)
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported"
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [])
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.map map_cstr cstrs)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"

let mk_directive_arg ~loc k =
  { pdira_desc = k;
    pdira_loc = make_loc loc;
  }

let mk_directive ~loc name arg =
  Ptop_dir {
      pdir_name = name;
      pdir_arg = arg;
      pdir_loc = make_loc loc;
    }

let merloc startpos ?endpos x =
  let endpos = match endpos with
    | None -> x.pexp_loc.Location.loc_end
    | Some endpos -> endpos
  in
  let loc = make_loc (startpos, endpos) in
  let str = mkloc "merlin.loc" loc in
  let attr = { attr_name = str; attr_loc = loc; attr_payload = PStr [] } in
  { x with pexp_attributes = attr :: x.pexp_attributes }

let val_of_lwt_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_lwt_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  Fake.app Fake.Lwt.in_lwt
    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
       (lbs.lbs_extension, []))


# 795 "src/ocaml/preprocess/parser_raw.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          131
      | AMPERSAND ->
          130
      | AND ->
          129
      | ANDOP _ ->
          128
      | AS ->
          127
      | ASSERT ->
          126
      | BACKQUOTE ->
          125
      | BANG ->
          124
      | BAR ->
          123
      | BARBAR ->
          122
      | BARRBRACKET ->
          121
      | BEGIN ->
          120
      | CHAR _ ->
          119
      | CLASS ->
          118
      | COLON ->
          117
      | COLONCOLON ->
          116
      | COLONEQUAL ->
          115
      | COLONGREATER ->
          114
      | COMMA ->
          113
      | COMMENT _ ->
          112
      | CONSTRAINT ->
          111
      | DO ->
          110
      | DOCSTRING _ ->
          109
      | DONE ->
          108
      | DOT ->
          107
      | DOTDOT ->
          106
      | DOTLESS ->
          105
      | DOTOP _ ->
          104
      | DOTTILDE ->
          103
      | DOWNTO ->
          102
      | ELSE ->
          101
      | END ->
          100
      | EOF ->
          99
      | EOL ->
          98
      | EQUAL ->
          97
      | EXCEPTION ->
          96
      | EXTERNAL ->
          95
      | FALSE ->
          94
      | FINALLY_LWT ->
          93
      | FLOAT _ ->
          92
      | FOR ->
          91
      | FOR_LWT ->
          90
      | FUN ->
          89
      | FUNCTION ->
          88
      | FUNCTOR ->
          87
      | GREATER ->
          86
      | GREATERDOT ->
          85
      | GREATERRBRACE ->
          84
      | GREATERRBRACKET ->
          83
      | HASH ->
          82
      | HASHOP _ ->
          81
      | IF ->
          80
      | IN ->
          79
      | INCLUDE ->
          78
      | INFIXOP0 _ ->
          77
      | INFIXOP1 _ ->
          76
      | INFIXOP2 _ ->
          75
      | INFIXOP3 _ ->
          74
      | INFIXOP4 _ ->
          73
      | INHERIT ->
          72
      | INITIALIZER ->
          71
      | INT _ ->
          70
      | LABEL _ ->
          69
      | LAZY ->
          68
      | LBRACE ->
          67
      | LBRACELESS ->
          66
      | LBRACKET ->
          65
      | LBRACKETAT ->
          64
      | LBRACKETATAT ->
          63
      | LBRACKETATATAT ->
          62
      | LBRACKETBAR ->
          61
      | LBRACKETGREATER ->
          60
      | LBRACKETLESS ->
          59
      | LBRACKETPERCENT ->
          58
      | LBRACKETPERCENTPERCENT ->
          57
      | LESS ->
          56
      | LESSMINUS ->
          55
      | LET ->
          54
      | LETOP _ ->
          53
      | LET_LWT ->
          52
      | LIDENT _ ->
          51
      | LPAREN ->
          50
      | MATCH ->
          49
      | MATCH_LWT ->
          48
      | METHOD ->
          47
      | MINUS ->
          46
      | MINUSDOT ->
          45
      | MINUSGREATER ->
          44
      | MODULE ->
          43
      | MUTABLE ->
          42
      | NEW ->
          41
      | NONREC ->
          40
      | OBJECT ->
          39
      | OF ->
          38
      | OPEN ->
          37
      | OPTLABEL _ ->
          36
      | OR ->
          35
      | PERCENT ->
          34
      | PLUS ->
          33
      | PLUSDOT ->
          32
      | PLUSEQ ->
          31
      | PREFIXOP _ ->
          30
      | PRIVATE ->
          29
      | QUESTION ->
          28
      | QUESTIONQUESTION ->
          27
      | QUOTE ->
          26
      | RBRACE ->
          25
      | RBRACKET ->
          24
      | REC ->
          23
      | RPAREN ->
          22
      | SEMI ->
          21
      | SEMISEMI ->
          20
      | SIG ->
          19
      | STAR ->
          18
      | STRING _ ->
          17
      | STRUCT ->
          16
      | THEN ->
          15
      | TILDE ->
          14
      | TO ->
          13
      | TRUE ->
          12
      | TRY ->
          11
      | TRY_LWT ->
          10
      | TYPE ->
          9
      | UIDENT _ ->
          8
      | UNDERSCORE ->
          7
      | VAL ->
          6
      | VIRTUAL ->
          5
      | WHEN ->
          4
      | WHILE ->
          3
      | WHILE_LWT ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | ANDOP _v ->
          Obj.repr _v
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | BACKQUOTE ->
          Obj.repr ()
      | BANG ->
          Obj.repr ()
      | BAR ->
          Obj.repr ()
      | BARBAR ->
          Obj.repr ()
      | BARRBRACKET ->
          Obj.repr ()
      | BEGIN ->
          Obj.repr ()
      | CHAR _v ->
          Obj.repr _v
      | CLASS ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONCOLON ->
          Obj.repr ()
      | COLONEQUAL ->
          Obj.repr ()
      | COLONGREATER ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | COMMENT _v ->
          Obj.repr _v
      | CONSTRAINT ->
          Obj.repr ()
      | DO ->
          Obj.repr ()
      | DOCSTRING _v ->
          Obj.repr _v
      | DONE ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | DOTDOT ->
          Obj.repr ()
      | DOTLESS ->
          Obj.repr ()
      | DOTOP _v ->
          Obj.repr _v
      | DOTTILDE ->
          Obj.repr ()
      | DOWNTO ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | END ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EOL ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXCEPTION ->
          Obj.repr ()
      | EXTERNAL ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FINALLY_LWT ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FOR ->
          Obj.repr ()
      | FOR_LWT ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | FUNCTOR ->
          Obj.repr ()
      | GREATER ->
          Obj.repr ()
      | GREATERDOT ->
          Obj.repr ()
      | GREATERRBRACE ->
          Obj.repr ()
      | GREATERRBRACKET ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HASHOP _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INFIXOP0 _v ->
          Obj.repr _v
      | INFIXOP1 _v ->
          Obj.repr _v
      | INFIXOP2 _v ->
          Obj.repr _v
      | INFIXOP3 _v ->
          Obj.repr _v
      | INFIXOP4 _v ->
          Obj.repr _v
      | INHERIT ->
          Obj.repr ()
      | INITIALIZER ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | LABEL _v ->
          Obj.repr _v
      | LAZY ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACELESS ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LBRACKETAT ->
          Obj.repr ()
      | LBRACKETATAT ->
          Obj.repr ()
      | LBRACKETATATAT ->
          Obj.repr ()
      | LBRACKETBAR ->
          Obj.repr ()
      | LBRACKETGREATER ->
          Obj.repr ()
      | LBRACKETLESS ->
          Obj.repr ()
      | LBRACKETPERCENT ->
          Obj.repr ()
      | LBRACKETPERCENTPERCENT ->
          Obj.repr ()
      | LESS ->
          Obj.repr ()
      | LESSMINUS ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LETOP _v ->
          Obj.repr _v
      | LET_LWT ->
          Obj.repr ()
      | LIDENT _v ->
          Obj.repr _v
      | LPAREN ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | MATCH_LWT ->
          Obj.repr ()
      | METHOD ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MINUSDOT ->
          Obj.repr ()
      | MINUSGREATER ->
          Obj.repr ()
      | MODULE ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NONREC ->
          Obj.repr ()
      | OBJECT ->
          Obj.repr ()
      | OF ->
          Obj.repr ()
      | OPEN ->
          Obj.repr ()
      | OPTLABEL _v ->
          Obj.repr _v
      | OR ->
          Obj.repr ()
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PLUSDOT ->
          Obj.repr ()
      | PLUSEQ ->
          Obj.repr ()
      | PREFIXOP _v ->
          Obj.repr _v
      | PRIVATE ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | QUESTIONQUESTION ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REC ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMI ->
          Obj.repr ()
      | SEMISEMI ->
          Obj.repr ()
      | SIG ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRUCT ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TO ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TRY_LWT ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UIDENT _v ->
          Obj.repr _v
      | UNDERSCORE ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | VIRTUAL ->
          Obj.repr ()
      | WHEN ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WHILE_LWT ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
i\000[\002c\000\000\000\000\000\000\000\000\0009\000\000\000\000\001E\000:\002R\000\000\001\016\000\000\001\147\000f\000\000\002\239\000\000\000\000\000\000\000\000\000\000\000\000\001~n\000\000\002\231\000\000\002\011\000\000\000\000\000\000\000\000\000b\000\000\000\000\000_\000\000\000\000\002\226\000\000\000\000\000\000\000\000\000\000\000\000\001\160\000\000\000\000\000\029\000\000\000\000\000\000\000\022\000\000\000\000\001g\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001C\000\000\001B\000\000\002\227\000 \000\000\000\000\000\023\000\018\000\000\000\000\000\000\000\198\000\000\000\000\000\000\000\200\002\020\002\006\000\000\000\026\000\000\002\007\000\000\000\000\001\157\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\011\002\206\000\000\002\207\000\000\000q\000\000\000\000\000\025\000\000\000\000\000\000\000\027\000\000\000\028\000\000\000\030\000\000\000\000\000\031\001\252\001\251\000\000\000\000\001\254\000\000\000\000\000\000\000\000\000\000\000\000\0019\0013\000\000\000\000\0014\000\000\000\021\000\000\000\020\000\000\000\000\000\199\000\000\000`\000\000\000\000\000\000\000\024\000\019\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000^\000\000\001a\000\000\000\000\000\000\000\000\000\000\000\000\000\222\000\000\001w\000\000\000\225\000\223\000a\001s\000\000\000]\000\000\000\000\000\000\000\000\000\000\000\000\000m\000\000\000\000\000\000\000\207\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\000\001\235\001\233\001\234\000\000\001o\000\000\000\000\000\211\000\000\000\000\001v\001r\002\225\000\000\000\000\000\000\000\000\000\000\001y\001u\001q\000\000\000\000\001x\001t\001p\001n\000\000\001\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\245\000\000\000\000\000\000\000\000\000\000\000\000\001\022\000\215\000\000\000\000\001\223\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000e\000h\000\000\000\000\000\000\000\000\000d\000\000\000\186\000\000\002\195\001\240\001\241\001\236\001\238\001\237\001\239\000\000\000\000\000\000\000\187\002\230\000\000\000\000\001\245\000\000\000\214\000\000\000\000\000\000\000\000\002\194\000\000\000\t\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002u\000\000\002=\002>\000\000\002;\002<\000\000\000\000\000\000\000\000\000\000\000\000\002s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\204\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\230\000\000\000\000\000\000\000\000\000\228\000\000\000\000\000\229\000\000\002?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y\000\000\002z\000\\\000Z\002o\002p\001\202\002r\000\000\000\000\002w\002:\002y\000\000\000\000\000\000\002}\000\000\000\000\000\000\001\199\001\190\000\000\000\000\000\000\000\000\000\000\001\189\000\000\001\201\002\128\000\000\001\200\001\194\000\000\002~\000\000\000\000\000\000\000\000\000\000\001\191\000\000\002|\000\000\002@\000\000\000\000\002\030\002{\002x\000\000\000\000\000\000\000\000\001\162\001+\001,\002B\000\000\002A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\239\000\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\000\237\001\209\000\238\000\000\000\000\000\000\001id\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\232\000\000\000\233\000\000\000\000\000\000\002`\000\000\000\000\000\000\002G\000\000\000\000\000\000\000\000\002b\002W\002V\000\000\000\000\000tj\000\000\002i\000\000\000\000\002\024\000\000\002m\000\000\002l\000\000\000\000\002_\000\000\000\000\000\000\001\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\176\000\000\000\000\000\000\002!\001\231\000\000\002f\000\000\000\000\000\000\002\242\000\000\000r\000s\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000{\000\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\000\242\000\000\000\195\000\196\000\000\000\000\002q\000\000\000\000\002\127\000\132\000\000\000\131\000\000\000\000\0011\000\000\0012\0010\002\000\000\000\000\000\002\001\001\255\000\000\000\000\000\000\000\000\000\000\002Q\000\000\002P\000\000\000\000\002C\000\000\000\000\002e\000\000\000\000\000\000\002\027\002\\\000\000\002[\000\000\002k\002h\000\000\002g\000\129\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~tk\000\000\001\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\181\000\000\000\000\002&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001}\000\000\000\000\000\000\001|\000\000\000\000\000\000\000\000\000\000\000\000\0022\000\000\000\000\001S\000\000\000\000\000\000\0021\000\000\001J\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\014\0024\000\000\000\000\000\000\000\000\0027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000>\000\000\000\000\000\000\000\000\001f\000\000\001en\000V\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\000\000\000U\000T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b{\000\000\000\000\000\000\001z\000\000\000\000\001\028\001\027\000\000\001\220\000\213\000\000\000\000\000\000\000\000\002/\001\244\001\242\001\243\000\000\000\000\000\000\001\245\000\000\000\212\000\000\000\000\000\000\000\000\002.\000\000\001T\000\000\000\014\000\000\002\248\000\000\000\185\002Y\000\000\000\000\000\000\000\000\002S\000\000\000\000\002T\000\000\002E\000\000\002F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000y\000\000\000x\000\000\000\000\000\000\000\137\000\000\000#\000\000\000\000\000\000\000\000\000z\000\000\000\218\000\001\000\000\000\000\000\219\000\002\000\000\000\003\000\000\001\185\000\000\000\000\001\186\000\004\000\000\000\000\001\187\000\005\000\000\000\000\000\000\002\214\002\209\002\210\002\213\002\211\000\000\000\000\002\218\000\006\000\000\002\217\000\000\001#\000\000\000\000\002\215\000\000\002\216\000\000\000\000\000\000\000\000\001'\001(\000\000\000\000\001&\001%\000\007\000\000\000\000\000\000\002\238\000\000\002\237")
  
  and error =
    (132, "2\248H\018\197V\254fz\002\128\251\145@\003\142\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\224^\221\145\004\023\241R\000\tf\255\130\161\251\137Q\007\158\005\237\217\016A\127\021 \000\1528\0298\224\176(4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$\250\000\128\250\001@\001\142\005\237\217\016A\127\021 \000\1528\0298\224\176(42\248H\154\197V\254fz\002\128\251\129@\007\142\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\2240\184@\018\225F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\018\000@0$r\000\000\n\001@\001\140\000\b\000\000\002\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\128\000\000\000\000\000\000\000\000\ba\003\158@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184b\019\241V\254\164z|\194\250A\192\025\174\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132! \004\003\002G \000\000\160\020\000\024\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(42\248H\154\197V\254fz\002\128\251\129@\007\142\000\000\000\000\002\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000 \003\240\006\004\128\000|B\000@\128\016(\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\001\000\000\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\168\000A\130\1648\000\"\000\029\129\002 \004\002@\b\000\004\016\000B\128\002\000\001\136\000\002\000\000$\000\128\000A\000\004 \000 \000\024\128\000 \000\001\128\000 `\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\016\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\129\004\016\000C\000\002\000\001\216\001\018\000@\024\128\002\192\128\003\011\133\000\002\000 \002\000\001\000\002@\b\128\006\016*C\128\002 \001\152\017\006\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136\000(\b\0000\184P\000 \002\000 \000\016\000\024\000\"\128\129\003\011\132\000\002\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\002\236\000A\145\1648\024\" \029\128\022a\022\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000 \000\0000\184@\000\"\000\000 \000\000\000\b\000@\000\000\001\000\000\000\002 \000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002\128$`\000\t\016C\129\128\"\000H\017 \001\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\001\128\000\168\b\0000\184@\000 \000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\014\192\004\025\nC\129\130\"\001\216\001b\017`\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000B@.\192\004\025\nC\129\130\"\001\216\001b\017`\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\bbb\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000 \000\000\b\000\000 \000\000\000\001\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000 \000\000\000\001\002\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\128\000\002\000\000\000\000\017 \000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000 \000\000\000\001\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000D\000\000\000\000\bb\000\000 \000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000@\000\000\b\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000@\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000@\000\000\024\000\na\000\1648\000\"\000\025\128\016ab\000\000\000\000\000\000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\002\192\b\128\004\016\026C\128\003 \001\152\001\002\016@,\002\136\000A\129\1648\0002\000\025\128\016!\004\002@\b\128\004\016\nC\128\002 \001\152\001\002\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\001\002\016@\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000a\000\1648\000\"\000\025\128\016a\004\002@\b\128\004\016\nbt\131\129\211\142\011\002\131C/\132\137\172Uo\230g\160(\015\184\020\000x\224\001\128\000 `\1300\000\128\000\000\000\000\000\000\000\000\024\000\002\004\b#\000\b\000\000\000\000\000\000\000\000\001\128\000 @\1300\000\000\000\000\000\000\000\000\000\000\024\000\002\004\000#\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000$\000\136\016A\000\1640\000\"\000\029\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000\"\000\025\128\016 \004\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\004$\000\168\000A\128\1648\000\"\000\029\128\018 \004\002@\b\128\004\017\nC\001\131 \001\152\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\004\000\000 \000@\000\000\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\006\016\nC\128\002 \001\216\000\006\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\128\002 \001\152\016\002\016\000\b\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ba\000\1648\000\"\000\029\128\000ab\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\248H\146\197V\254fz\002\128\251\153@\003\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\128\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\003/\132\129,Uo\230o\160(\015\184\148\0008\2242\248H\018\197V\254fz\002\128\251\137@\003\142\000 \000\000\002\000\018\004(\024\000\000\000\128\016\000\000\002\000\000\000\000\001 B\129\128\000\000\b\001\000\000\000 \000\000\000\000\018\004 \024\000\000\000\128\016\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136b\003\240\0224\164Z|b\n\192\128\025,\176\000\000 \000\000\000\000\000 \000\000\128\000\000\000\000\000\128\000\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\002\128\128\000\000\000  \000\000\001\000\000\000\000\000\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001.\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\2240\184@\018\225F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\004,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\132\016\006\000#\002M\160\002\000\160\000\000\016@\001\136A\000@\0020$\218\000 \n\000\000\001\004\000\024\132\016\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001D\000\024\132\b\004\000#\002E\160\002\000\168\000\000\016@\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\004\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000D\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000@\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\001\136@\000`\0020$\210\000 \n\000\000\001\004\000\024\132\000\004\000#\002M \002\000\160\000\000\016@\001\136@\000@\0020$R\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\138F\200H\n0$\214\001 \nP mU\000\000\004\000\004\000 \000\000 \000\000\128\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\164l\132\128\163\002M\224\018\000\173\001\006\213P\000\128\000\000\000\000 \004P\000\000\000\000\000\000\000\000\024\132 \004\000#\002E\160\002\000\168\000\000\144@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\006\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\006\192\000\b\000\000\128\001\000\000P\000LQ\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\b\000\006\192\000\b\000\000\128\001\000\000P\000LQ\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\b\000\006\192\000\b\000\000\128\001\000\000P\000LQ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\136F\192@\n0$\218\001 \n\208\000MU\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\132l\004\000\163\002M\160\018\000\173\000\004\213P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000H\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000l\000\000\128\000\b\000\016\000\005\000\004\197\016\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000l\000\000\128\000\b\000\016\000\005\000\004\197\016\000\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\128@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\000\000\000\000\128\000\000\000\000\000HQ\000\024\132\b\004\000#\002E\160\002\000\168\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\b`o\226G\160\b\015\160\020\000\024\224\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\164\000\132\128#\002M`\002\000\164\000\004\209P\001\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000 \000\000\000\000\b\000\000\000\004\000\004\193\016\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\134 ?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000%\004\000\024\132\000\004\000#\002E \002\000\160\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\136A\000d\0180$\218\000 \n\128\000\001\004\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\128\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\024\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\128\1648\000\"\000\029\128\002 \004\000@\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\024\000\002\004\000#\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\000\000\001\128\000,\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\004$\000\168\000A\128\1648\000\"\000\029\128\002 \020\001\128\000(\b\0000\184@\000 \000\000\000\000\000\004$\000\168\000A\128\1648\000\"\000\029\128\018 \020B@\n\128\004\024\nC\128\002 \001\216\001\"\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\016\016\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\128\004\024*C\128\002 \001\216\016\"\000@\bb\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\130\1648\0002\000\029\128\002`\004\002\128\130\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000 \000\128\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\130\1648\0002\000\029\129\002`\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\016\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\003\011\132\001,\020o\226G\160\b\015\160\020\000\028\2240\184@\146\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\b\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\136@\018\000@0$r\000\000\n\001@\001\140\004\000\000D\000\000\000\000\000\000\006\000\004\t\002@\000\000\136@\018\000@0$r\000\000\n\001@\001\140\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\136@\018 @0$\242\000\000\n\001@\001\140\000\b\132\001 \004\003\002O \000\000\160\020\000\024\192\000\136@\018\000@0$r\000\000\n\001@\001\140\003\011\132\001.\020o\226O\160\b\015\160\148\000\024\2240\184@\018\193F\254$\250\000\128\250\t@\001\142\003\011\132\001,\020o\226G\160\b\015\160\148\000\024\2240\184@\018\225F\254$\250\000\128\250\001@\001\142\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\132\000\006\000#\002M\160\002\000\168\000\000\017@\001\136@\000@\0020$\218\000 \n\128\000\001\020\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000\000\000\000\128\000\b\000\000\000\000\000\004\129\0160\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\164\000\134\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$\214\000 \n\000\000\001\004\000\024\164\000\132\128#\002E`\002\000\160\000\000\016@\001\200b\003\240\0224\164Z|b\n\192\128\025,\176\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@0\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\132\000\006\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\001\000\000@\000H\017\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\136@\000`\0020$\218\000 \n\128\000\001\004\000\024\132\000\004\000#\002M\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\0160\184@\018\193F\254$z\000\128\250\001@\001\142\000\b\132\001 \004\003\002G \000\000\160\020\000\024\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_:\231\247\255n\015\223\219\127\253\240\b\000\000\000\000\003\000G\000\000\000\000\000\000\000\0000\184b\019\241V\254\164z|\194\250A\192\025\174\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184B\018\193F\254$z\000\128\250\001@\001\142\003\011\132!,\020o\226G\160\b\015\160\020\000\024\224\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132!,\020o\226G\160\b\015\160\020\000\024\2240\184B\018\193F\254$z\000\128\250\001@\001\142\000\024\132 \004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000L\017\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\136@\018 @0$\242\000\000\n\001@\001\140\000\b\132\001 \004\003\002O \000\000\160\020\000\024\192\000\136@\018\000@0$r\000\000\n\001@\001\140\004$R\236\031A\240\1728\031\246\224]\233\183\231\015\000\136@\018\000@0$r\000\000\n\001@\001\140\004,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\223\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\004,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\207\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136@\018\000@0$r\000\000\n\001@\001\140\004,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\223\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\0000\000P\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224B\207n\219\252_:\231\247\255n\015\223\219\127\252\244$R\236\031A\240\1728\031\246\224]\233\183\231\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0040\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\0040\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_:\231\247\255n\015\223\219\127\252\244$R\236\031A\240\1728\031\246\224]\233\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\253n\211\245_\254\231\251\255\174\255\223K\127\254\245\237\217\016A\127\021 \000\1528\0298\224\176(40\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\240\024\132\000\004\000#\002M\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\193\016\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\002@\b\128\004\016\nC\000\003 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\"\001\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\001 \004\003\002G \000\000\160\020\000\024\192B\207n\219\252_:\231\247\255n\015\223\219\127\253\240\000\000\000\000\000\002\000\005\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002 \031\000`\b\b\007\192 \004\000\005\130\003B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000 \129\240\006\000\128\128|\002\000@\000X 4,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\240\b\000\000\000\000\003\000\005\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002\004\031\000`\b\b\007\192 \004\000\005\130\003B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\240\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\"\001\240\006\000\128\128|\002\000@\000X 4,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000 A\240\006\000\128\128|\002\000@\000X 4,\246\237\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\018\193F\254$z\000\128\250\001@\001\142\004$R\236\031A\240\1728\031\242\224]\224\183\231\015B\207n\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\244,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\223B\207n\219\252_:\231\247\255.\015\223K\127\252\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\001\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\002\b\031\000`\b\b\007\192 \004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000 A\240\006\000\128\128|\002\000@\000X 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\0160\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\131\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136B\018\000@0$r\000\000\n\001@\001\140\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\028\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002H\031\000`\b\b\007\192 \004\000\005\134\0030\184@\146\193F\254$z\000\128\250\001@\001\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\146\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\001 \004\003\002G \000\000\160\020\000\024\192@\000\000\000\000\000\000\000\000\000`\000\000\144\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\004\000\002@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000d\000\000\000\000\b\000\000\000\004\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000d\000\000\000\000\b\000\000\000\004\000\002\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000d\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\004\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000`\000\000\144\000\000\000\b\000\000\000\000\003\000G\000\000\000\000\000\000\000\000@\000\004@\000\000\000\000\000\000`\000@\144$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000@\000\000\000\000\000\000\000\000\000\000 \000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\200b\003\240\0224\164Z|b\n\192\128\025,\176\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\b\000\000\000\000\129\000\000\000\002\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001P\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\193\244\031\n\195\129\255.\005\222\011~p\240\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\243\011\132\001,\020o\226G\160\b\015\160\020\000\024\224BE.\193\244\031\n\195\129\255.\005\222\011~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000BE.\193\244\031\n\195\129\255n\005\222\155~p\240\000\002\000\031\000`\b\b\007\192`\004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246\237\191\197\243\174\127\127\246\224\253\253\183\255\223\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$A\240\006\000\128\128|\n\000@\000X 0\000\000@\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\016\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000$\000\136\000A\002\1648\0002\000\025\128\000 \004\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000\000\000\000\128\000\b\000\000\000\004\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000$\000\136\000A\002\1648\0002\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\002\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\000\000\002\000\000\000\128\001\000\000\000\000\004\000\000\000\000\000\000\000\000\000\b\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\016\004\000#\002M\160\002\000\160\000\000\016@\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\002@\b\128\004\016\nC\000\003 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\0002\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$R\236\031A\240\1728\031\242\224]\224\183\231\015@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@BE.\193\244\031\n\195\129\255.\005\222\011~p\244\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\020\004$R\236\031A\240\1728\031\242\224]\224\183\231\015\000\000\"\001\240\006\000\128\128|\002\000@\000| 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\002\000\000\b\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\168\000A\130\1648\000\"\000\029\128\002 \004@\000\002\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000L\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \024\000\000\000\128\016\000\000\004\000\000\000\000 \016\000\128\000\000\000\000\000\000\b\000\000\000\000\000\002\001\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000$\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\bb\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000$\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\016\000\128\000\000\000\000\000\000\b\000\000\000\000@\000\001\000\b\000\000\000\000\000\000\000\000\000\000\000\004\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000\005\004\000\028\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\002\000\000\000\000\001\000C\129\128\000\000H\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\129\128\000\000H\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\bbH\0020$V\000 \n@\000\005\004\000\028\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131C/\132\137\172Uo\230g\160(\015\184\020\000x\224\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\128\000\b\000\000\000\000\b\000\000\000\000\000\004\129\0160\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\001\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\002\000\001\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\216\000\002\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\b\128\004\024\nC\128\002 \001\152\000\002\000\000$\000\136\000A\000\1640\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\016\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000@$\000\136\000A\000\164 \000\"\000\025\128\000 \004\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\004\000\000$\000\136\000A\000\1640\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(42\248H\154\197V\254fz\002\128\251\129@\007\142\000\b\b\000\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\002@\b\128\004\016*C\128\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\004\136\000A\000\1640\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\002\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\006\016\nC\128\002 \001\216\000\006\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\002@\b\128\004\016\nC\128\002 \001\152\000\002\000\000$\000\136\000A\000\1640\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\192\b\168\012\0160\250@\002 \001\128\000\002\000\000$\000\136\000A\000\004 \000 \000\025\128\000 \000\000\128\000\000 \000\000\000\128\000\000\000\000\000\000\b\000\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016 C\000\002\000\001\152\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016 C\000\002\000\001\152\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\001\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\016\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\001@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\0040\000 \000\025\129\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016 C\000\002\000\001\152\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\128\000 \000\002@\b\128\004\016\000C\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\128\000 \004\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\000\000\0160 \000\000\001\000\000\000\000\000\004$\000\136\000A\128\0048\000 \000\025\128\000 \004\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\002\001\003\002\b\000\000\016\000\000\000\000\000\000\128\016\000\000\0160 \128\000\001\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000B@\b\128\004\024\000C\128\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000 \000 \000\192\000\000\002\000\000\000\000\000\b\128\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000$\000\136\000a\000\0048\000 \000\025\128\000`\000\004@\000\000 \000\016\000\192\000\000\000\000\000\000\000\000@\000\000\002\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002\000\000\000\000\001 B\128\128\000\000\b\001\000\000\000 \000\000\000\000\018\004 \b\000\000\000\128\016\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \bb\0000\184@\000 \000\000\000\000\000\000 \000\000\000\000\016\0048\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\001\000\bb\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\018 \192\000\000\000\000\000\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\b\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\000\018 @\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000@\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\b\000\000\000\000\000\004\000\000\000\000\000\128\000\000\000\000\128\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\016\1648\b\"\000\029\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\000\016\001\"\004\000\000\000\000\000\000\000\000\002@\n\128\004\017\nC\128\130 \001\216\001\002\000@ \000\000\000\000\016\0048\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\140\000\002\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\000\128\016\000\000\002\000\000\000\000\001\000C\000\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\000\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\001\000\018 @\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000,\002\168\000A\129\0048\000\"\000\029\128\000`\004\001\128\000 \000\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\128\000\000\000\000\128\000\000\000\000\000@\016\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002\192*\128\004\024\016C\128\002 \001\216\000\002\000@,\002\168\000A\129\0048\000\"\000\029\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\000\0048\000 \000\029\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\152\000\002\000@$\000\136\000A\000\004 \000 \000\025\128\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\024\000\002\128\144\003+\132\000\002\000\000\000\000\000\000\002@\bb\128\004\016\000C\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\016\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\216\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\001\002\000@$\000\136\000A\000\164 \000\"\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000B\000\002\000\001\152\000\002\000@\016\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000 @\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\024\128\002\192\128\003\011\133\000\002\000 \002\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\0040\000 \000\025\128\016 \004\002@\bbH\0020$V\000 \n@\000\005\004\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\002\000\000\000\000\001 B\129\128\000\000\b\001\000\000\000 \000\000\000\000\018\004 \024\000\000\000\128\016\000\000\002\000\000\000\000\001\000B\001\128\000\000\b\001\000\000\003\011\132\001,\020o\226O\160\b\015\160\020\000\024\2240\184@\018\193F\254$z\000\128\250\001@\001\142\000 \000\000\000\000\016\0040\024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\003\"\012\000\000\004\000\000\000\000\128\000\128\000\000\001\0002 \192\000\000@\000\000\000\000\000\b\000\000\000\016\003\"\004\000\000\004\000\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\024\132\016\006@#\002M\160\002\000\160\000\000\016@^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131@\024\132\016\004\000#\002M\160\002\000\160\000\000\016@\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\b\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000@\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002M`\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n\000\000\001\004\000\024\164\000\132\128\163\002E`\002\000\160\000\000\016@\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\004\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\202J\154\012Q:g\247\130 \011\153A\007\141@,\164\169\160\197\019\166\127x\"\000\185\148\016x\212\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\016\1648\024\"\000\025\128\016`\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\n\128\004\017\nC\129\130 \001\152\001\006\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\168\000A\016\1648\024\"\000\025\128\016`\020\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000$\000\168\000A\016\1648\024\"\000\025\128\016`\020\001\136A\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\000\128\016\000\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000 \000\000\000\000\016\0048\024\000\000\000\128\016\000\016\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184\192\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \004\001\138@\bH\0020$V\000 \n@\000\005\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nC\000\002 \001\152\000\002\000@$\000\136\000A\000\164 \000\"\000\025\128\000 \004\004\000\000\000\000\000\016\000\192\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\bH\0020$V\000 \n@\000\005\004\000$\000\136\000A\000\1640\000\"\000\025\128\000 \004\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nb\128\004\016\nC\000\002 \001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000 \000\025\128\000 \000\002@\b\128\004\016\nB\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\003 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\nB\000\003 \001\152\000\002\000@\000\000\bb\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000$\000\136\000A\002\1648\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1640\000 \000\025\128\000 \000\002@\b\128\004\016\nB\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\0000\184P\000 \002\000 \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\128\004\016\000C\000\002\000\001\152\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000@\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000$\000\136\000A\000\0040\000 \000\025\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\136\000A\000\1648\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000 \000  \128\000\001\000\000\000\000\000\000\b\b\000\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\000\000\000  \000\000\001\000\000\000\000\000\000\000\000 \000\000\002\000\b\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000@\000\002\000\000\bn\195\129\255.\005\222\011~p\244$R\236\031A\240\1728\031\242\224]\224\183\231\015\001\136@\000@\0020$Z\000 \n\128\000\001\020\004$R\236\031A\240\1728\031\242\224]\224\183\231\0150\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\000B\000\002\000\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\b\000\000\000\001\000\004\129\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\248H\018\197V\254fz\002\160\251\145@\003\142\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002\200H\000\004\016:B\002\002 \003\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nB\000\002 \001\144\016\002\000\000\b\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nB\000\002\000\001\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003/\132\129,Uo\230g\160*\015\185\020\0008\2242\248H\018\197V\254fz\002\160\251\145@\003\142\000$\000\128\000A\000\164 \000\"\000\025\000\000 \000\002@\b\000\004\016\nB\000\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\128\000A\000\1640\000\"\000\025\000\000 \000\002@\b\000\004\016\nB\000\002 \001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nC\000\002 \001\144\000\002\000\000$\000\128\000A\000\164 \000\"\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    7
  
  and action =
a\002\154\000\000\000\000\000\000\021\234\000\000G\018\000\000\000\000yj\000\000M\242I\026\000\228\000/\002Bh\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\003 \003\004\000\000\003 \004D\000\000\003x\005J\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\252\000\000\003RYf\000\000\000\000\003\160\000\000\000\000\000\000\004\200\004X\000\000\000\000YfG<\0216IDaZ\021\234e\156N\024\021\234Nv\000\000Nv\000\000\003(\001\018\000\000\003\160\000\000\000\000\000\000\004*\000\000\003(\000\000\003\176||\131jh\168\000\000\133\226Yf\000\000V\150Wx\000\000\138\004\024\226or\003\160y\208V\216\000\000Yf~\228\000\000Yf\135\228\000\\\000\000Yf\003\160\000\000\000\000[\186YfZ\242Wx\0003\003\176\000\172\000\000\005H\000\000\005H\000\000\000\000X<\000\\\000\000\000\000Wx\005\240Yf\000\000Y$WxZ\012\000\000\000\000\000\000\000|\000\000Yf\000\000\021\194[\252\000\000Yf\021\194Yf\000\000\031\234\006\138\003\160\000\000\000\000 \230\000\000\025\210\000\000^P\0024\000\000\006\180Yf\002\224\000\000\005,\000\000\000%\000\000\000\003\004\134\000\000\000\000\000\000\005\134\003\160\000\000Yf \006\000\r\003\206\021\234\138^\000\000\000\000\025\222\138~\000\000!\002\000\000\007\128\000\000\bNYf\000\000\b\158\000\000\005|\005\024\000\\\000\000\000\000Yf\004\234\005\240\000\000Yf\007\218\135\228\000\000\003H\000\000\b\240\b\220or\001v\0060\021\b\000\000\t\164\000\000\005\176\000\000\000\000\000\000\000\000m(\000\000\006\152\t\244r\206Wx\003H\nz\000\000\n\144Wxa\226\000\000iPWx\n\200Wxm\204b\136\021\234\000\000\127\150\003N\000\000\000\000\000\000\128\"\000\000r\206\021\234\000\000\003H\n\246\000\000\000\000\000\000|LK\218\025\178\003H\011\022\000\000\000\000\000\000\003H\011\024\000\000\000\000\000\000\000\000\131j\000\000a\246M\242I\026N\024\021\234R\224Nv\006\222|\216\000\000sZYf\006hYfi\244sj\000\000\000\000\011jG\228\000\000\028\224\003Nr\206\004T\0072\011\222\000\000\012f\000\000\000\000\002\000\006\020\011\196\012\218\000\000\021\234\000\000p.\000\000\000\000\000\000\000\000\000\000\000\000\000\000zJ\004T\021\234\000\000\000\000\007\014|\216\000\000sZ\000\000\r\022G\228\028\224p.\000\000I\026\000\000\000\000G<\027\154\021\234\026\016\021\234I\026L4\021\174O\226Z:\000\000\000s\000\000\000\000\004$\000\000\000\000N\218\000\162\002\134\002\156\r\130\006\130\000\000ID\r\142\rV\021\234\026\016\026\016\021\234\000\003\000\000\000\000Q\198\021\234\000\003Q\198\021\234\000\003\000\250\000\003Q\206\021\234\129\148\000\000Z:Z:\128\172\b\022\000\000\007\228\b\156\000\000\rr\000\000\025XYf\029\246\002\224Z:Q\206\021\234Z:\000\000\005\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000W\142\027\\\000\000\000\000\000\000\001\250\022H[ \000\000Q\206\021\234Z:\000\000\000\000^\022Z:qjZ:\136\018\000\000\\\130\000\000\000\000]v\000\000\000\000\022\168\000\000Z:\136dZ:\136v\002B\000\000\128\252\000\000\rx\000\000K<}b\000\000\000\000\000\000\023(\006\138\028X\007\134\000\000\000\000\000\000\000\000\012\196\000\000_\020\t\020\r\212\004LYf\001\132\014\016\000\000\000\000\tP\r\212\007\012\000\003Z:_d\002\228\000\000Z:\026\028Yf\011\132\007\012\014\022\000\000\000\000\000\000N\218\006Z\006Z\000\000\014:nVZ:\000\000\000\003n\166H\180\027\154\021\234\026\016\000/\000\182\000\t\000\000\000\000\000\000\r\178IDID\000/\000\182\000\182\000\000\014JID\000\000o@\b(Nv\b\022\000\232\1286\000\000Yfj\152Yfc,k \000\003\000\216\003\176c\208\002\154\003\176dt\000\000o\162\b(\000\000IDpF\000\000\006\188\t\006e\024\000\000\000\000\000\000\000\000\000\220\000\000\004\n\000\000\014Z\026\016\000\000`\182\026\016\000\000\004\242\000\000ID\005\016\000\000\000\000\000\000`\018\000\000\004~\000\003I\026K\014\bz\b\142\000\003\023\214Nl\017\242\000\003Qf\021\234\017\242Q\198\021\234J\020Q\198\021\234\000\003z\212\021\234[ Z:If\000\003Q\206\021\234}\242O\212\006Z\014\150s\244\000\003Q\206\021\234Z:\023(\000\003Q\206\021\234Z:\030\012\000\003\017\242\000\000\000\000\000\000\000\000\001\246\024\210H\022\000\000R\152Sj\027\154\021\234\026\016\t\232ID\005\188\000\000T<U\014Z:\028\020Yf\nX\000\003Qf\021\234\017\242\023\214\017\242\002\252\003\204\000\003\000\003\017\242\014h\000\000\014\152\000\000\017\242\004\002\014\154\000\000\023(\000\003\014\222\000\000\027\198\000\003\018\238\024\210\000\000\000\000\000\000\tt\000\003\000\000\000\000\t\192\000\003\000\000\028\194\000\003\029\190\000\003\030\186\000\000\019\234\025\206\000\003\000\000\000\003M\242\000\003\000\000\000\000\000\003\031\182\000\003 \178\000\003!\174\000\003\"\170\000\003#\166\000\003$\162\000\003%\158\000\003&\154\000\003'\150\000\003(\146\000\003)\142\000\003*\138\000\003+\134\000\003,\130\000\003-~\000\003.z\000\003/v\000\0030r\000\0031n\000\0032j\021\234Z:\029\016Yf\n\174\000\003\000\000 \004\000\003\000\000Z:!\000Z:!\252Z:\"\248\002B\000\000\000\000\000\000#\244Z:$\240p.\000\000\000\000\000\0003f\000\003\014\232\000\000\000\003k\150\000\000\007\228\007\208\000\003l(\000\000\000\003t`\000\000\000\003t`\000\000\000\000\017\242\005\b\b\204\000\003t`\006\014\000\0034b\000\003t\166\007\n\000\0035^\000\003t\166\b\006\000\0036Z\027`\000\003\014\242\t\002\000\0037V\000\003\015\006\t\254\000\0038R\000\003u8\n\250\000\0039N\b\210\t\200\000\003t\166\011\246\000\003:J\000\003u~\012\242\000\003;F\000\003u~\r\238\000\003<B\014\234\000\003=>\015\230\020\230\000\000\000\000\000\000u\178\000\000\000\003u\178\000\000\000\003vj\000\000\000\000%\236\000\003\000\000\b\138\000\003\000\000Z:\000\000\000\000{R\015\012\000\000K\014\000\000\014H\000\000k\150J\020\000\000U\222\000\000\015\014\000\000\bz\014\162\000\000\023\214\023\028\b\022\000\000\027PYf\028\166Yf\027\254Yf\029\162\000\000\003\230\t\134\t\204\000\000\000\000\015\026\000\000\001n\026\202Of\000\000\004\136\000\000\000\000\000\003\014x\000\003\014\136\000\000\014\134\000\003\014\154\000\000\000\003\004\136\000\003\014\174\000\003\014\184\000\000\000\000P\206\006Z\015ls\244Wx\006\178\000\003\000\000\000\000s\244\000\000\000\000\004$\030\012\000\000Yf\n\206\000\000\000\000s\244\000\000\015B\000\003\000\000\000\003\000\000\000\000\000\000>:Z:\000\000\000\000\015~\000\003?6\000\003@2\000\000\014\214\000\000\026\202k\150\000\000\016\236\015n\000\000l(\001\176\011t\000\000\000\000\015\006\000\000\015\142\000\000\000\000\014\210\000\000\000\000\021\234\026\016\007\240\000\003\000\000\002\134\002\156\015\186\000\234\026\016~:ID\027\192\026\016~\178\015H\000\003\000\000\000\234\000\000\022\248\021\234\003N\025f\t\232\015V\000\003\000\000\021\234\129\148Z:p.\000\000\000\000\0158\000\003\000\000\000\000nV\000\000\000\000\000\000\000\000\015\208\000\000\000\000or\006Z\0150Yf\011\150\000\003\000\000\npYf\012V\000\003\000\000\015J\000\003\000\000\000\000p.\000\000A.\016\018[ B*\016\024[ C&k\150\000\000ID\006\022\000\000ID\027\250\000\000ID\007\232\000\000l\132\b\228\000\000\031\b\000\000Yf\n\228\000\000P&\022~\012\172\003H\015\186\006\250\000\003\000\000\015p\000\003\000\000P \000\000\016\142\004`\000\000\nH\000\000\015\206\015LYfK&\015\212\n\234\000\003\000\000\015\132\000\003\000\000\029<\003\162\011H\015\226w\000\137l\006Z\015~Yf\012\166\000\003\000\000\011lYfI2\015\154\000\003\000\000J,\000\000P \000\000\r\194\012D\000\000\n\168\000\000\015\248\015\132or\000\000\016 wZ\137\184\006Z\015\182Yf\rR\000\003\000\000\015\210\000\003\000\000\000\000M\242I\026Z:Jd\000\003\000\000\024\248\024\218\002\156\003\160\131\198ID\129hp.\000\000\002\244\012\140\000\234p.\000\000\016\134\000\234p.\134>\002\156\016\138\000\234p.\134>\000\000\000\000M\242I\026\027\154\021\234\026\016sZ\000\000\000\228\000/\002B\015\178Yf\r\142\016\152\132\000\000\000p.\000\000\022\248\021\234\003Nz`\004T\021\234p.\000\000\021\234p.\000\000p\200\137\194\023\184\002\134\002\156\003\176a\246\000\000\002\156\003\176a\246\000\000\024\248\002\244\r\016\025 \000\003sj\000\000\003\176a\246\000\000ID\134ra\246\000\000\011\230\000\000\016\182\016\bIDsZh\188\002\156\016\230\016\016IDsZh\188\000\000\000\000G<\0216IDsZ\000\000\022\248\021\234\003Nr\206'\154\0284\006\216\005\172\000\000\012\218\003(\012&\000\000\016\154\016@I\230\021\174P\186Yf\012\198\000\000R\250\021\176\016\230\nJ\000\000\011\144\000\000\016\166\016(YfP \000\000\003\162\014\190\r@\000\000\r`\000\000\016\186\016<orP \000\000\021\176I\230\000\000\016\242\016@\002\156\000\003\006\228I\230Yf\r\"\n\014\r\184\r2\000\000\000\000Yf\b6\t2\000\000\000\000q:\000\000\000\003\011\206I\230q\198P \000\000\021\234Yf\r\162YfM(P \000\000\016x\000\000P \000\000\000\000R\250\000\000sZ\134\172\006\216\005\172\012\218\016\232\016\148I\230sZ\134\172\000\000\000\000\006\216\005\172\012\218\016\244\016x\136\184rlWx\017\012\136\184\135\228\031\012\017\028\136\184Wx\0174\136\184\014:\r\242w\224xh\000\000\132\132\000\000\000\000a\246x\176\006\216\005\172\012\218\0174\016\178\136\184a\246x\176\000\000\000\000\000\000\137\194\000\000\000\000\000\000\000\000\000\000\000\000a\246\000\000\135\004\021\174M\006\0178|\216\000\000sZ\135\014\000\000\000\000\137>\021\174M\006\017:\016\188\131j\000\000a\246\137>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\004'\154\006\216\005\172\012\218\017Jx\220N\198\021\174O\226P&\021\234\000\003P \000\000\021\182\021\176N\198N\198{\212M\242\021\234\129\148Z:\011\166\000\000\016\154\002\156\000\003\011\208N\198Yf\r\190\000\\\000\000\021\234]vx\220N\198\n\188N\198\000\000L\000L\244\000\000e\160\000\000\000\000fF\000\000\000\000f\236\000\003\r\160N\198g\146\129\148Z:\011\166\000\000\011\224\000\000\136\184\017\148\000\000H\022\017`\000\000P \000\000N\198H\022P \000\000\021\234YfP \000\000\017\004\000\000P \000\000\000\000P&\000\000\130\012\136\184\017&N\198\130nx\220\000\000p.\135r\006\216\005\172\012\218\017\144x\220p.\135r\000\000\000\000\000\000r\014Q\206\000\000\000\000\000\000\000\000\000\000\132\230\000\000\133Jp.\000\000\135\014\000\000\000\000\000\000\000\000p.r\014\000\000\017\200\000\000\132\230\000\000\133h\017\202\000\000\0174\000\000\0178\000\000sZ\000\000\021\234\026\016sZ\000\000p.r\014\000\000\000\000\017\214\000\000\000\000\017\202G\228\029\220a\246\000\000\000\000\000\000\000\000\014>\130\210\131j\000\000a\246\000\000\017\212G\228\029\220a\246\000\000\017P\000\000\t\224\000\000sZ\000\000\017\240\000\000\000\000\027\154\021\234\026\016\007\240\000\000ID\n\220\000\000\011F\000\000\017\250\000\000\018*[ D\"E\030[ F\026\000\003\000\000\000\003\000\000\017b\000\003\017h\000\000\018\018\000\000\000\003\017j\000\003\017z\000\000\017\142\000\000\000\000e\156\017\150\000\000\000\000Yf\000\000\n\228\000\000\000\003\017\154\000\000\000\000Z:\026\028\000\000\000\000J\020\003\160\127\\\000\000\000\000\000\000\000\000\000\000\\\222\007Z\000\000\000\000\018@\000\000gz\000\000\014l\018B\000\000\018R\000\000K\014K\014f\212f\212\000\000\000\000f.f\212\000\000\000\000\000\000f.f\212\017\204\000\000\017\210\000\000"), (16, "\b\137\000\006\000\246\tZ\t^\b\137\003\254\001\002\b\137\001\006\001\018\001\030\b\137\006\230\b\137\0049\001\"\b\137\tb\b\137\b\137\b\137\001\210\b\137\b\137\003.\001&\0049\0049\001*\b\137\006\174\006\178\012.\b\137\006\234\b\137\001\222\006\206\001\234\001.\000\238\b\137\b\137\0076\007:\b\137\007>\007J\001Z\007V\007^\b\226\t:\001\002\b\137\b\137\001n\000\238\001B\nf\b\137\b\137\b\137\nj\nn\nz\n\138\004\002\007\182\b\137\b\137\b\137\b\137\b\137\b\137\b\137\b\137\b\137\n\162\0049\b\137\003B\b\137\b\137\b\137\003\138\n\174\n\198\n\230\n\250\007\194\b\137\006.\b\137\b\137\b\137\001:\b\137\b\137\b\137\b\137\n\130\0065\n\134\003\142\016\030\b\137\0036\b\137\b\137\t\146\b\137\b\137\b\137\b\137\b\137\b\137\007\198\n\150\b\137\b\137\b\137\011\014\003\014\011r\011\185\b\137\b\137\b\137\b\137\011\185\n\022\011\185\011\185\0031\003.\011\185\011\185\011\185\011\185\tV\011\185\011\185\002\130\011\185\011\185\011\185\000\n\011\185\011\185\006\230\011\185\011\185\t\234\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\002\134\002\217\002\217\011\185\tV\011\185\011\185\011\185\011\185\011\185\006\234\000\238\011\185\011\185\011\185\002\217\011\185\007Z\011\185\011\185\011\185\001\137\003\142\011\185\011\185\011\185\011\185\011\185\011\185\011\185\003:\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\t\198\011\185\011\185\0049\011\185\011\185\011\185\0049\t\162\016\202\t\206\003\137\011\185\011\185\011\185\011\185\011\185\011\185\t\210\011\185\011\185\011\185\011\185\011\185\011\185\011\185\t\170\011\185\011\185\016\210\011\185\011\185\016z\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\011\185\000\238\001\137\011\185\011\185\011\185\011\185\001\137\000\238\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\015^\003\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\ba\001\137\001\137\001\137\001\137\001\137\003\222\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\002\217\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\130\001j\001F\0049\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\000\n\011&\001\137\007\242\001\137\001\137\0066\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\001\137\b\238\001\137\001\137\001\137\001\137\001\137\t\129\001J\0049\0049\002\217\t\129\006\169\t\129\t\129\003\238\006\169\t\129\t\129\t\129\t\129\000\238\t\129\t\129\0049\t\129\t\129\t\129\bM\t\129\t\129\006\001\t\129\t\129\011\165\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\b\242\t\014\001\214\t\129\001\226\t\129\t\129\t\129\t\129\t\129\011\165\004\234\t\129\t\129\t\129\002\182\t\129\002n\t\129\t\129\t\129\001\218\000\238\t\129\t\129\t\129\t\129\t\129\t\129\t\129\002v\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\004\170\t\129\t\129\007\166\t\129\t\129\t\129\001\238\0049\005}\002*\004\238\t\129\t\129\t\129\t\129\t\129\t\129\002\"\t\129\t\129\t\129\t\129\t\129\011\138\t\129\004\242\011\186\t\129\003\142\t\129\t\129\0049\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\t\129\0042\t\129\t\129\t\129\t\129\t\129\003\165\002.\0049\004\222\t\146\003\165\006\153\003\165\003\165\002\170\006\153\003\165\003\165\003\165\003\165\000\238\003\165\003\165\002\018\003\165\003\165\003\165\011\142\003\165\003\165\n\030\003\165\003\165\002\026\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\014\138\006A\014\150\003\165\002\154\003\165\003\165\003\165\003\165\003\165\t\234\001\002\003\165\003\165\003\165\001\030\003\165\006\t\003\165\003\165\003\165\003\133\004\217\003\165\003\165\003\165\003\165\003\165\003\165\003\165\000\238\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\015n\011\130\011\178\nv\003\165\003\165\003\165\006\242\001\230\018J\004\n\006\026\003\165\003\165\003\165\003\165\003\165\003\165\011\233\003\165\003\165\003\165\003\165\003\165\011\138\003\165\006&\011\186\003\165\006\246\003\165\003\165\n2\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\003\165\000\238\003\165\003\165\003\165\003\165\003\165\003\153\002\158\003\133\006.\t\146\003\153\b5\003\153\003\153\nb\n>\003\153\003\153\003\153\003\153\002\"\003\153\003\153\002:\003\153\003\153\003\153\b\190\003\153\003\153\nJ\003\153\003\153\002>\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\015r\n2\003>\003\153\003\246\003\153\003\153\003\153\003\153\003\153\t\234\000\238\003\153\003\153\003\153\000\238\003\153\006\017\003\153\003\153\003\153\002\206\003\014\003\153\003\153\003\153\003\153\003\153\003\153\003\153\000\238\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\004v\011\130\011\178\003F\003\153\003\153\003\153\020\250\001\242\004\026\004z\t\146\003\153\003\153\003\153\003\153\003\153\003\153\b5\003\153\003\153\003\153\003\153\003\153\011\138\003\153\nB\011\186\003\153\003}\003\153\003\153\011R\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\003\153\004\170\003\153\003\153\003\153\003\153\003\153\t%\011\225\t\234\005}\t\146\t%\004\146\t%\t%\003\142\001F\t%\t%\t%\t%\011\225\t%\t%\007Q\t%\t%\t%\000\238\t%\t%\017\210\t%\t%\003f\t%\t%\t%\t%\t%\t%\t%\t%\004\194\004\"\004\134\t%\003q\t%\t%\t%\t%\t%\t\234\000\238\t%\t%\t%\006:\t%\r\174\t%\t%\t%\000\238\005\157\t%\t%\t%\t%\t%\t%\t%\000\238\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\007\018\t%\t%\b\142\t%\t%\t%\004\161\003\186\t\030\002\"\002\194\t%\t%\t%\t%\t%\t%\004\150\t%\t%\t%\t%\t%\t%\t%\0049\t%\t%\000\238\t%\t%\002\"\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\t%\015\210\t!\t%\t%\t%\t%\t!\002\206\t!\t!\002\"\003.\t!\t!\t!\t!\005\234\t!\t!\005\157\t!\t!\t!\006\177\t!\t!\0049\t!\t!\005\214\t!\t!\t!\t!\t!\t!\t!\t!\003R\000\238\0049\t!\001b\t!\t!\t!\t!\t!\001F\007\022\t!\t!\t!\006\134\t!\r\194\t!\t!\t!\004j\021\170\t!\t!\t!\t!\t!\t!\t!\t\250\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\003\230\t!\t!\b\150\t!\t!\t!\006\129\t\206\018&\001\130\001j\t!\t!\t!\t!\t!\t!\b\222\t!\t!\t!\t!\t!\t!\t!\015\"\t!\t!\015*\t!\t!\t\146\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\t!\b9\t)\t!\t!\t!\t!\t)\017\234\t)\t)\006\030\026Z\t)\t)\t)\t)\001\002\t)\t)\004Z\t)\t)\t)\rn\t)\t)\t\150\t)\t)\t\234\t)\t)\t)\t)\t)\t)\t)\t)\rz\n2\r\134\t)\000\238\t)\t)\t)\t)\t)\b!\000\238\t)\t)\t)\000\238\t)\r\214\t)\t)\t)\007~\t\190\t)\t)\t)\t)\t)\t)\t)\016\178\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\004b\t)\t)\001F\t)\t)\t)\rj\000\238\006\153\007\134\b9\t)\t)\t)\t)\t)\t)\004n\t)\t)\t)\t)\t)\t)\t)\026^\t)\t)\nr\t)\t)\t\146\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\t)\007\138\t\025\t)\t)\t)\t)\t\025\017\246\t\025\t\025\t\254\b!\t\025\t\025\t\025\t\025\016\130\t\025\t\025\014\182\t\025\t\025\t\025\r\162\t\025\t\025\006\153\t\025\t\025\t\234\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\r\182\nv\r\202\t\025\004\178\t\025\t\025\t\025\t\025\t\025\b\029\000\238\t\025\t\025\t\025\002.\t\025\r\238\t\025\t\025\t\025\b\182\b\206\t\025\t\025\t\025\t\025\t\025\t\025\t\025\014\190\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\014\"\t\025\t\025\007\134\t\025\t\025\t\025\015F\000\238\b\214\017Z\by\t\025\t\025\t\025\t\025\t\025\t\025\004\182\t\025\t\025\t\025\t\025\t\025\t\025\t\025\004\206\t\025\t\025\001\002\t\025\t\025\t\146\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\t\025\b}\t\029\t\025\t\025\t\025\t\025\t\029\0262\t\029\t\029\011\234\b\029\t\029\t\029\t\029\t\029\002\"\t\029\t\029\004\162\t\029\t\029\t\029\014&\t\029\t\029\007~\t\029\t\029\t\234\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\014:\n2\014N\t\029\018R\t\029\t\029\t\029\t\029\t\029\011\250\000\238\t\029\t\029\t\029\000\238\t\029\014\002\t\029\t\029\t\029\021\146\012\222\t\029\t\029\t\029\t\029\t\029\t\029\t\029\0049\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\021>\t\029\t\029\004\026\t\029\t\029\t\029\005\006\005\129\005\141\018\234\005\014\t\029\t\029\t\029\t\029\t\029\t\029\012\222\t\029\t\029\t\029\t\029\t\029\t\029\t\029\011J\t\029\t\029\000\238\t\029\t\029\t\146\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\t\029\015\254\t9\t\029\t\029\t\029\t\029\t9\026f\t9\t9\007y\018\n\t9\t9\t9\t9\011n\t9\t9\005&\t9\t9\t9\005j\t9\t9\000\238\t9\t9\t\234\t9\t9\t9\t9\t9\t9\t9\t9\017~\005\138\005\158\t9\000\238\t9\t9\t9\t9\t9\024*\000\238\t9\t9\t9\000\238\t9\014\022\t9\t9\t9\012\242\026n\t9\t9\t9\t9\t9\t9\t9\006\006\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\021F\t9\t9\004\026\t9\t9\t9\006\002\026\247\018n\007u\003\249\t9\t9\t9\t9\t9\t9\012\222\t9\t9\t9\t9\t9\t9\t9\015\"\t9\t9\015*\t9\t9\nr\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\t9\005\137\t1\t9\t9\t9\t9\t1\000\238\t1\t1\006\"\024~\t1\t1\t1\t1\000\238\t1\t1\be\t1\t1\t1\005\186\t1\t1\015\"\t1\t1\015*\t1\t1\t1\t1\t1\t1\t1\t1\018\182\004Q\003\249\t1\tV\t1\t1\t1\t1\t1\021\n\017r\t1\t1\t1\000\238\t1\0142\t1\t1\t1\021\238\024\002\t1\t1\t1\t1\t1\t1\t1\018\226\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\006*\t1\t1\019v\t1\t1\t1\t\206\t\206\004Q\011\245\006>\t1\t1\t1\t1\t1\t1\019\130\t1\t1\t1\t1\t1\t1\t1\024\130\t1\t1\020z\t1\t1\000\238\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\021*\t-\t1\t1\t1\t1\t-\0049\t-\t-\006B\002\158\t-\t-\t-\t-\0049\t-\t-\017\134\t-\t-\t-\020^\t-\t-\000\238\t-\t-\000\238\t-\t-\t-\t-\t-\t-\t-\t-\020\146\002\241\003>\t-\000\238\t-\t-\t-\t-\t-\021\182\006\154\t-\t-\t-\021\002\t-\014F\t-\t-\t-\018\170\021r\t-\t-\t-\t-\t-\t-\t-\021j\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\007\014\t-\t-\021\194\t-\t-\t-\007\030\007\"\007\146\007\133\bn\t-\t-\t-\t-\t-\t-\b\170\t-\t-\t-\t-\t-\t-\t-\007\129\t-\t-\018\222\t-\t-\000\238\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\024\014\t5\t-\t-\t-\t-\t5\018\230\t5\t5\003>\021\202\t5\t5\t5\t5\000\238\t5\t5\019\026\t5\t5\t5\003.\t5\t5\000\238\t5\t5\007u\t5\t5\t5\t5\t5\t5\t5\t5\b\186\b\202\024b\t5\t\n\t5\t5\t5\t5\t5\002\"\019\226\t5\t5\t5\022\178\t5\014Z\t5\t5\t5\022\n\t*\t5\t5\t5\t5\t5\t5\t5\t\206\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\021\190\t5\t5\004Q\t5\t5\t5\tj\003.\021\202\t\134\025\254\t5\t5\t5\t5\t5\t5\n&\t5\t5\t5\t5\t5\t5\t5\n\222\t5\t5\021f\t5\t5\011\158\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\t5\005\186\tq\t5\t5\t5\t5\tq\021n\tq\tq\011\166\011\182\tq\tq\tq\tq\011\198\tq\tq\022\174\tq\tq\tq\rV\tq\tq\r\234\tq\tq\007}\tq\tq\tq\tq\tq\tq\tq\tq\r\254\014\210\014\226\tq\014\254\tq\tq\tq\tq\tq\015\n\015V\tq\tq\tq\015~\tq\014f\tq\tq\tq\015\134\015\142\tq\tq\tq\tq\tq\tq\tq\015\150\tq\tq\tq\tq\tq\tq\tq\tq\tq\tq\tq\015\170\tq\tq\015\178\tq\tq\tq\015\198\016\018\016>\016V\016n\tq\tq\tq\tq\tq\tq\016\138\tq\tq\tq\tq\tq\tq\tq\016\146\tq\tq\016\158\tq\tq\016\198\tq\tq\tq\tq\tq\tq\tq\tq\tq\tq\tq\tq\tq\016\230\003\149\tq\tq\tq\tq\003\149\017\014\003\149\003\149\0172\017V\003\149\003\149\003\149\003\149\017j\003\149\003\149\017\146\003\149\003\149\003\149\017\174\003\149\003\149\017\186\003\149\003\149\018\"\003\149\003\149\003\149\003\149\003\149\003\149\003\149\003\149\0182\018Z\018^\003\149\018j\003\149\003\149\003\149\003\149\003\149\018zt\r\021:\020\154\005}\020\174\t\r\020\178\t\r\t\r\021\018\021\022\t\r\t\r\t\r\t\r\021N\t\r\t\r\021R\t\r\t\r\t\r\000\238\t\r\t\r\021z\t\r\t\r\021~\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\021\158\021B\021\154\t\r\022\030\t\r\t\r\t\r\t\r\t\r\005\133\022N\t\r\t\r\t\r\022R\t\r\022v\t\r\t\r\t\r\022z\022\138\t\r\t\r\t\r\t\r\t\r\t\r\t\r\022\154\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\022\166\011\130\011\178\023\246\t\r\t\r\t\r\022\226\022\230\0232\023Z\023^\t\r\t\r\t\r\t\r\t\r\t\r\023\162\t\r\t\r\t\r\t\r\t\r\011\138\t\r\024\138\011\186\t\r\024\150\t\r\t\r\024\198\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\024\234\t\r\t\r\t\r\t\r\t\r\001\241\025\018\025~\025\146\025\154\001\241\025\162\001\002\001\241\025\210\025\222\001\030\001\241\011\154\001\241\026\022\001\"\001\241\026*\001\241\001\241\001\241\026B\001\241\001\241\026v\001&\011\162\026~\001*\001\241\001\241\001\241\001\241\001\241\011\170\001\241\026\166\026\174\026\182\001.\026\194\001\241\001\241\001\241\001\241\001\241\026\202\026\211\001Z\001j\001\241\026\227\001\241\027\003\001\241\001\241\001n\027O\027c\nf\001\241\001\241\001\241\nj\nn\nz\027k\r\150\007\182\001\241\001\241\001\241\001\241\001\241\001\241\001\241\001\241\001\241\027\167\011\130\011\178\027\175\001\241\001\241\001\241\000\000\000\000\000\000\000\000\000\000\007\194\001\241\006.\001\241\001\241\001\241\000\000\001\241\001\241\001\241\001\241\n\130\r\158\n\134\000\000\r\222\001\241\000\000\001\241\001\241\000\000\001\241\001\241\001\241\001\241\001\241\001\241\007\198\n\150\001\241\001\241\001\241\011\014\003\014\000\000\t]\001\241\001\241\001\241\001\241\t]\000\000\001\002\t]\000\000\000\000\001\030\t]\t]\t]\000\000\001\"\t]\000\000\t]\t]\t]\000\000\t]\t]\000\000\001&\t]\000\000\001*\t]\t]\t]\t]\t]\t]\t]\000\000\000\000\000\000\001.\000\000\t]\t]\t]\t]\t]\000\000\000\000\001Z\001j\t]\000\000\t]\000\000\t]\t]\001n\000\000\000\000\nf\t]\t]\t]\nj\nn\nz\000\000\t]\007\182\t]\t]\t]\t]\t]\t]\t]\t]\t]\000\000\t]\t]\000\000\t]\t]\t]\000\000\000\000\000\000\000\000\000\000\007\194\t]\006.\t]\t]\t]\000\000\t]\t]\t]\t]\n\130\t]\n\134\000\000\t]\t]\000\000\t]\t]\000\000\t]\t]\t]\t]\t]\t]\007\198\n\150\t]\t]\t]\011\014\003\014\000\000\tY\t]\t]\t]\t]\tY\000\000\001\002\tY\000\000\000\000\001\030\tY\tY\tY\000\000\001\"\tY\000\000\tY\tY\tY\000\000\tY\tY\000\000\001&\tY\000\000\001*\tY\tY\tY\tY\tY\tY\tY\000\000\000\000\000\000\001.\000\000\tY\tY\tY\tY\tY\000\000\000\000\001Z\001j\tY\000\000\tY\000\000\tY\tY\001n\000\000\000\000\nf\tY\tY\tY\nj\nn\nz\000\000\tY\007\182\tY\tY\tY\tY\tY\tY\tY\tY\tY\000\000\tY\tY\000\000\tY\tY\tY\000\000\000\000\000\000\000\000\000\000\007\194\tY\006.\tY\tY\tY\000\000\tY\tY\tY\tY\n\130\tY\n\134\000\000\tY\tY\000\000\tY\tY\000\000\tY\tY\tY\tY\tY\tY\007\198\n\150\tY\tY\tY\011\014\003\014\000\000\0025\tY\tY\tY\tY\0025\000\000\001\002\0025\000\000\000\000\001\030\0025\011\154\0025\000\000\001\"\0025\000\000\0025\0025\0025\000\000\0025\0025\000\000\001&\011\162\000\000\001*\0025\0025\0025\0025\0025\011\170\0025\000\000\000\000\000\000\001.\0049\0025\0025\0025\0025\0025\0049\000\000\001Z\001j\0025\000\000\0025\000\000\0025\0025\001n\0049\000\000\nf\0025\0025\0025\nj\nn\nz\0049\r\150\007\182\0025\0025\0025\0025\0025\0025\0025\0025\0025\000\000\000\238\0025\0049\0025\0025\0025\000\000\000\000\000\000\0049\0049\007\194\0025\006.\0025\0025\0025\0049\0025\0025\0025\0025\n\130\000\238\n\134\0049\0049\0025\0049\0025\0025\0049\0025\0025\0025\0025\0025\0025\007\198\nr\000\000\003\170\0049\bb\000\000\007z\000\000\0049\bF\0049\0049\0049\000\000\000\000\0049\0049\0049\0049\000\129\000\129\0049\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\238\000\129\000\000\000\129\000\129\002\217\000\129\000\129\000\000\002\217\000\129\000\129\000\000\000\129\000\129\000\129\015\022\000\129\000\000\000\129\000\129\000\238\000\000\000\129\000\129\000\000\000\129\000\129\000\129\001\002\000\129\000\n\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\006\173\000\000\000\129\000\129\006\173\002\217\000\129\000\129\000\000\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\018\022\002\217\002\217\000\000\000\000\000\129\000\000\000\129\000\000\000\129\bJ\011\190\007~\b\030\000\129\000\129\000\129\000\129\000\129\000\129\bR\000\129\000\129\000\129\bZ\000\238\rN\000\129\rZ\000\000\000\129\002\217\000\129\000\000\000\222\000\000\011\130\011\178\000\129\000\000\n\246\002\217\000\000\000\000\000\129\000\129\000\129\000\129\000\000\002)\000\129\000\129\000\129\000\129\002)\000\000\001\002\002)\015\154\011\138\001\030\002)\011\186\002)\000\000\001\"\002)\000\n\002)\002)\002)\000\000\002)\002)\bJ\001&\000\000\b\030\001*\002)\002)\002)\002)\002)\bR\002)\000\000\000\000\bZ\001.\000\000\002)\002)\002)\002)\002)\000\000\002\217\001Z\n~\002)\000\000\002)\000\000\002)\002)\001n\000\000\000\000\nf\002)\002)\002)\nj\nn\nz\000\000\000\000\007\182\002)\002)\002)\002)\002)\002)\002)\002)\002)\000\000\011\130\011\178\000\000\002)\002)\002)\000\000\000\000\000\000\000\000\000\000\007\194\002)\006.\002)\002)\002)\000\000\002)\002)\002)\002)\n\130\011\138\n\134\000\000\011\186\002)\020.\002)\002)\000\000\002)\002)\002)\002)\002)\002)\007\198\n\150\002)\002)\002)\011\014\003\014\000\000\002A\002)\002)\002)\002)\002A\000\000\001F\002A\000\000\000\000\002\217\002A\000\000\002A\011\133\000\000\002A\000\000\002A\002A\002A\000\000\002A\002A\000\000\002\217\019N\011\133\000\000\002A\002A\002A\002A\002A\000\000\002A\000\n\000\000\000\000\000\000\002\217\002A\002A\002A\002A\002A\000\000\000\000\011*\001j\002A\000\n\002A\002\217\002A\002A\000\000\011\133\000\000\014\214\002A\002A\002A\014\242\015\002\015\014\002\217\000\000\000\000\002A\002A\002A\002A\002A\002A\002A\002A\002A\000\000\011\130\011\178\002\217\002A\002A\002A\000\000\006\145\tV\011\133\000\000\006\145\002A\011\133\002A\002A\002A\000\000\002A\002A\002A\002A\000\000\011\138\000\000\000\000\011\186\002A\000\000\002A\002A\004\250\002A\002A\002A\002A\002A\002A\000\000\004\234\002A\002A\002A\002\182\002\218\000\000\002=\002A\002A\002A\002A\002=\000\000\000\000\002=\020b\000\000\0035\002=\000\000\002=\002\"\000\000\002=\000\000\002=\002=\002=\000\000\002=\002=\bQ\0035\020n\004F\020z\002=\002=\002=\002=\002=\004\238\002=\006\145\007.\000\000\001\002\000\000\002=\002=\002=\002=\002=\000\000\006\198\000\000\004\242\002=\005\130\002=\n6\002=\002=\007\154\002\206\000\000\003\245\002=\002=\002=\005\030\000\238\000\000\000\000\000\000\000\000\002=\002=\002=\002=\002=\002=\002=\002=\002=\004\222\011\130\011\178\007*\002=\002=\002=\000\000\bQ\000\000\003R\001n\005\142\002=\004\221\002=\002=\002=\000\000\002=\002=\002=\002=\000\238\011\138\000\000\000\000\011\186\002=\004\230\002=\002=\000\000\002=\002=\002=\002=\002=\002=\000\000\tN\002=\002=\002=\000\000\bQ\000\000\002-\002=\002=\002=\002=\002-\000\000\001F\002-\003\245\000\000\027\019\002-\000\000\002-\000\000\000\000\002-\000\000\002-\002-\002-\000\000\002-\002-\bJ\000\000\000\000\b\030\b\250\002-\002-\002-\002-\002-\bR\002-\000\000\000\000\bZ\000\000\000\000\002-\002-\002-\002-\002-\000\000\000\000\011*\015b\002-\000\000\002-\000\000\002-\002-\000\000\000\000\000\000\014\214\002-\002-\002-\014\242\015\002\015\014\000\000\000\000\000\000\002-\002-\002-\002-\002-\002-\002-\002-\002-\000\000\011\130\011\178\001\002\002-\002-\002-\000\000\006\185\000\000\001\"\000\000\006\185\002-\000\000\002-\002-\002-\000\000\002-\002-\002-\002-\000\000\011\138\000\000\006\226\011\186\002-\000\000\002-\002-\002\217\002-\002-\002-\002-\002-\002-\006\238\002\217\002-\002-\002-\t\146\r\226\007~\0029\002-\002-\002-\002-\0029\000\000\000\000\0029\000\000\000\000\000\n\0029\r\246\0029\014\n\007\182\0029\000\000\0029\0029\0029\000\000\0029\0029\000\000\t\146\002\217\000\000\000\000\0029\0029\0029\0029\0029\002\217\0029\006\185\007\194\000\000\t\234\002\217\0029\0029\0029\0029\0029\017\222\011q\011q\000\000\0029\011q\0029\015\"\0029\0029\015*\000\000\002\217\000\238\0029\0029\0029\002\217\007\198\000\000\000\000\000\000\t\234\0029\0029\0029\0029\0029\0029\0029\0029\0029\b\146\001\002\0029\000\000\0029\0029\0029\000\000\000\000\000\n\000\238\000\000\000\238\0029\016\218\0029\0029\0029\004\165\0029\0029\0029\0029\007\025\000\000\000\000\002\217\000\000\0029\000\000\0029\0029\000\000\011\206\0029\0029\0029\0029\0029\002\217\002\217\0029\0029\0029\007~\011q\000\000\b\133\0029\0029\0029\0029\b\133\011y\011y\b\133\007\025\011y\000\000\b\133\017\226\b\133\0152\000\000\012\006\000\000\b\133\012*\b\133\004\234\b\133\b\133\007\025\002\182\000\000\007\025\011f\012>\012V\012^\012F\012f\007\025\b\133\000\000\000\000\007\025\000\000\000\000\b\133\b\133\012n\012v\b\133\000\000\000\000\000\238\000\000\b\133\000\000\b\133\000\000\012~\b\133\000\000\000\000\000\000\000\000\b\133\b\133\000\238\004\238\0049\000\000\000\000\000\000\000\000\b\133\b\133\012\014\012N\012\134\012\142\012\158\b\133\b\133\004\242\000\000\b\133\011y\b\133\b\133\012\166\000\000\000\000\000\000\0049\000\000\000\000\b\133\000\000\b\133\b\133\012\174\000\000\b\133\b\133\b\133\b\133\t\189\000\000\000\000\000\000\000\000\b\133\004\222\b\133\b\133\0049\012\206\b\133\012\214\012\150\b\133\b\133\000\000\000\000\b\133\012\182\b\133\000\000\000\238\000\000\002m\b\133\b\133\012\190\012\198\002m\011u\011u\002m\t\189\011u\006\014\002m\000\000\002m\000\000\000\000\002m\000\000\002m\002m\002m\004\234\002m\002m\t\189\002\182\000\000\t\189\012\234\002m\002m\002m\002m\002m\t\189\002m\000\000\000\000\t\189\000\000\000\000\002m\002m\002m\002m\002m\000\000\006\149\000\238\000\000\002m\006\149\002m\000\000\002m\002m\000\000\018\134\000\000\015\242\002m\002m\002m\004\238\000\000\000\000\000\000\000\000\000\000\002m\002m\012\014\002m\002m\002m\002m\002m\002m\004\242\000\000\002m\011u\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\000\238\002m\000\000\002m\002m\002m\000\000\002m\002m\002m\002m\000\238\000\000\000\000\000\000\000\000\002m\004\222\002m\002m\000\000\002m\002m\002m\002m\002m\002m\000\000\000\000\002m\002m\002m\000\000\006\149\000\000\002U\002m\002m\002m\002m\002U\000\000\000\000\002U\011\n\000\000\005>\002U\000\000\002U\000\000\000\000\002U\000\000\002U\002U\002U\000\000\002U\002U\bJ\000\000\000\000\b\030\015\246\002U\002U\002U\002U\002U\bR\002U\000\000\000\000\bZ\000\000\000\000\002U\002U\002U\002U\002U\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\002U\002U\000\000\000\000\000\000\017\254\002U\002U\002U\b\029\000\000\000\000\000\000\000\000\000\000\002U\002U\012\014\002U\002U\002U\002U\002U\002U\000\000\000\000\002U\000\000\002U\002U\002U\000\000\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\002U\002U\000\000\002U\002U\002U\002U\000\238\000\000\000\238\000\000\000\000\002U\000\000\002U\002U\000\000\002U\002U\002U\002U\002U\002U\000\000\000\000\002U\002U\002U\000\000\000\000\000\000\002a\002U\002U\002U\002U\002a\000\000\000\000\002a\000\000\000\000\000\000\002a\000\000\002a\000\000\000\000\012\006\000\000\002a\002a\002a\000\000\002a\002a\bJ\000\000\b\029\b\030\018\002\002a\002a\002a\012F\002a\bR\002a\bQ\000\000\bZ\000\000\000\000\002a\002a\002a\002a\002a\000\000\000\000\b\t\000\000\002a\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\007i\002a\002a\002a\007i\000\000\000\000\000\000\000\000\000\000\002a\002a\012\014\012N\002a\002a\002a\002a\002a\000\000\000\000\002a\000\000\002a\002a\002a\000\000\000\000\000\000\b\t\000\000\000\000\002a\000\000\002a\002a\002a\000\000\002a\002a\002a\002a\000\238\007i\000\000\000\000\000\000\002a\000\000\002a\002a\b\t\002a\002a\002a\002a\002a\002a\000\000\000\000\002a\002a\002a\000\000\000\000\007i\002q\002a\002a\002a\002a\002q\000\000\000\000\002q\012\254\000\000\000\000\002q\000\000\002q\000\000\000\000\002q\000\000\002q\002q\002q\b\t\002q\002q\r\006\003\182\000\000\r\014\b\t\002q\002q\002q\002q\002q\r\022\002q\000\000\000\000\r\030\003\182\000\000\002q\002q\002q\002q\002q\000\000\000\000\b\005\000\000\002q\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\007e\002q\002q\002q\007e\000\000\000\000\000\000\000\000\000\000\002q\002q\012\014\002q\002q\002q\002q\002q\002q\000\000\000\000\002q\000\000\002q\002q\002q\000\000\000\000\000\000\b\005\000\000\000\000\002q\000\000\002q\002q\002q\000\000\002q\002q\002q\002q\000\238\007e\000\000\000\000\000\000\002q\000\000\002q\002q\b\005\002q\002q\002q\002q\002q\002q\000\000\000\000\002q\002q\002q\000\000\000\000\007e\002Q\002q\002q\002q\002q\002Q\000\000\000\000\002Q\007\021\000\000\000\000\002Q\000\000\002Q\000\000\000\000\002Q\000\000\002Q\002Q\002Q\b\005\002Q\002Q\007\021\003\182\000\000\b\030\bbbJ\000\000\000\000\br2\000\000\000\000\0079\000\000\012>\012V\012^\012F\012f\0079\002\129\000\000\000\000\0079\000\000\000\000\002\129\002\129\012n\012v\002\129\000\000\000\000\000\000\000\000\002\129\000\000\002\129\000\000\012~i\002\129\002\129\012\190\012\198\002i\000\000\000\000\002i\007\017\000\000\000\000\002i\000\000\002i\000\000\000\000\012\006\000\000\002i\002i\002i\000\000\002i\002i\007\017\000\000\000\000\b\030\000\000\002i\002i\002i\012F\002i\007\017\002i\000\000\000\000\007\017\000\000\000\000\002i\002i\002i\002i\002i\000\000\000\000\000\000\000\000\002i\000\000\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\002i\012\014\012N\002i\002i\002i\002i\002i\000\000\000\000\002i\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\002i\000\000\002i\002i\002i\002i\000\238\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\000\000\002i\002i\002i\002i\002i\002i\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\002e\002i\002i\002i\002i\002e\000\000\000\000\002e\014\170\000\000\000\000\002e\000\000\002e\000\000\000\000\012\006\000\000\002e\002e\002e\000\000\002e\002e\r\006\000\000\000\000\r\014\000\000\002e\002e\002e\012F\002e\r\022\002e\000\000\000\000\r\030\000\000\000\000\002e\002e\002e\002e\002e\000\000\000\000\000\000\000\000\002e\000\000\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\002e\012\014\012N\002e\002e\002e\002e\002e\000\000\000\000\002e\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\002e\000\000\002e\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\000\000\002e\002e\002e\002e\002e\002e\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\002y\002e\002e\002e\002e\002y\002\217\000\000\002y\000\000\020\238\000\000\002y\000\000\002y\000\000\000\000\012\006\000\000\002y\002y\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\002y\000\n\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\012n\012v\002y\000\000\000\000\000\000\000\000\002y\002\217\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\002y\000\238\000\000\002\217\002\217\000\000\000\000\000\000\002y\002y\012\014\012N\012\134\012\142\002y\002y\002y\000\000\000\000\002y\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\002y\000\000\002y\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\002y\002y\002y\012\150\002y\002y\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\002M\002y\002y\002y\002yn\012vn\012vn\012v}\002E\002E\002E\002E\002}\000\000\000\000\002}\000\000\000\000\000\000\002}\000\000\002}\000\000\000\000\012\006\000\000\002}\002}\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\012n\012v\002}\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\002}\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\012\014\012N\012\134\012\142\002}\002}\002}\000\000\000\000\002}\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\002}\000\000\002}\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\002}\002}\002}\012\150\002}\002}\000\000\000\000\002}\002}\002}\000\000\000\000\000\000\002u\002}\002}\002}\002}\002u\000\000\000\000\002u\000\000\000\000\000\000\002u\000\000\002u\000\000\000\000\012\006\000\000\002u\002u\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\002u\002u\012n\012v\002u\000\000\000\000\000\000\000\000\002u\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\002u\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\012\014\012N\012\134\012\142\002u\002u\002u\000\000\000\000\002u\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\002u\000\000\002u\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\000\000\002u\002u\002u\012\150\002u\002u\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\002\133\002u\002u\002u\002u\002\133\000\000\000\000\002\133\000\000\000\000\000\000\002\133\000\000\002\133\000\000\000\000\012\006\000\000\002\133\002\133\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\002\133\000\000\000\000\000\000\000\000\000\000\002\133\002\133\012n\012v\002\133\000\000\000\000\000\000\000\000\002\133\000\000\002\133\000\000\012~n\012v\002\137\000\000\000\000\000\000\000\000\002\137\000\000\002\137\000\000\012~n\012v\002\141\000\000\000\000\000\000\000\000\002\141\000\000\002\141\000\000\012~bA\002\141\002\141\012\190\012\198\bA\000\000\000\000\bA\000\000\000\000\000\000\bA\000\000\bA\000\000\000\000\012\006\000\000\bA\bA\bA\000\000\bA\bA\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\bA\000\000\000\000\000\000\000\000\000\000\bA\bA\012n\012v\bA\000\000\000\000\000\000\000\000\bA\000\000\bA\000\000\012~\bA\000\000\000\000\000\000\000\000\bA\bA\000\238\000\000\000\000\000\000\000\000\000\000\000\000\bA\bA\012\014\012N\012\134\012\142\012\158\bA\bA\000\000\000\000\bA\000\000\bA\bA\012\166\000\000\000\000\000\000\000\000\000\000\000\000\bA\000\000\bA\bA\012\174\000\000\bA\bA\bA\bA\000\000\000\000\000\000\000\000\000\000\bA\000\000\bA\bA\000\000\bA\bA\bA\012\150\bA\bA\000\000\000\000\bA\012\182\bA\000\000\000\000\000\000\002\145\bA\bA\012\190\012\198\002\145\000\000\000\000\002\145\000\000\000\000\000\000\002\145\000\000\002\145\000\000\000\000\012\006\000\000\002\145\002\145\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\002\145\000\000\000\000\000\000\000\000\000\000\002\145\002\145\012n\012v\002\145\000\000\000\000\000\000\000\000\002\145\000\000\002\145\000\000\012~b=\002\145\002\145\012\190\012\198\b=\000\000\000\000\b=\000\000\000\000\000\000\b=\000\000\b=\000\000\000\000\012\006\000\000\b=\b=\b=\000\000\b=\b=\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\b=\000\000\000\000\000\000\000\000\000\000\b=\b=\012n\012v\b=\000\000\000\000\000\000\000\000\b=\000\000\b=\000\000\012~\b=\000\000\000\000\000\000\000\000\b=\b=\000\238\000\000\000\000\000\000\000\000\000\000\000\000\b=\b=\012\014\012N\012\134\012\142\012\158\b=\b=\000\000\000\000\b=\000\000\b=\b=\012\166\000\000\000\000\000\000\000\000\000\000\000\000\b=\000\000\b=\b=\012\174\000\000\b=\b=\b=\b=\000\000\000\000\000\000\000\000\000\000\b=\000\000\b=\b=\000\000\b=\b=\b=\012\150\b=\b=\000\000\000\000\b=\012\182\b=\000\000\000\000\000\000\002\193\b=\b=\012\190\012\198\002\193\000\000\000\000\002\193\000\000\000\000\000\000\002\193\000\000\002\193\000\000\000\000\012\006\000\000\002\193\002\193\002\193\000\000\002\193\002\193\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\002\193\000\000\000\000\000\000\000\000\000\000\002\193\002\193\012n\012v\002\193\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\012~f\000\000\002\189\000\000\000\000\000\000\000\000\000\000\002\189\002\189\012n\012v\002\189\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\012~f\000\000\002\197\000\000\000\000\000\000\000\000\000\000\002\197\002\197\012n\012v\002\197\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\012~f\000\000\002\177\000\000\000\000\000\000\000\000\000\000\002\177\002\177\012n\012v\002\177\000\000\000\000\000\000\000\000\002\177\000\000\002\177\000\000\012~f\000\000\002\181\000\000\000\000\000\000\000\000\000\000\002\181\002\181\012n\012v\002\181\000\000\000\000\000\000\000\000\002\181\000\000\002\181\000\000\012~f\000\000\002\185\000\000\000\000\000\000\000\000\000\000\002\185\002\185\012n\012v\002\185\000\000\000\000\000\000\000\000\002\185\000\000\002\185\000\000\012~\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\012\014\012N\012\134\012\142\012\158\002\185\002\185\000\000\000\000\002\185\000\000\002\185\002\185\012\166\000\000\000\000\000\000\000\000\000\000\000\000\002\185\000\000\002\185\002\185\012\174\000\000\002\185\002\185\002\185\002\185\000\000\000\000\000\000\000\000\000\000\002\185\000\000\002\185\002\185\000\000\012\206\002\185\012\214\012\150\002\185\002\185\000\000\000\000\002\185\012\182\002\185\000\000\000\000\000\000\002\205\002\185\002\185\012\190\012\198\002\205\000\000\000\000\002\205\000\000\000\000\000\000\002\205\000\000\002\205\000\000\000\000\012\006\000\000\002\205\002\205\002\205\000\000\002\205\002\205\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\002\205\000\000\000\000\000\000\000\000\000\000\002\205\002\205\012n\012v\002\205\000\000\000\000\000\000\000\000\002\205\000\000\002\205\000\000\012~f\000\000\002\201\000\000\000\000\000\000\000\000\000\000\002\201\002\201\012n\012v\002\201\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\012~f\000\000\002\209\000\000\000\000\000\000\000\000\000\000\002\209\002\209\012n\012v\002\209\000\000\000\000\000\000\000\000\002\209\000\000\002\209\000\000\012~f\000\000\002\173\000\000\000\000\000\000\000\000\000\000\002\173\002\173\012n\012v\002\173\000\000\000\000\000\000\000\000\002\173\000\000\002\173\000\000\012~f\000\000\002\029\000\000\000\000\000\000\000\000\000\000\002\029\002\029\012n\012v\002\029\000\000\000\000\000\000\000\000\002\029\000\000\002\029\000\000\012~f\000\000\002\025\000\000\000\000\000\000\000\000\000\000\002\025\002\025\012n\012v\002\025\000\000\000\000\000\000\000\000\002\025\000\000\002\025\000\000\012~f\000\000\002\169\000\000\000\000\000\000\000\000\000\000\002\169\002\169\012n\012v\002\169\000\000\000\000\000\000\000\000\002\169\000\000\002\169\000\000\012~b\000\000\000\000\000\000\000\000\001&\000\000\002\217\001f\001\138\0112\0116\001\150\001\154\000\000\002\217\000\000\006\206\002\217\001.\000\000\026J\000\000\011V\011Z\000\000\007>\007J\001Z\007V\007^\011^\t:\000\n\001\170\000\000\001n\000\000\000\000\nf\000\000\000\000\002\217\nj\nn\nz\n\138\000\000\007\182\002\217\002\217\001\174\001\178\001\182\001\186\001\190\000\000\002\217\n\162\001\194\000\000\000\000\000\000\002\217\001\198\000\000\n\174\n\198\n\230\n\250\007\194\000\000\006.\000\000\000\000\001\202\000\000\000\000\000\000\000\000\000\000\n\130\001\206\n\134\000\000\000\000\002\217\000\000\000\000\000\000\000\000\007u\000\000\001\246\006\030\007u\000\000\007\198\n\150\000\000\001\250\000\000\014\202\003\014\011r\000\000\002\002\000\000\002\006\002\n\000\006\000\246\006\006\000\000\006\137\000\000\001\002\000\000\001\006\001\018\001\030\000\000\000\000\006\186\000\000\001\"\001^\000\000\000\000\000\000\011.\000\000\000\000\007u\000\000\001&\000\000\000\000\001f\001\138\0112\0116\001\150\001\154\000\000\000\000\000\000\006\206\007u\001.\000\000\011:\000\000\011V\011Z\006\137\007>\007J\001Z\007V\007^\011^\t:\000\000\001\170\006\137\001n\000\000\000\000\nf\006\137\006\137\000\238\nj\nn\nz\n\138\007u\007\182\006\137\006\137\001\174\001\178\001\182\001\186\001\190\000\000\000\000\n\162\001\194\000\000\000\000\000\000\000\000\001\198\002\217\n\174\n\198\n\230\n\250\007\194\000\000\006.\002\217\000\000\001\202\007u\000\000\006\137\000\000\000\000\n\130\001\206\n\134\000\000\000\000\000\000\000\000\000\000\006\137\000\000\000\n\000\000\001\246\006>\000\000\000\000\007\198\n\150\000\000\001\250\000\000\014\202\003\014\011r\024\146\002\002\002\217\002\006\002\n\000\006\000\246\000\000\000\000\001v\002\217\001\002\005\194\001\006\001\018\001\030\002\217\000\000\000\000\000\000\001\"\007a\000\000\006\170\000\000\000\000\000\000\004e\000\000\000\000\001&\019:\002V\001*\000\000\006\174\006\178\000\000\000\000\002\217\006\182\000\000\006\206\002Z\001.\n\194\019J\000\000\0076\007:\000\000\007>\007J\001Z\007V\007^\b\226\t:\000\000\000\000\0192\001n\007a\000\000\nf\019\174\000\000\007\026\nj\nn\nz\n\138\007a\007\182\tn\002.\tB\007a\007a\000\238\000\000\019\182\001n\n\162\000\000\016\026\007a\007a\000\000\000\000\000\000\n\174\n\198\n\230\n\250\007\194\000\000\006.\019\202\019\246\000\000\000\000\004e\004e\000\000\000\238\n\130\000\000\n\134\000\000\000\000\tr\007a\002\"\000\000\007a\000\000\000\000\000\000\000\000\020\"\023\142\007\198\n\150\016\150\000\000\007a\011\014\003\014\011r\000\006\000\246\000\000\000\000\001v\000\000\001\002\005\194\001\006\001\018\001\030\000\000\000\000\000\000\021\026\001\"\007]\000\000\004\133\000\000\000\000\000\000\bY\000\000\bJ\001&\021\146\b\030\001*\021\150\006\174\006\178\000\000\001n\bR\006\182\000\000\006\206\bZ\001.\021\174\019J\019B\0076\007:\000\000\007>\007J\001Z\007V\007^\b\226\t:\000\000\000\000\0192\001n\007]\000\000\nf\019\174\000\000\007U\nj\nn\nz\n\138\007]\007\182\000\000\000\000\000\000\007]\007]\000\238\000\000\019\182\000\000\n\162\000\000\027\030\007]\007]\000\000\000\000\000\000\n\174\n\198\n\230\n\250\007\194\000\000\006.\019\202\019\246\000\000\000\000\027C\016N\000\000\000\000\n\130\000\238\n\134\000\000\000\000\000\000\007]\000\000\000\000\007]\000\000\000\000\000\000\000\000\000\000\023\142\007\198\n\150\bY\000\000\007]\011\014\003\014\011r\000\006\000\246\000\000\000\000\001v\000\000\001\002\005\194\001\006\001\018\001\030\000\000\000\000\000\000\000\000\001\"\011\201\000\000\027r\000\000\000\000\000\000\006*\000\000\000\000\001&\bJ\000\000\001*\b\030\006\174\006\178\000\000\000\000\000\000\006\182\bR\006\206\000\000\001.\bZ\019J\bv\0076\007:\bm\007>\007J\001Z\007V\007^\b\226\t:\000\000\000\000\0192\001n\011\201\000\000\nf\019\174\000\000\000\000\nj\nn\nz\n\138\011\201\007\182\000\000\000\000\000\000\011\201\011\201\000\238\000\000\019\182\000\000\n\162\000\000\027\030\011\201\011\201\000\000\000\000\000\238\n\174\n\198\n\230\n\250\007\194\000\000\006.\019\202\019\246\000\000\000\000\004\141\000\000\000\000\000\000\n\130\000\000\n\134\000\000\000\000\000\000\000\000\004\234\000\000\011\201\000\000\002\182\000\000\000\000\000\000\023\142\007\198\n\150\014\218\000\000\011\201\011\014\003\014\011r\000\141\000\000\001\002\000\141\005~\000\000\001\030\000\000\011\154\bJ\000\000\001\"\b\030\000\000\000\141\000\000\000\141\bm\000\141\bR\000\000\001&\011\162\bZ\001*\004\238\002\217\000\000\000\000\000\000\011\170\000\141\000\000\000\000\000\000\001.\000\000\000\141\000\000\000\000\004\242\000\141\005\150\000\000\001Z\001j\000\141\000\000\000\141\000\000\000\000\000\141\001n\000\000\000\n\nf\000\141\000\141\000\141\nj\nn\nz\000\000\r\150\007\182\000\141\000\141\002\217\000\000\004\222\002\217\000\000\000\141\000\000\000\000\000\000\000\141\002\217\000\000\000\000\000\000\005\162\002\217\000\000\002\217\000\000\007\194\000\000\006.\000\141\000\141\002\217\002\217\000\141\000\141\000\000\000\000\n\130\004\230\n\134\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\000\000\000\000\000\000\141\000\141\007\198\n\150\000\000\000\000\000\000\011\014\003\014\002\217\000\141\000\165\000\141\001\002\000\165\000\000\000\000\001\030\000\000\011\154\002\217\011\165\001\"\000\000\000\000\000\165\000\000\000\165\000\000\000\165\000\000\000\000\001&\011\162\000\000\001*\000\000\001\165\000\000\000\000\011\165\011\170\000\165\000\000\000\000\000\000\001.\002n\000\165\000\000\000\000\000\000\000\165\000\000\000\000\001Z\001j\000\165\000\000\000\165\002v\000\000\000\165\001n\002z\011\145\nf\000\165\000\165\000\165\nj\nn\nz\000\000\r\150\007\182\000\165\000\165\001\165\000\000\000\000\000\000\000\000\000\165\000\000\000\000\000\000\000\165\001\165\000\000\000\000\000\000\000\000\001\165\001\165\000\238\000\000\007\194\000\000\006.\000\165\000\165\001\165\001\165\000\165\000\165\000\000\000\000\n\130\000\000\n\134\000\000\000\000\000\000\000\000\000\000\000\165\000\000\000\000\000\000\000\000\000\000\000\165\000\165\007\198\n\150\000\000\000\000\000\000\011\014\003\014\001\165\000\165\000\014\000\165\000\018\000\022\000\026\000\030\000\000\000\"\000&\001\165\000*\000.\0002\000\000\0006\000:\000\000\000\000\000>\000\000\000\000\000\000\000B\000\000\000\000\002\217\002\217\000\000\000F\000\000\000\000\000\000\000\000\000\000\000J\000\000\000N\000R\000V\000Z\000^\000b\000f\000\000\002\217\000\000\000j\000\000\000n\000\000\000r\002\217\000\n\000v\000\000\000\000\000\000\000\000\002\217\000\000\000\000\011\185\000\000\000\000\002\217\000\000\000\000\000z\002\217\002\217\000~\000\130\011\165\011\145\000\000\000\000\000\000\000\134\000\138\000\142\000\000\003\141\002\217\000\000\000\000\003\141\000\146\000\150\000\154\000\000\000\158\011\165\000\000\000\162\000\166\000\170\000\000\000\000\002n\000\174\000\178\000\182\000\000\000\000\000\000\002r\000\000\000\186\000\000\000\190\000\194\002v\000\000\001\002\000\000\002z\011\145\000\198\000\000\000\202\000\000\000\000\006\222\001\002\t\026\000\206\000\210\001\030\000\214\000\000\000\000\000\000\001\"\001^\000\000\000\000\000\000\001b\000\000\000\000\000\000\011\185\011\185\000\000\023\170\001\134\001\138\001\142\006\254\001\150\001\154\000\000\000\000\000\000\000\000\023\210\001:\003\141\007\002\023\214\001\158\015\234\000\000\001n\011\185\006\250\001j\011\185\001\166\000\000\024\006\001\170\000\000\001n\003\141\000\000\007r\003\141\000\000\000\000\007v\000\000\007zn\006\222\001\002\n\214\000\000\000\000\001\030\000\241\000\000\000\000\000\000\001\"\001^\000\000\000\000\000\000\001b\000\000\000\000\000\000\011\185\011\185\000\000\000\000\001\134\001\138\001\142\006\254\001\150\001\154\000\000\000\000\000\000\000\000\000\000\000\000\003\145\007\002\004Q\001\158\015\234\018\018\000\000\011\185\006\250\001j\011\185\001\166\000\241\000\000\001\170\006\218\001n\003\145\000\000\007r\003\145\000\000\000\241\007v\000\000\007z\007\170\000\241\007\182\000\000\000\000\001\174\001\178\001\182\001\186\001\190\000\241\000\241\000\000\001\194\007\186\000\000\000\000\004Q\001\198\000\000\018\130\000\000\000\000\000\000\007\194\000\000\006.\004Q\007\254\001\202\0192\000\000\004Q\005\186\000\238\019\174\001\206\000\000\000\000\000\241\000\000\004Q\004Q\000\000\023\182\023\198\000\000\001\246\006\030\000\000\000\241\007\198\000\000\000\249\001\250\000\000\001\254\003\014\000\000\000\000\002\002\000\000\002\006\002\n\006\222\001\002\015\190\000\000\000\000\001\030\004Q\000\000\000\000\004}\001\"\001^\000\000\000\000\000\000\001b\000\000\004Q\000\000\000\000\024\178\000\000\000\000\001\134\001\138\001\142\006\254\001\150\001\154\000\000\000\249\000\000\000\000\021\"\000\000\000\000\007\002\000\000\001\158\015\234\000\249\000\000\000\000\006\250\001j\000\249\001\166\000\000\000\000\001\170\000\000\001n\000\000\000\000\007r\000\249\000\000\000\000\007v\000\000\007z\007\170\000\000\007\182\000\000\000\000\001\174\001\178\001\182\001\186\001\190\000\000\000\000\000\000\001\194\007\186\000\000\002\217\000\000\001\198\000\000\002\217\000\000\000\249\000\000\007\194\002\217\006.\000\000\007\254\001\202\000\000\000\000\000\000\000\249\000\000\002\217\001\206\000\000\002\217\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\001\246\006\030\002\217\000\000\007\198\000\000\000\000\001\250\000\000\001\254\003\014\002\217\002\217\002\002\000\000\002\006\002\n\002\217\000\000\002\217\002\217\002\217\002\217\000\000\000\000\002\217\002\217\002\217\002\217\000\000\002\217\002\217\000\000\000\000\000\000\000\000\002\217\000\000\000\000\002\217\000\000\002\217\002\217\000\n\000\000\000\000\002\217\000\n\002\217\002\217\002\217\000\000\000\000\002\217\002\217\002\217\000\000\002\217\002\217\002\217\002\217\002\217\002\217\002\217\002\217\000\000\002\217\002\217\000\000\000\000\002\217\002\217\000\000\002\217\002\217\002\217\002\217\002\217\002\217\002\217\002\217\002\217\002\217\002\217\000\000\002\217\002\217\000\000\000\000\002\217\000\000\000\000\000\000\000\000\000\000\002\217\000\000\002\217\002\217\002\217\002\217\002\217\000\000\002\217\000\000\002\217\000\000\002\217\000\000\002\217\000\000\000\000\002\217\000\000\002\217\000\000\000!\000!\000\000\000\000\000\000\000\000\000!\000\000\000!\000!\000!\000\000\002\217\002\217\000\000\000!\002\217\002\217\002\217\002\217\0069\000\000\002\217\000\000\000\000\000!\000\000\000\000\000!\000\000\000!\000!\000\000\000\000\000\000\000\000\000\000\000!\000\000\000!\000\000\011\165\011\145\000!\000!\000\000\000!\000!\000!\000!\000!\000!\000!\0212\000\000\000\000\000!\000\000\000\000\000!\011\165\000\000\000\000\000!\000!\000!\000!\002n\000!\000\000\000\000\000\000\000\000\000\000\005\206\000\000\000\000\000\000\000!\000\000\002v\000\000\000\000\000\000\002z\011\145\000!\000!\000!\000!\000!\000\000\000!\000\000\021^\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\000\000!\0192\000\029\000\029\000\000\000\000\019\174\000\000\000\029\000\000\000\029\000\029\000\029\000\000\000!\000!\021\138\000\029\000\000\000!\000!\000!\0065\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\029\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\029\000\000\000\000\004ub\226\t:\000\000\000\000\000\000\001n\000\000\000\000\nf\000\000\000\000\000\000\nj\nn\nz\n\138\000\000\007\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\174\n\198\n\230\n\250\007\194\011\133\006.\000\000\000\000\000\000\011\133\000\000\011\133\011\133\000\000\n\130\000\000\n\134\000\000\000\000\000\000\000\000\011\133\000\000\011\133\011\133\011\133\000\000\011\133\011\133\000\000\007\198\n\150\000\000\000\000\000\000\011\014\003\014\011r\000\000\000\000\011\133\000\000\000\000\006y\006y\000\000\011\133\011\133\000\000\000\000\011\133\000\000\000\000\000\000\011\133\011\133\000\000\011\133\000\000\000\000\011\133\000\000\006y\000\000\006y\011\133\011\133\011\133\000\000\000\000\000\000\000\000\006y\000\000\011\133\011\133\000\000\000\000\000\000\000\000\000\000\011\133\000\000\000\000\000\000\011\133\006y\006y\000\000\011\133\000\000\000\000\006y\000\000\006y\006y\006y\000\000\011\133\011\133\011\133\006y\011\133\011\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\133\000\000\011\133\011\133\006y\000\000\002\202\011\133\000\000\002\030\002\"\000\000\011\133\000\000\000\000\000\000\011\133\t\213\011\133\011\133\t\213\t\213\000\000\000\000\000\000\t\213\000\000\t\213\002&\000\000\t\213\000\000\000\000\000\000\t\213\t\213\000\000\t\213\t\213\000\000\000\000\t\213\000\000\000\000\000\000\002\234\t\213\006y\000\000\t\213\000\000\000\000\002F\002\206\000\000\000\000\000\000\t\213\002\210\t\213\001n\002\230\002\242\t\213\t\213\000\000\000\000\002\254\000\000\004\254\000\000\t\213\000\000\000\000\t\213\000\000\000\000\t\213\t\213\000\000\t\213\000\000\t\213\t\213\003\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\213\000\000\000\000\t\213\000\000\000\000\000\000\000\000\000\000\bE\000\000\000\000\000\000\t\213\bE\t\213\002\"\bE\t\213\000\000\t\213\000\000\000\000\000\000\000\000\000\000\bE\007\222\bE\bE\bE\000\000\bE\bE\t\213\t\213\000\000\t\213\t\213\000\000\t\213\000\000\t\213\000\000\t\213\bE\t\213\000\000\t\213\000\000\000\000\bE\bE\000\000\000\000\bE\000\000\000\000\000\000\002\206\bE\000\000\bE\000\000\000\000\bE\000\000\000\000\000\000\000\000\bE\bE\bE\000\000\000\000\000\000\000\000\000\000\000\000\bE\bE\000\000\000\000\000\000\000\000\000\000\bE\000\000\000\000\000\000\003R\000\000\000\000\000\000\bE\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bE\bE\bE\000\000\bE\bE\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bE\000\000\bE\bE\000\000\000\000\011i\bE\000\000\000\000\000\000\011i\bE\002\"\011i\000\000\bE\000\000\bE\bE\000\000\000\000\000\000\003r\000\000\011i\011i\011i\000\000\011i\011i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011i\000\000\000\000\002\030\002\"\000\000\011i\011i\000\000\000\000\011i\000\000\000\000\000\000\002\206\011i\000\000\011i\002\194\000\000\011i\000\000\002&\000\000\0026\011i\011i\011i\000\000\000\000\000\000\000\000\002B\000\000\011i\011i\000\000\000\000\000\000\002J\000\000\011i\000\000\000\000\000\000\003R\002F\002\198\000\000\011i\000\000\000\000\002\210\000\000\001n\002\230\002\242\000\000\011i\011i\011i\002\254\011i\011i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011i\000\000\011i\011i\003\002\000\000\bI\011i\000\000\000\000\000\000\bI\011i\002\"\bI\000\000\011i\000\000\011i\011i\000\000\000\000\000\000\bI\000\000\bI\bI\bI\000\000\bI\bI\000\000\000\000\000\000\000\000\006\222\001\002\000\000\004j\000\000\001\030\000\000\bI\000\000\000\000\001\"\000\000\003\014\bI\bI\005\249\000\000\bI\000\000\000\000\000\000\002\206\bI\000\000\bI\000\000\006\226\bI\000\000\000\000\000\000\000\000\bI\bI\bI\000\000\000\000\000\000\000\000\006\238\000\000\bI\bI\006\250\001j\000\000\000\000\000\000\bI\000\000\000\000\001n\003R\000\000\007r\000\000\bI\000\000\007v\000\000\007z\007\170\000\000\007\182\000\000\bI\bI\bI\000\000\bI\bI\000\000\000\000\000\000\000\000\007\186\000\000\000\000\000\000\000\000\000\000\bI\000\000\bI\bI\007\194\011m\006.\bI\007\254\000\000\011m\000\000\bI\011m\000\000\000\000\bI\000\000\bI\bI\000\000\000\000\003&\000\000\011m\011m\011m\000\000\011m\011m\000\000\007\198\000\000\b\162\006\222\001\002\000\000\003\014\000\000\001\030\000\000\011m\000\000\000\000\001\"\000\000\000\000\011m\011m\007\250\000\000\011m\000\000\000\000\000\000\000\000\011m\000\000\011m\000\000\006\226\011m\000\000\000\000\000\000\000\000\011m\011m\011m\000\000\000\000\000\000\000\000\006\238\000\000\011m\011m\006\250\001j\000\000\000\000\000\000\011m\000\000\000\000\001n\011m\000\000\007r\000\000\011m\000\000\007v\000\000\007z\007\170\000\000\007\182\000\000\011m\011m\011m\000\000\011m\011m\003\017\000\000\000\000\000\000\007\186\003\017\000\000\000\000\003\017\000\000\011m\000\000\011m\011m\007\194\000\000\006.\011m\007\254\003\017\003\017\003\017\011m\003\017\003\017\000\000\011m\000\000\011m\011m\000\000\000\000\000\000\000\000\000\000\000\000\003\017\000\000\006>\006u\006u\007\198\003\017\003\030\000\000\n\186\003\017\003\014\000\000\000\000\000\000\003\017\000\000\003\017\000\000\000\000\003\017\000\000\006u\000\000\006u\003\017\003\017\003\017\000\000\000\000\000\000\000\000\006u\000\000\003\017\003\017\000\000\000\000\000\000\000\000\000\000\003\017\000\000\000\000\000\000\003\017\006u\006u\000\000\003\017\000\000\000\000\006u\000\000\006u\006u\006u\000\000\003\017\003\017\003\017\006u\003\017\003\017\000\000\000\000\000\000\t\225\000\000\000\000\006\222\001\002\000\000\000\000\003\017\001\030\003\017\003\017\006u\000\000\001\"\003\017\000\000\000\000\t\225\t\225\003\017\t\225\t\225\000\000\003\017\000\000\003\017\003\017\000\000\000\000\006\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\225\000\000\006\238\000\000\000\000\000\000\006\250\001j\011M\000\000\000\000\011M\000\000\000\000\001n\000\000\000\000\007r\000\000\003\158\t\225\007v\011M\007z\007\170\000\000\007\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\225\000\000\000\000\007\186\011M\000\000\000\000\000\000\000\000\000\000\011M\000\000\000\000\007\194\000\000\006.\000\000\007\254\t\225\011M\t\225\011M\000\000\000\000\011M\000\000\000\000\000\000\000\000\011M\000\000\000\000\000\000\000\000\t\225\000\000\000\000\t\225\t\225\000\000\007\198\000\000\t\225\000\000\t\225\011M\003\014\t\221\t\225\011M\006\222\001\002\000\000\000\000\000\000\001\030\000\000\b\178\000\000\000\000\001\"\000\000\011M\011M\t\221\t\221\011M\t\221\t\221\000\000\000\000\b\210\000\000\000\000\027>\000\000\006\226\000\000\000\000\b\234\000\000\000\000\000\000\000\000\000\000\011M\000\000\t\221\000\000\006\238\000\000\000\000\000\000\006\250\001j\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\000\000\007r\000\000\000\000\t\221\007v\000\000\007z\007\170\t.\007\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\221\000\000\000\000\007\186\000\000\006\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\194\000\000\006.\000\000\007\254\t\221\000\000\t\221\000\000\006\253\006\253\000\000\006\253\006\253\000\000\000\000\000\000\000\000\001\189\000\000\000\000\t\221\000\000\001\189\t\221\t\221\001\189\007\198\000\000\t\221\000\000\t\221\006\253\003\014\000\000\t\221\000\000\001\189\001\189\001\189\000\000\001\189\001\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\253\000\000\001\189\000\000\000\000\000\000\000\000\000\000\001\189\001\189\000\000\000\000\001\189\000\000\000\000\006\253\000\000\001\189\000\000\001\189\000\000\000\000\001\189\000\000\000\000\000\000\000\000\001\189\001\189\001\189\000\000\000\000\000\000\006\253\000\000\006\253\001\189\001\189\000\000\000\000\000\000\000\000\000\000\001\189\000\000\000\000\000\000\001\189\000\000\b\022\000\000\001\189\006\253\006\253\000\000\000\000\000\000\006\253\000\000\006\253\001\189\001\189\001\189\006\253\001\189\001\189\000\000\000\000\000\000\000\000\006\222\001\002\000\000\000\000\000\000\001\030\001\189\b\178\001\189\001\189\001\"\000\000\000\000\001\189\000\000\000\000\000\000\000\000\001\189\000\000\000\000\b\210\003\182\000\000\001\189\000\000\006\226\000\000\000\000\b\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\238\006\222\001\002\000\000\t\022\001j\001\030\000\000\b\178\000\000\000\000\001\"\001n\000\000\000\000\007r\000\000\000\000\t\185\007v\000\000\007z\b\210\t.\007\182\000\000\000\000\006\226\000\000\000\000\b\234\000\000\000\000\000\000\000\000\000\000\007\186\000\000\000\000\000\000\006\238\000\000\000\000\000\000\t\022\001j\007\194\000\000\006.\000\000\000\000\t6\001n\000\000\000\000\007r\000\000\000\000\t\185\007v\000\000\007z\000\000\t.\007\182\000\000\000\000\t\185\015\"\000\000\t\185\017^\000\000\007\198\000\000\000\000\007\186\t\185\000\000\003\014\000\000\t\185\0059\000\000\000\000\000\000\007\194\0059\006.\000\000\0059\t6\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0059\000\000\0059\000\000\0059\000\000\t\185\000\000\000\000\t\185\t\185\000\000\007\198\000\000\000\000\000\000\t\185\0059\003\014\000\000\t\185\000\000\000\000\0059\0059\000\000\000\000\000\000\000\000\000\000\0059\000\000\0059\000\000\0059\000\000\000\000\0059\000\000\000\000\000\000\000\000\0059\0059\0059\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0059\0059\000\000\000\000\0059\005-\000\000\000\000\000\000\000\000\005-\000\000\000\000\005-\000\000\000\000\000\000\0059\0059\0059\000\000\0059\0059\000\000\005-\000\000\005-\000\000\005-\t\206\000\000\000\000\000\000\000\000\000\000\000\000\0059\000\000\000\000\0059\0059\005-\000\000\000\000\000\000\000\000\000\000\005-\005-\000\000\000\000\0059\000\000\000\000\nbbt\000\000\000\000\000\000\000\000\012\t\000\000\000\000\012\t\000\000\000\000\000\000\007\209\007\209\007\209\000\000\007\209\007\209\000\000\012\t\000\000\012\t\000\000\012\t\000\000\000\000\000\000\000\000\007\209\000\000\000\000\007\209\000\000\000\000\000\000\007\209\012\t\000\000\000\000\000\000\000\000\000\000\012\t\012\t\003\182\000\000\007\209\000\000\000\000\003.\000\000\012\t\000\000\012\t\000\000\000\000\012\t\000\000\000\000\000\000\000\000\012\t\012\t\012\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\t\000\000\000\000\000\000\012\t\012\r\000\000\000\000\000\000\000\000\012\r\000\000\000\000\012\r\000\000\000\000\000\000\012\t\012\t\012\t\000\000\012\t\012\t\000\000\012\r\000\000\012\r\000\000\012\r\003:\000\000\000\000\000\000\000\000\000\000\000\000\012\t\000\000\000\000\000\000\012\t\012\r\000\000\000\000\000\000\000\000\000\000\012\r\012\r\000\000\000\000\012\t\000\000\000\000\003.\000\000\012\r\000\000\012\r\000\000\000\000\012\r\000\000\000\000\000\000\000\000\012\r\012\r\012\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\r\000\000\000\000\000\000\012\r\003]\000\000\000\000\000\000\000\000\003]\000\000\000\000\003]\000\000\000\000\000\000\012\r\012\r\012\r\000\000\012\r\012\r\000\000\003]\000\000\003]\000\000\003]\003:\000\000\000\000\000\000\000\000\000\000\000\000\012\r\000\000\000\000\000\000\012\r\003]\000\000\000\000\000\000\000\000\000\000\003]\003]\000\000\000\000\012\r\000\000\000\000\005\005\000\000\003]\000\000\003]\000\000\000\000\003]\000\000\000\000\000\000\000\000\003]\003]\003]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001v\000\000\000\149\002bv\000\217\000\000\005\194\000\000\000\217\004Q\004Q\000\000\000\000\004Q\000\000\000\157\000\000\027rvq\000\000\000\000\001q\000\000\000\000\000\000\000\000\000\000\001\202\0041\000\000\000\000\0041\001q\000\000\001\206\000\000\001q\000\000\000\000\000\000\000\000\000\000\0041\000\000\000\000\001\246\0041\000\000\000\000\001q\001q\000\000\001\250\000\000\001\254\001q\000\000\000\000\002\002\0041\002\006\002\n\005\001\000\000\001q\0041\001q\000\000\000\000\001q\000\000\000\000\000\000\000\000\001q\001q\001q\000\000\000\000\0041\000\000\000\000\000\000\000\000\0041\000\000\000\000\000\000\000\000\000\000\001q\000\000\000\000\000\000\001q\000\000\000\000\000\000\000\000\000\000\0041\000\000\001\169\000\000\002\"\001\169\000\000\001q\001q\000\000\000\000\001q\001q\000\000\b-\000\000\001\169\0041\0041\005\001\001\169\0041\0041\001q\000\000\000\000\000\000\000\000\000\000\001q\001q\000\000\000\000\001\169\000\000\001q\000\000\000\000\000\000\001\169\0041\001qbU\rb\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\012\001\012\001\012\001\000\000\012\001\012\001\000\000\000\000\000\000\012n\012v\000\000\000\000\000\000\000\000\000\000\005\226\000\000\000\000\012\001\012~\000\000\000\000\012\001\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\012\001\000\000\000\000\012\014\012N\012\134\012\142\012\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016b\012\166\000\000\000\000\000\000\000\000\012\006\000\000\000\000\006\157\rv\000\000\012\174\006\157\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\000\000\000\000\000\000\012\206\017\202\012\214\012\150\017\214\012n\012v\005U\bU\012\182\000\000\000\000\005U\000\000\000\000\005U\012~\012\190\012\198\000\000\000\000\000\000\000\000\000\000\000\238\000\000\005U\000\000\005U\000\000\005U\000\000\000\000\012\014\012N\012\134\012\142\012\158\000\000\000\000\000\000\000\000\000\000\005U\006\157\000\000\012\166\000\000\000\000\005U\005U\000\000\000\000\000\000\000\000\000\000\nb\178\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003=\003=\b\210\000\000\003=\003=\000\000\006\226\000\000\000\000\b\234\000\000\000\000\000\000\000\000\000\000\003=\000\000\000\000\000\000\006\238\002\217\002\217\003=\t\022\001j\002\217\000\000\003=\000\000\000\000\002\217\001n\000\000\003=\007r\000\000\002\217\000\000\007v\000\000\007z\000\000\t.\007\182\000\000\000\000\002\217\000\n\000\000\000\000\t>\000\000\000\000\000\000\000\000\007\186\016\186\000\000\000\000\002\217\000\000\000\000\000\000\002\217\002\217\007\194\000\000\006.\000\000\000\000\t6\002\217\000\000\000\000\002\217\000\000\000\000\002\217\002\217\000\000\002\217\002\217\000\000\002\217\000\000\000\000\000\000\015\"\000\000\000\000\015*\t\146\007\198\000\000\000\000\002\217\005Q\000\000\003\014\005Q\000\000\000\000\000\000\000\000\000\000\002\217\000\000\002\217\000\000\016\246\005Q\000\000\005Q\000\000\005Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\002\"\017b\000\000\000\000\005Q\000\000\000\000\000\000\000\000\002\217\005Q\t\234\000\000\000\000\000\000\002\217\000\000\005i\002\222\005Q\0026\005Q\005i\000\000\005Q\005i\000\000\000\000\002B\005Q\005Q\000\238\000\000\000\000\000\000\000\000\005i\000\000\005i\000\000\005i\000\000\002F\002\198\000\000\005Q\000\000\000\000\002\210\005Q\001n\002\230\002\242\005i\000\000\000\000\000\000\002\254\000\000\005i\005i\000\000\005Q\005Q\005Q\000\000\005Q\005Q\005i\000\000\005i\000\000\000\000\005i\003\002\000\000\000\000\000\000\005i\005i\005i\005Q\000\000\000\000\000\000\005Q\000\000\000\000\000\000\000\000\000\000\000\000\004Q\000\000\005i\004Q\005Q\000\000\005i\t\146\000\000\000\000\000\000\000\000\005e\000\000\004Q\005e\000\000\000\000\004Q\005i\005i\005i\000\000\005i\005i\000\000\005e\000\000\005e\000\000\005e\004Q\000\000\000\000\000\000\000\000\000\000\004Q\005i\000\000\000\000\000\000\005i\005e\000\000\000\000\004Q\000\000\004Q\005e\t\234\004Q\000\000\t\226\000\000\000\000\004Q\005\186\005e\000\000\005e\000\000\000\000\005e\000\000\000\000\000\000\000\000\005e\005e\000\238\000\000\004Q\004Q\000\000\000\000\004Q\001v\002\030\002\"\002b\000\000\000\000\000\000\005e\000\000\000\000\000\000\005e\004Q\004Q\020&\000\000\004Q\004Q\004Y\000\000\002&\000\000\0026\000\000\005e\005e\005e\000\000\005e\005e\002B\020*\000\000\000\000\000\000\004Q\000\000\020R\000\000\000\000\006\014\000\000\000\000\005e\002F\002\198\004Q\005e\000\000\000\000\002\210\0192\001n\002\230\002\242\000\000\019\174\001-\005e\002\254\001-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001-\020\198\001-\000\000\001-\003\002\000\000\000\000\007\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001-\019\202\020\218\000\000\000\000\000\000\001-\000\000\007\t\007\t\001-\007\t\007\t\000\000\000\000\001-\000\000\001-\000\000\000\000\001-\000\000\000\000\000\000\020\234\001-\001-\000\238\000\000\000\000\000\000\007\t\000\000\000\000\000\000\001-\000\000\000\000\000\000\001)\000\000\001-\001)\000\000\000\000\001-\000\000\000\000\000\000\000\000\000\000\000\238\000\000\001)\000\000\001)\000\000\001)\001-\001-\001-\000\000\001-\001-\000\000\000\000\007\t\000\000\000\000\000\000\001)\000\000\000\000\000\000\001-\001v\001)\000\000\005\194\000\000\001)\001-\000\000\000\000\007\t\001)\007\t\001)\000\000\006\170\001)\000\000\001-\004e\000\000\001)\001)\000\238\000\000\000\000\007\t\000\000\000\000\b\030\007\t\001)\006\182\000\000\007\t\000\000\007\t\001)\019J\000\000\007\t\001)\000\000\000\000\000\000\000\000\000\000\007^\001Y\025.\011\133\001Y\0192\000\000\001)\001)\001)\019\174\001)\001)\011\133\000\000\001Y\000\000\001Y\000\000\001Y\000\000\000\000\000\000\001)\000\000\000\000\019\182\000\000\000\000\000\000\001)\000\000\001Y\000\000\000\000\000\000\000\000\000\000\001Y\011\133\000\000\001)\000\000\019\202\019\246\000\000\011\133\004e\004e\000\000\0035\000\000\001Y\0035\000\000\000\000\000\000\001Y\001Y\001Y\000\000\000\000\000\000\000\000\0035\000\000\023\142\000\000\0035\000\000\000\000\000\000\000\000\001Y\000\000\000\000\000\000\011\133\000\000\000\000\000\000\0035\004\250\000\000\000\000\000\000\000\000\0035\000\000\000\000\001Y\001Y\001Y\000\000\001Y\001Y\0035\000\000\0035\000\000\000\000\0035\000\000\000\000\000\000\000\000\0035\0035\0035\000\000\000\000\000\000\022\130\001Y\000\000\t\146\000\000\000\000\000\000\000\000\004Q\000\000\0035\004Q\001Y\000\000\0035\000\000\004Q\000\000\000\000\004Q\000\000\000\000\004Q\000\000\000\000\000\000\004Q\0035\0035\006\022\004Q\0035\0035\000\000\004Q\000\000\000\000\000\000\000\000\004Q\000\000\000\000\000\000\0035\000\000\004Q\t\234\004Q\000\000\005\030\0035\000\000\n2\004Q\004Q\0035\004Q\004Q\000\000\004Q\000\000\0035\004Q\000\000\004Q\005\186\000\238\004Q\000\000\000\000\000\000\000\000\004Q\005\186\000\000\000\000\000\000\000\000\000\000\000\000\004Q\004Q\004Q\000\000\004Q\000\000\006\222\001\002\004Q\004Q\000\000\001\030\004Q\b\178\000\000\000\000\001\"\004Q\004Q\000\000\000\000\004Q\004Q\000\000\000\000\004Q\004Q\b\210\000\000\004Q\004Q\000\000\006\226\005\226\000\000\b\234\000\000\t\206\000\000\000\000\004Q\004Q\000\000\n\226\000\000\006\238\000\000\000\000\004Q\015\186\001j\004Q\000\000\000\000\000\000\000\000\000\000\001n\000\000\004Q\007r\000\000\000\000\000\000\007v\000\000\007z\000\000\t.\007\182\000\000\012\006\000\000\000\000\000\000\r\170\000\000\r\130\r\142\000\000\000\000\007\186\000\000\000\000\012>\012V\012^\012F\012f\000\000\000\000\007\194\000\000\006.\000\000\000\000\000\000\000\000\012n\012v\000\000\000\000\000\000\000\000\000\000\000\000\012\006\000\000\000\000\012~\014.\000\000\r\190\r\210\000\000\000\000\015\202\000\238\007\198\012>\012V\012^\012F\012f\003\014\000\000\012\014\012N\012\134\012\142\012\158\000\000\000\000\012n\012v\000\000\000\000\000\000\000\000\012\166\000\000\000\000\000\000\000\000\012~\000\000\000\000\000\000\000\000\000\000\012\174\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\014\012N\012\134\012\142\012\158\012\206\000\000\012\214\012\150\000\000\000\000\000\000\000\000\012\166\012\182\000\000\000\000\000\000\012\006\000\000\000\000\000\000\012\190\012\198\012\174\014\018\000\000\000\000\000\000\000\000\000\000\012>\012V\012^\012F\012f\000\000\000\000\000\000\000\000\012\206\000\000\012\214\012\150\000\000\012n\012v\000\000\000\000\012\182\000\000\000\000\000\000\012\006\000\000\000\000\012~\012\190\012\198\014B\014V\000\000\000\000\000\000\000\238\000\000\012>\012V\012^\012F\012f\000\000\000\000\012\014\012N\012\134\012\142\012\158\000\000\012\006\012n\012v\000\000\014\134\000\000\014\146\012\166\000\000\000\000\000\000\000\000\012~\012>\012V\012^\012F\012f\012\174\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\012n\012v\012\014\012N\012\134\012\142\012\158\012\206\000\000\012\214\012\150\012~f\000\000\000\000\012\190\012\198\000\000\000\000\000\000\000\000\000\000\012n\012v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\014\012N\012\134\012\142\012\158\000\000\000\000\000\000\000\000\006\222\001\002\000\000\000\000\012\166\001\030\000\000\b\178\000\000\000\000\001\"\000\000\000\000\000\000\000\000\012\174\000\000\000\000\000\000\000\000\000\000\b\210\000\000\000\000\000\000\000\000\006\226\000\000\000\000\b\234\000\000\012\206\000\000\012\214\012\150\000\000\000\000\000\000\000\000\006\238\012\182\000\000\000\000\t\022\001j\006\222\001\002\000\000\012\190\012\198\001\030\001n\b\178\000\000\007r\001\"\000\000\000\000\007v\000\000\007z\000\000\t.\007\182\000\000\000\000\b\210\000\000\000\000\000\000\000\000\006\226\000\000\000\000\b\234\007\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\238\007\194\000\000\006.\t\022\001j\t6\000\000\000\000\000\000\000\000\000\000\001n\000\000\000\000\007r\000\000\000\000\000\000\007v\000\000\007z\000\000\t.\007\182\000\000\018\150\001]\007\198\011\137\001]\000\000\000\000\000\000\003\014\000\000\007\186\000\000\000\000\011\137\000\000\001]\000\000\001]\000\000\001]\007\194\000\000\006.\000\000\000\000\t6\000\000\000\000\000\000\000\000\000\000\000\000\001]\000\000\000\000\000\000\000\000\000\000\001]\011\137\000\000\000\000\000\000\000\000\000\000\019\006\011\137\007\198\000\000\000\000\000\000\000\000\001]\003\014\000\000\000\000\000\000\001]\001]\001]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\029\000\000\000}\001\029\001]\000\000\000\000\000\000\011\137\000\000\000\000\000\000\000}\000\000\001\029\000\000\001\029\000\000\001\029\000\000\000\000\001]\001]\001]\000\000\001]\001]\000\000\000\000\000\000\000\000\001\029\000\000\000\000\000\000\000\000\004\025\001\029\000}\004\025\000\000\000\000\000\000\000\000\001]\000}\000\000\000\000\000\000\000\000\004\025\001\029\000\000\000\000\004\025\001]\001\029\001\029\001\029\006\222\001\002\000\000\000\000\000\000\001\030\000\000\b\178\004\025\000\000\001\"\000\000\000\000\001\029\004\025\000\000\000\000\000}\000\000\000\000\000\000\b\210\000\000\000\000\000\000\000\000\006\226\000\000\004\025\b\234\001\029\001\029\001\029\004\025\001\029\001\029\000\000\024\"\000\000\006\238\000\000\000\000\000\000\006\250\001j\000\000\000\000\000\000\000\000\004\025\000\000\001n\000\000\001\029\007r\000\000\000\000\000\000\007v\000\000\007z\000\000\t.\007\182\001\029\000\000\004\025\004\025\000\000\000\000\004\025\004\025\001\002\000\000\000\000\007\186\001\030\000\000\000\000\000\000\000\000\001\"\000\000\000\000\000\000\007\194\005\245\006.\000\000\004\025\023\166\001&\000\000\000\000\001*\000\000\000\000\000\000\000\000\000\000\022\210\000\000\000\000\000\000\000\000\001.\000\000\000\000\000\000\000\000\024\226\000\000\007\198\000\000\001Z\001j\000\000\000\000\003\014\000\000\000\000\0009\001n\0009\000\000\nf\000\000\000\000\000\000\nj\nn\nz\000\000\0009\007\182\000\000\0009\000\000\000\000\000\000\0009\007\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\194\000\000\006.\0009\000\000\000\000\0009\000\000\000\000\000\000\0009\n\130\000\000\n\134\000\000\000\000\0009\000\000\000\000\000\000\000\000\0009\0009\0009\000\000\000\000\0035\007\198\nr\000\000\0035\0035\000\000\002\217\000\nj\000\000\000\000\000\000\000\000\002\217\000\000\001n\000\000\002\217\nf\002\217\000\000\000\000\nj\nn\nz\000\000\000\000\007\182\000\000\0049\0049\000\000\000\000\000\000\0049\000\000\000\000\000\000\000\000\0049\000\000\000\000\000\000\000\000\000\000\0049\000\000\000\000\000\000\007\194\000\000\006.\000\000\000\000\000\000\0049\023\218\000\000\000\000\023\242\n\130\000\000\n\134\000\000\000\000\000\000\000\000\000\000\0049\000\000\000\000\000\000\0049\0049\000\000\000\000\007\198\n\150\000\000\000\000\0049\011\014\003\014\0049\000\000\000\000\000\238\0049\005\173\0049\0049\005\173\0049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\173\000\000\0049\000\000\005\173\000\000\000\000\000\000\000\000\000\000\011}\000\000\0049\011}\0049\000\000\000\000\005\173\000\000\000\000\000\000\000\000\000\000\005\173\011}\000\000\000\000\000\000\011}\000\000\000\000\000\000\005\173\000\000\005\173\011\133\000\000\005\173\000\000\0049\000\000\011}\005\173\005\173\000\238\0049\000\000\011}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011}\000\000\005\173\011}\000\000\011}\005\173\000\000\000\000\000\000\011}\011}\000\000\000\000\011}\000\000\000\000\000\000\011}\005\173\005\173\005z\000\000\005\173\005\173\011\133\011}\000\000\000\000\000\000\000\000\011}\000\000\000\000\000\000\005\173\000\000\011}\000\000\000\000\000\000\000\000\005\173\011}\011}\002\174\011}\011}\011}\000\000\000\000\011}\000\000\005\173\000\000\000\000\011}\011}\000\000\011}\000\000\000\000\000\000\005\174\000\000\000\000\011}\000\000\000\000\000\000\006\222\001\002\011}\000\000\000\000\001\030\011}\011}\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\000\bq\000\000\011}\011}\002\174\000\000\011}\011}\000\000\006\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011}\000\000\000\000\000\000\006\238\000\000\000\000\011}\006\250\001j\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\011}\007r\000\000\000\000\000\000\007v\000\000\007z\007\170\000\000\007\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\222\001\002\000\000\007\186\000\000\001\030\000\000\b\178\000\000\000\000\001\"\000\000\000\000\007\194\000\000\006.\000\000\007\254\000\000\000\000\000\000\b\210\000\000\000\000\000\000\000\000\006\226\000\000\000\000\b\234\000\000\000\000\000\000\000\000\000\000\005\021\000\000\000\000\005\021\006\238\007\198\000\000\bq\n\210\001j\000\000\003\014\000\000\000\000\005\021\000\000\001n\000\000\005\021\007r\000\000\000\000\000\000\007v\000\000\007z\000\000\t.\007\182\000\000\000\000\005\021\000\000\000\000\000\000\000\000\000\000\005\021\000\000\000\000\007\186\000\000\000\000\000\000\n2\000\000\005\021\000\000\005\021\000\000\007\194\005\021\006.\000\000\000\000\000\000\005\021\005\021\000\238\000\000\005\025\000\000\000\000\005\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\021\005\021\005\025\000\000\005\021\007\198\005\025\000\000\000\000\000\000\000\000\003\014\000\000\000\000\006y\006y\000\000\005\021\005\021\005\025\000\000\005\021\005\021\000\000\000\000\005\025\000\000\000\000\000\000\000\000\000\000\002\246\n2\006y\005\025\006y\005\025\000\000\000\000\005\025\005\021\000\000\000\000\006y\005\025\005\025\000\238\000\000\000\000\000\000\000\000\005\021\000\000\000\000\000\000\000\000\000\000\006y\006y\000\000\005\025\005\025\000\000\006y\005\025\006y\006y\006y\000\000\000\000\000\000\000\000\006y\011=\000\000\001\002\011=\005\025\005\025\027&\000\000\005\025\005\025\000\000\027*\000\000\000\000\011=\000\000\006y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\025\000\000\001\185\000\000\011=\001\185\000\000\000\000\000\000\000\000\011=\005\025\000\000\000\000\000\000\000\000\001\185\001\130\001j\011=\001\185\011=\000\000\000\000\011=\000\000\000\000\000\000\000\000\011=\002\234\000\000\006ytj\001\030\000\000\000\000\000\000\000\000\001\"\001n\000\000\005\177\007r\000\000\000\000\bf\007v\000\000\007z\007\170\000\000\007\182\000\000\000\000\006\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\186\000\000\000\000\000\000\006\238\000\000\000\000\000\000\006\250\001j\007\194\000\000\006.\t\146\007\254\000\000\001n\000\000\006\165\007r\000\000\006\165\000\000\007v\000\000\007z\007\170\000\000\007\182\000\000\000\000\000\000\006\165\000\000\000\000\000\000\006\165\007\198\000\000\000\000\007\186\007\145\007\145\003\014\000\000\000\000\007\145\000\000\000\000\006\165\007\194\007\145\006.\000\000\007\254\006\165\t\234\007j}\000\209\000\000\011}\000\000\000\000\000\209\000\209\000\238\000\000\000\000\000\000\000\000\000\205\011}\000\000\000\000\000\000\011}\000\000\000\000\000\000\000\209\000\000\000\205\011\133\000\209\000\000\000\000\000\000\000\000\011}\000\000\000\000\000\000\000\000\000\000\011}\000\000\000\209\000\209\000\000\000\000\000\209\000\209\000\000\000\000\000\000\000\000\000\000\000\000\011}\000\000\000\000\000\000\000\000\011}\011}\000\000\000\000\000\000\000\000\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011}\000\209\000\000\000\000\000\000\002\030\002\178\000\000\000\000\000\000\002\182\000\000\000\000\000\000\000\000\000\000\000\000\011}\011}\002\174\000\000\011}\011}\000\000\002&\000\000\0026\002\186\000\000\000\000\000\000\000\000\000\000\011}\002B\000\000\000\000\026\002\000\000\000\000\011}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\190\002\198\006\161\011}\000\000\006\161\002\210\000\000\001n\002\230\002\242\000\000\000\000\000\000\000\000\004\158\006\161\005b\000\000\000\000\006\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\165\003\002\006\161\005\165\000\000\000\000\000\000\000\000\006\161\000\000\000\000\019\230\000\000\004\222\005\165\000\000\000\000\006\161\005\165\006\161\000\000\000\000\006\161\000\000\000\000\005nn\233\000\000\001E\n\233\000\000\000\000\000\000\001E\001E\000\238\000\000\000\000\000\000\000\000\n\233\000\000\000\000\000\000\n\233\000\000\000\000\000\000\000\000\001E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\233\000\000\000\000\000\000\000\000\000\000\n\233\000\000\000\000\001E\001E\001E\000\000\001E\001E\n\233\000\000\n\233\000\000\n\237\n\233\000\000\n\237\000\000\000\000\n\233\000\000\000\000\000\000\000\000\000\000\000\000\001E\n\237\n\237\000\000\000\000\n\237\000\000\000\000\000\000\n\233\011\234\001E\000\000\n\233\000\000\000\000\n\237\000\000\n\237\000\000\n\237\000\000\000\000\000\000\n\237\000\000\n\233\n\233\000\000\000\000\n\233\n\233\000\000\n\237\000\000\n\237\000\000\000\000\n\237\n\237\000\000\000\000\000\000\n\237\000\000\000\000\000\000\000\000\n\237\n\233\n\237\000\000\000\000\n\237\000\000\000\000\000\000\000\000\n\237\n\237\012\222\000\000\000\000\n\237\002\030\002\178\000\000\000\000\000\000\002\182\000\000\000\000\000\000\000\000\n\237\011\250\n\237\n\237\n\237\000\000\n\237\n\237\000\000\002&\000\000\0026\000\000\000\000\000\000\000\000\000\000\n\237\n\237\002B\000\000\n\237\n\237\000\000\000\000\n\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\190\002\198\004)\012\222\000\000\004)\002\210\n\237\001n\002\230\002\242\000\000\000\000\000\000\000\000\004\158\004)\004\166\012\222\000\000\004)\000\000\000\000\t\146\000\000\000\000\000\000\000\000\005!\000\000\000\000\005!\003\002\004)\000\000\000\000\000\000\000\000\000\000\004)\000\000\000\000\005!\000\000\004\222\000\000\005!\000\000\004)\000\000\004)\000\000\000\000\004)\000\000\000\000\004\226\004!\004)\005!\004!\000\000\000\000\000\000\000\000\005!\tn\002\230\002\242\004\017\000\000\000\000\000\000\002\254\000\000\006\237\007\r\000\000\000\000\000\000\025\002\000\000\000\000\000\000\000\000\007\001\000\000\000\000\000\000\000\000\003\002\000\000\000\000\007\r\007\r\006\237\007\r\007\r\000\000\000\000\000\000\000\000\007\001\007\001\000\000\007\001\007\001\000\000\000\000\000\000\006\237\000\000\000\000\000\000\000\000\000\000\007\r\000\000\000\000\000\000\000\000\002\030\002\"\000\000\000\000\007\001\000\000\000\000\006\237\000\000\006\237\003\n\000\000\003\014\000\000\000\000\000\238\000\000\000\000\000\000\002&\000\000\0026\000\000\006\237\000\238\000\000\b\030\006\237\000\000\002B\007\r\006\237\021\026\006\237\000\000\000\000\000\000\006\237\000\000\007\001\000\000\000\000\000\000\002F\022~\000\000\000\000\021\150\007\r\002\210\007\r\001n\002\230\002\242\000\000\000\000\000\000\007\001\022\142\007\001\000\000\000\000\000\000\000\000\007\r\000\000\004I\b\030\007\r\004I\000\000\000\000\007\r\bJ\007\r\003\002\b\030\007\001\007\r\000\000\004I\007\001\000\000\007\001\004I\000\000\000\000\007\001\000\000\000\000\002\030\002\"\018\154\000\000\000\000\000\000\000\000\004I\000\000\000\000\000\000\000\000\000\000\004I\000\000\000\000\000\000\000\000\000\000\002\222\000\000\0026\000\000\000\000\000\000\000\000\000\000\004I\000\000\002B\000\000\000\000\004I\000\000\000\000\000\000\000\000\000\000\002\030\002\"\019\n\000\000\001v\002F\002\198\002b\000\000\000\000\004I\002\210\000\000\001n\002\230\002\242\000\000\000\000\020&\002\222\002\254\0026\004Y\000\000\000\000\000\000\000\000\004I\004I\002B\000\000\004I\004I\000\000\000\000\020*\000\000\003\002\002\030\002\"\000\000\020R\000\000\002F\002\198\000\000\000\000\000\000\000\000\002\210\004I\001n\002\230\002\242\000\000\0192\000\000\002&\002\254\000\000\019\174\023N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\002\020\198\000\000\000\000\000\000\000\000\002F\002\214\002\030\002\"\000\000\000\000\002\210\000\000\001n\002\230\002\242\000\000\019\202\020\218\000\000\002\254\004Y\004Y\002\030\002\"\000\000\002&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\002\000\000\000\000\020\234\004R\002&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002F\002\214\000\000\000\000\000\000\000\000\002\210\000\000\001n\002\230\002\242\004:\000\000\000\000\000\000\002\254\002F\002\214\000\000\000\000\000\000\000\000\002\210\000\000\001n\002\230\002\242\000\000\000\000\000\000\000\000\002\254\003\002\000\000\000\000\000\000\004\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\002\000\000\000\000\000\000\004\213\000\000\000\000\000\000\004:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004:"))
  
  and lhs =
~~}}}||||{{zzyyxxxxxwwwwvuutttsssssssrrrrrrrqqqppooonnmmmmmmmmlkkkkkkkkkjiihhgggggfeeddccccccccccccccbbaa```````````````````````````````r\r\r\r\r\012\011\011\n\n\n\t\t\t\b\b\b\b\007\007")
  
  and goto =
    ((16, "\000\025\001\031\000/\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000x\000\000\000\000\000\229\001\152\0006\000\247\001P\007\178\000\000\000\195\002&\b\000\000\145\002`\b2\000\000\000\000\000\000\003B\000~\002\130\000\139\000\000\000\000\000\000\000\000\000\000\000\000\002\228\000\000\006\210\000\000\000\000\003B\000\000\001\204\001 \000\144\004\b\002 \002(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000+D\000\000\000\000\001\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026V\002b\004Z\000\203\000\000\004n\r\150\002\178\004\170\000\004\000\000\001\004\000\000\001\250\003\236\000\000\003d\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\"\004\130\bv\000\000\000\000\027j\026V\000\000\000\000\001\230\000\000\001\b\000\000\000R\003\148\000\000\004\b\000\000,\216\004z\000\000,\2340\170\000\131\000\000-:\004l\000\000\000\000\000\000\0210\000\000\001\250\000\000\004\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\210\000i\000\000\000\000\002\214\000\000\026\206\000\000\001\210\002\132\001\210\000\000\000\000\000\000\000\000\000\0000\202\000\000\005\160\005\b\000\000\020\222\005\164\026\218\000\000\000\000\000\000\004\164\000\000\000\000\000\000\000\000\004V\000\000\000\000\000\000\000\000\000\000-~\000\000\000\000\000\000\000\000\000\000\000\000\000u\005\180\000\000\000\000\000\000\000\000\005T\000\000#6\000\000\005\172\000\000\005\206\005\246\000\000\000\000\001\210\006z\000\000\000\000\000\000\000\000\000\000\000\000\029\152\000\000\000\000\000\000\000\000\002\172\000&\000\000\000\0006(\004V\004V\000\0006\196\004V0\170\000\000\000\145\000\000\000\000\000\000\014\216\005\216\000\000\005\240\000\000\000\000\000\000\002R\000\000\000\000\000\000\000\000\0054\000\000\000\000\000\000\005^\000\020\002v\000\000\000\000\000\000\003x\001\210\000\000\001\210\001V\000\000\004\130\001\210\001\210\006\146\000\000\005\134\0054\000\000\000\000\000\000\004V\000\000\005\194\007\012\000\000\002\198\000\000\000\000\000\000\000\000\004V\000\025\000\244\003v\000\000\000\000\000\000\000\000\003\252\000\000\000\000\000\000\000\000\000\000\b\210\006\196\000\180\002\168\001n\005\242\007\024\004\028\004^\003\150\004\130\006\220\005:7\016\004V7l\004V\005N\000\000\000\000\000\000\006\232\000\000\000D\006\132\005^\002$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007&\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\194\005\134\007*\000\000\000\000\004\190\b<\007\244\005~\000\000\000\000\007\248\000\146\000?\000\000\006\000\000\000\000\000\007>\007r\007H\000\153\007\176\004\200\007\136\007\186\007t1r\000\000\000\000\000\000\000\000\000\000\000\000\000\000 z\000\000\007\164\007\216\000\000\000\000\000\000\000\201\000\000\000\000\007\238\000\011\001j\b\004\028\022\000\000\000\000\007\166\b(\t\b\007\188\b*\tZ\000\000\028\030\007\244\b4\b\198\000\000-\202.T.l\001N\000\000\000\000\000\000\000\000\000\000\000\000\b\1647\158\004V\b\2181|\bP\b@\022\216\000\000\004\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\202\000\000\000\000\000\000\000\000\tn1\148\000\000\b\128\bf1\222\000\000\000\000\000\0001\246\bZ2b\bZ\000\0002l\bZ\000\0002\130\bZ\bZ\bZ\000\0002\202\bZ3(\bZ\t\188\000\000.l\000\000\000\000\000\000\bZ.\132\000\000\000\000\000\000\bZ\000\000\001|\t&\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\b\224\000\0007\168\004V\000\000\000\000\000\000\000\000\b\244\t\130\n\024\028\174\019\246\t\166\000\000.\246\bZ7\192\004V\t\210\000\000\000\000\000\000\000\000 z\t\196\t\202\000\000\000\000\022H \b\000\000\n0\tL\tn\t\130\br\001\132\bx\001>\t\154\000\000\000\000\000\000\000\000\000\159\000w\b\140\002v\t\202\000\000\000\000\0012\000\000\001\144\000\030\004\180\002\"\011\000\000\000\000\000'\012\000\0006\184\n\194\000\000\n\128\000\000\n\140\000\000\000\000\n\146\000\000\000\000\000\000\011\132\000\000\001\208\001\144\000\000\000\000\nj\000\000\000\000\000\000\000\000\000\000\001\144\000\000\001\144\000\000\000\000\002x\000\000\000X\001j\000\000\000X\000\000\004p\001\144\000\000\000\000\000\000\000\000\000\000\000X\nn\n\238\011@\011L\n\252\028\248\000\132\000\000\004l\0296\n\150\b\154\t\230\n\194\b\174\011\142\n\214\b\228\011\192\n\216\b\248\t|/\016\bZ\011\254\n\224\t\n%\194 z\011j\000\000\012:\012x\011\028\t 3>\bZ\012\182\011 \t\"3X\bZ\012\200\016\242\000\000\000\000\000\000\000\000\000\000\012T\006\216\000\000\000\000\000\000\011H\t6\003\214\000X\006,\001\144\000\000\000\000\000\000\028\174\000\0008\000\004V\r\"\011L\t<\020l\000\000\027$\000\000\000\000\029h\029\182\001\174\000\000\000\000\000\000\000\000\030D\000\000\000\000\000\000\003\244\rb\000\000\000\000\000\000\029\246\"\132\000\000\000\000\000\000\000\000\011\"\014\002\000\000\000\000\011>\014*\000\000\011R\030\b\011R\030V\011R\000\000)\224\000\000\030\150\011R\014B\004&\014\130\000\000\000\000\030\228\011R\031\022\011R\031T\011R\031\162\011R \030\011R B\011R t\011R!\000\011R!V\011R!\198\011R!\246\011R\"\030\011R\"r\011R\"\200\011R\"\222\011R#X\011R#\176\011R#\212\011R$\002\011R$*\011R\tl/z\000\0008N\004V\014\226\000\000\011v\015b\000\0003b\bZ3\200\bZ4\004\bZ\r\002\000\000\000\000\000\000\000\0004(\bZ\006(\000\000\000\000\000\000\011R\015\160\000\000\000\000$0\011R\000\000\000\000\000\000$\232\011R\000\000%\016\011R\000\000%h\011R\000\000\000\000-\180\000\000\000\000%\186\011R\000\000%\200\011R%\248\011R\000\000&H\011R&\162\011R\000\000'\028\011R\004\220\015\242\000\000\000\000'L\011R\016\026\000\000\000\000'Z\011R'\170\011R\000\000'\218\011R\000\000\000\000(:\011R\000\000(h\011R(\152\011R\000\000(\186\011R(\200\011R\000\000(\248\011R\000\000)t\011R\000\000\004,\000\000\000\000\011R\011R\000\000*\020\011R\000\000*\026\011R\000\000\000\000\011v\016 \000\000\000\000\016r\000\000/\182\000\000\000\000\016\242\000\000\000\000\017<\000\000\000\000\000\000\011R\017~\000\000\017\144\000\000\000\000\000\000\012\204\000\000\000\000\000\210\000\000\002F\000\000\006\1648X\004V\018\030\004V8j\004V\000\000\012\130\000\000\005.\000\000\000\000\000\000\000\000\000\000\012T\000\000\000\000\011\230\000\000\000\000\017\150\000\000\018P\000\000\000\000\000\000\018h\000\000\000\000\018\246\012\n\019\b\000\000\019\014\000\000\000\000\000\000 z\012\162\000\000-x\004\146\001\210\019\180\000\000\000\0004\148\000\000\000\000\000\000\bZ\000\0008\166\004V\000\000\000\0004\238\000\000\000\000\019\228\000\000\020~\000\000\000\000\000\000\000\000/@\000\000\000\000\000\000*h\011R*\192\011R\000\000\000\000\000\000\000\000\011R\000\000\000\000\000\000\000\000\011R\000\000\r8\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tr\005b\000X\020\144\000\000\012N\t\128\000\000\000\220\006&\000X\0066\001\144\006\144\000X\000\000\020\162\000\000\006X\000\000\012V\t\148\012Z\012\152\t\152\000\000\020\210\000\000\t\172\rN/\224\006\222\000\000\000\000\000\000\021b\000\000\000\000\028F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\030\r\018\000\0008\168\004V\021\222\000\000\000\0009\002\004V\021\240\000\000\000\000\022 \000\000\000\000\bN\000\000\011R\000\000!h\000\000\000\000*p\000\000\011R\000\000\007\030\001\144\000\000\0076\001\144\000\000\b8\001\144\000\000\000X\001\144\000\000\bZ\000\0009\012\004V\000\000\004\142\000\194\t\174\r\026\000\000\r\196\022~\000\000\000\000\022\176\000\000\b\154\000\000\000T\000\000\000\000\000\000\000\000\000\000\000\0009P\004V\000\000\r\198\023>\000\000\000\000\023\144\000\000\005L\t\214\rr\000\0005\0005T\r<\000\0009b\004V\023\150\000\000\000\0009\138\004V\000\000\023\184\000\000\004V\000\000\tD\000\000\003\194\000\000\000\000\000\000\000\000\000\000\000\0005z\000\000\000\0005\2446:\r@\000\0009\178\004V\024\016\000\000\000\000\024\228\000\000\000\000\006r\002X44\bZ\024\246\000\000\012\192\012\194\t\230\012\238\r~\b\156\001\144\tN\000\000\t\254\000\000\006\168\t\130\000\000\000\000\b\174\t\208\r,\n\028\000\000\b\192\t\228\rL\000\000\000\000\006\252\002\166\r\024\n0\006\248\000X\000\000\r&\n6\014^\000\0009\216\004V\r\192\r\198\000\000\n@\000\000\rD\n@\r8\rb\006\212\nJ\nf\000\000\nf\n\154\000\000\006Z4\148\rL\rV\n~\r\198\n\162\000\000\n\166\r\202\n\248\000\000\rf\n\208\000\000\001\254\r\216\n\254\000\000\r\218\011F\000\000\t\242\001\144\011`\000\000\006\012\000\000\000\000\000\000\n$\001\144\r\190\n\230\000\000\000\000\nB\006\218\r\200\000\000\000\000\r\128\n\234\n\224\006\240\000\000\r\130\n\254\rx\rb\r\140\r\144\0110\014\208\000\000\r\162\003\b\000\000\000\000\000\000\000\000\000\129\0118\r\1309\242\004V\000\000\003\168\011<\014*\000\000\000\000\000\000\000\000\000\000\000\000:\022\007\178\000\000\011H\014r\000\000\000\000\000\000\000\000\000\000\000\0006<\011\220\000\000\011\134\000\154\000\000\000\000\011\142\011\166\014$\000\000\001\166\007L\000\000\000\006\000\000\000\000\000\000\000\000:@\004V\004V\000\000\000\000\007\230\000\000\014&\000\000\003(\007\230\007\230\000\000\011\176\n\194\004V:z\004V\011\230\000\000\000\000\000\000\011\252\000\000\000\000\005.\000\000\007\242\014\004\011\178\014\250\r\204\000\000\000\000\004\n\b&\014\020\000\000\000\000\011\182\015\b\r\218\000\000\000\000\002\234\000\000\003\240\000\000\023P$\202\004V\000\000*\234\0050\000\0001 \000\000\000\000\000\000\000\000\000\000\007\230\000\000\000\000\012\012\014\026\011\186\015\016\r\226\000\000\000\000:\140\0120\014&\000\000\000\000\000\0004\222\000\000\000\000\000\000\000\000\000\000\000\000\0126\000\000\0142\011\204\005p\000\000\015\b\014\190\012l\014<\000\000\000\000\014@\011\240\005\204\000\000\000\000\024&\014\198\012t\014H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004V\r\248\011\244\0154\014\012\000\0005\210\000\207\011\250\r\228\005\154\012&\025\024\012\180\000\000\012:\012D\005\030\0062\012P\007\136\012T\014\2120\028\012\192\000\000\012d\012r\014|\000\000\007B\015F\000\000\007\002\000\000\012x/&66\007\202\r\218\t.\000\000\004\030\004,\000\000\002\014\000\000\000\000\002\014\000\000\000\000\002\014\014\134\000\000\tr\002\014\014\2280\134\012\252\000\000\002\014\000\000:\204\000\000\000\000\002\014\000\000\000\000\012\254\000\000\nv\t&\r\002\000\000\012\170)B\r0\000\000\000\000\000\000\r:\000\000\000\000\007P\000\000\002\014:\218\000\000\n\234\002\0146\172\000\000\r^\014f\012\190\015^\0144\000\0007\020\r\150\014x\000\000\000\000\000\000+H\tL\000\000\000\000\000\000\000\000\000\000\011\"\000\000\011>\r\166\000\000\014\134\000\000\000\000\000\000\000\000\r\178+\160\000\000\000\000\000\000\011\"\000\000\011>\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\012\214\007$\007j\000\000\r\182+\170\000\000\000\000\000\000\000\000\000\000\000\000\015\004\003\000\002\222\000\000\000\000\000\000\000\000\005\142\b<\025t\015\022\r\216\000\000\000\000\015\012\007\132\004,\000\000\000\000\000\000\001\144\000\000\bd\000\000\000\000\000\000\000\000\014L\012\222\007b\000X\000\000\0114\001\144\000\000\015p\000\000\000\000\000\000\000\000,\146\000\000\000\000,\160\000\000\025\132\000\000\025\210\000\000\000\000\0260\000\000\000\000\000\000\000\000\026\136\000\000\026\144\000\000\000\000\000\000\000\000\000\000\005\150\000\000\000\000\000\0006b\000\000\004V\000\000\007r\000\000\000\000\000\0000\166\bZ\000\000\000\000\003\144\014t\000\140\000\000\000\000\000\000\000\000\000\000\000\000\012T\000\000\000\000\000\000\000\000,\220\000\000\r\222\000\000\000\000\000\000\000\000\003\222\005\022\005p\027\016\000\000\000\000\r\244\027\128\000\000\000\000\000\000\r\248\027\240\000\000\000\000\000\000\000\000"), (16, "\006J\001\002\002\197\002\198\002c\002c\006\140\004}\002\139\000P\0007\000\160\002~\002~\000\169\006\175\002\229\006K\006\180\000\160\006M\006\127\001\160\002w\002\230\000;\002c\001}\002\135\006N\006\\\000\198\001,\006j\002~\006\n\002\150\002\243\006w\006J\001}\002\197\002\198\000P\001\005\000?\002c\000P\002\133\005o\002\130\002\130\004\150\001O\002~\002\229\006K\006[\006O\006M\000P\001C\000\198\002\230\006\012\000\199\002\131\002\131\006N\006\\\002x\000C\002\130\0013\0015\0017\002\243\000U\006\r\002\139\002\197\002\198\001\149\006\015\006\206\002\198\006P\0068\002\131\000\201\002\245\002\151\002\130\0007\006Q\001\170\000F\006O\001\148\001\006\002\201\006\173\003\197\005v\004|\006a\002\253\002\150\002\131\003\212\004\143\001\150\006b\001\011\005w\001}\005o\000T\005\142\002\197\002\198\000\194\001\151\000\203\001\150\006P\000\216\006c\002\148\002\245\000\203\000P\004\027\006Q\000\214\001\151\006U\001\169\006\182\002\201\006W\003\197\001R\001S\006a\002\253\004\154\000\160\003\212\000\170\001\160\006b\006Y\000\198\000\203\002\247\006J\003\001\002\197\002\198\001j\001}\002\151\003\007\001V\002\249\006c\006Z\002\200\000:\004\242\003\213\002\229\006K\006[\006U\006M\000\211\003\215\006W\002\230\005r\006\207\001F\003\t\006N\006\\\001O\001\152\001\153\005o\006Y\000\198\002\243\002\247\006J\003\001\002\197\002\198\001\154\001\155\000\236\003\007\001G\002\249\001 \006Z\002\200\000\211\003\200\001\156\002\229\006K\006[\006O\006M\006v\003\215\006\144\002\230\002_\0049\001C\003\t\006N\006\\\004\145\001\152\001\153\002\197\002\198\000M\002\243\002\247\000\220\002\149\001\020\0007\001\154\001\155\000_\002\248\006P\002\249\005v\000\203\002\245\001\022\003\200\001\156\006Q\003\156\0009\006O\000\215\005w\002\201\006t\002c\005~\002d\006a\002\253\0007\000\198\002\139\002~\001\024\006b\004<\000\160\001}\002\247\000\165\000\198\003\157\001R\001S\002\139\001\225\002\248\006P\002\249\006c\000\203\002\245\001\228\000\134\000U\006Q\002\143\000\201\006U\002\150\001e\002\201\006W\000@\001V\000\211\006a\002\253\001\225\002\152\002\130\000\166\002\150\006b\006Y\002(\001\230\002\247\006J\003\001\002\197\002\198\002\137\002\200\002\132\003\007\002\131\002\249\006c\006Z\005o\001\017\005)\002\201\002\229\006K\006[\006U\006M\001\230\003\199\006W\002\230\002c\000\211\002|\003\t\006N\006\\\000\198\001I\002~\000\203\006Y\002\151\002\243\002\247\006J\003\001\002\197\002\198\006'\000\203\003\159\003\007\000U\002\249\002\151\006Z\001!\001L\005!\000\203\002\229\006K\006[\006O\006M\000\132\0007\006d\002\230\002_\000\141\005v\003\t\006N\006\\\002\247\002\130\000\198\001\225\001\141\000\217\002\243\005w\002\248\002}\002\249\005x\000\198\001\249\000=\005\166\006P\002\131\002\139\001,\002\245\001\225\000D\000\160\006Q\001\243\000\165\006O\000\211\000\201\002\201\006_\005#\004d\002h\006a\002\253\001,\000\211\000\201\000]\004g\006b\002\140\001\244\003\247\002\150\001\246\001\247\002\197\002\198\000G\003\200\000\203\000\220\006P\001}\006c\005B\002\245\0016\0015\0017\006Q\000\212\006z\006U\001\146\000N\002\201\006W\006\146\006\017\000\203\006a\002\253\005\168\001,\001A\0015\0017\006b\006Y\000\198\000U\002\247\006J\003\001\002\197\002\198\002a\000\148\002\132\003\007\000\203\002\249\006c\006Z\001\128\006\210\006\211\002\151\002\229\006\213\005\171\006U\006M\000\211\004\188\006W\002\230\006{\001\251\000U\003\t\006N\006\215\000V\001Z\0015\0017\006Y\001\252\002\243\002\247\006J\003\001\002\197\002\198\006\230\000U\000\154\003\007\000\222\002\249\005o\006Z\002\200\000\164\006\222\006|\002\229\006\223\000\198\006O\006M\005\162\002\201\000\211\002\230\001p\004P\001\250\003\t\006N\006\231\006}\006~\005\174\002\197\002\198\000\160\002\243\001\161\001\160\001,\002\197\002\198\004\192\005w\000\201\005\179\006P\005\176\000\220\000\203\002\245\002\r\001V\000U\006Q\003\156\0007\006O\000\220\002!\002\201\001\250\003\156\005v\000\203\006a\002\253\002\139\000\160\006\218\001u\001\160\002\197\002\198\005w\001}\002\247\000\163\005}\006\014\001b\0015\0017\005\135\002\248\006P\002\249\006c\002\148\002\245\000\198\001w\002\210\006Q\004\026\002\150\006U\001}\000\198\002\201\006W\000\185\000\188\000\211\006a\002\253\001,\006\235\005\137\000\203\003Z\000\160\006Y\002g\001\160\002\247\006J\003\001\002\197\002\198\001\166\002\200\005o\003\007\005\139\002\249\006c\006Z\002\200\001E\006k\002\201\002\229\006K\006h\006U\006M\000`\002\201\006W\002\230\003e\001\240\005\140\003\t\006N\006\\\001g\0015\0017\002\151\006Y\006\137\002\243\002\247\006J\003\001\002\197\002\198\000\191\002\200\003\159\003\007\000\211\002\249\002c\006Z\002\146\003\158\006\222\002\201\002\229\006\223\002~\006O\006M\005v\000\198\000\149\002\230\005\169\006|\000\203\003\t\006N\006\226\002\247\005w\000\152\000\220\000\203\005\150\002\243\002\247\002\248\002\149\002\249\006f\003\211\000U\006J\002\248\006P\002\249\000\201\000\160\002\245\005\204\001\160\000\197\006Q\002\130\000\203\006O\006\222\003\r\002\201\006\223\000\155\005\191\006M\006a\002\253\0063\006\133\002\247\003\136\002\131\006b\006N\000\205\000\233\001}\002\248\000\203\002\249\000\211\000\240\000\245\0065\000U\006P\001}\006c\000\211\002\245\005\192\006\184\005\193\006Q\000U\000\160\006U\005\214\001\160\002\201\006W\003\153\006O\000P\006a\002\253\001K\006\229\0066\002\139\001}\001\225\006Y\000\203\003\244\002\247\006J\003\001\002\197\002\198\000\198\005\194\005\141\003\007\000U\002\249\006c\006Z\004\181\006\n\006P\001\127\002\229\006K\004,\006U\006M\002\150\006Q\006W\002\230\001~\003\200\004\183\003\t\006N\006p\005\137\005\195\006R\002\253\006Y\006\225\002\243\002\247\001\141\003\001\005\196\006\012\005\197\000\203\005\191\003\007\005\139\002\249\001\165\006Z\000\211\001\004\001\b\000\198\006T\006\r\000\199\006O\0061\005\226\006\015\001>\001M\006U\006$\005\140\003\t\006W\000\243\000\198\000\241\005\192\005\225\005\193\001\012\002\151\000\220\0007\001}\006Y\000\201\001Q\005\199\006\186\0063\006P\005\201\005\211\000U\002\245\002\139\001\014\003\207\006Q\006Z\000\203\0010\001\016\005\222\002\201\0065\001\158\005\194\005$\006a\002\253\002\197\002\198\0012\002\197\002\198\006s\001W\005\223\002c\0044\002\212\000\216\002\150\002c\002\229\0046\002~\002\229\000P\0066\006c\002~\002\230\005\195\000U\002\230\000U\003P\006\155\006U\000U\003\180\005\196\006W\005\197\002\243\004=\002\139\002\243\000\203\0007\001n\001r\000\211\006\n\006Y\005#\000U\002\247\003\208\003\001\005\226\000U\001x\002\130\000\203\003\007\001\019\002\249\002\130\006Z\001}\0048\001}\000U\002\150\001\131\002\151\000\198\001\017\002\131\000\199\001}\006\012\005\199\002\131\004\223\003\t\005\201\005\211\002\197\002\198\000\132\001N\004<\000\132\000\236\006\r\002\245\002\139\005\222\002\245\006\015\000\211\002\229\000\201\006\031\005\227\002\201\001\141\005m\002\201\002\230\002\250\002\253\005\223\002\250\002\253\006\192\000\211\0007\002\139\002\197\002\198\004\241\002\243\005/\002\150\004J\000\220\002\151\000\246\000P\001\133\004<\002\254\002\229\0056\002\254\002c\004\206\004t\000\216\001}\002\230\001\017\006n\002~\006\136\002\150\006\169\002c\002\139\004w\001X\000U\002\148\002\243\006\194\002~\001s\002\197\002\198\002\247\000P\003\001\002\247\001\147\003\001\001\159\000\203\003\007\005\003\002\249\003\007\002\229\002\249\006\150\002\245\001}\002\150\0067\002\151\002\230\001\177\002\130\002\197\002\198\002\201\006\162\006\n\002}\003\t\002\250\002\253\003\t\002\243\002\130\006o\001\163\002\229\002\131\002}\001\164\002\151\001}\006\005\0063\002\230\004\237\002\245\001}\001\168\002\131\006\159\002\254\000U\000\236\006l\006\012\002\201\002\243\000U\0065\000\211\002\250\002\253\000\198\005u\000U\000\199\000U\000P\006\r\005W\002\151\001\179\001}\006\015\006}\006~\001\182\006\022\002\247\001\176\003\001\000U\002\254\0066\002\245\000\220\003\007\000\246\002\249\000\201\001\181\001\195\001}\006\n\002\201\005\127\001V\004\132\002\149\002\250\002\253\005\143\001\202\001}\001\194\001\209\001O\003\t\000\198\002\245\002\247\000\199\003\001\001\205\005\248\002c\001\212\004z\003\007\002\201\002\249\002\254\006\012\002~\002\250\002\253\000\216\005\151\002\197\002\198\001}\001\210\001\213\000U\000\245\000\201\006\r\001\218\000U\003\t\001]\006\015\002\229\001\237\001\217\006\019\002\254\004i\001\220\002\247\002\230\003\001\001O\000U\000\203\001\233\004n\003\007\006\143\002\249\005y\002\130\002\002\002\243\000U\002c\005y\004\217\002S\002\197\002\198\002U\000\216\002~\002\247\000U\003\001\002\131\003\t\002#\004\227\002^\003\007\002\229\002\249\004\144\001m\001\243\002\165\004\232\001\236\002\230\005y\000U\000U\001R\001S\004k\002\168\000U\000\203\000\236\002 \003\t\002\243\000U\001\244\002\003\000\211\001\246\001\247\002\130\001^\001k\002\001\001}\002\245\001V\002\n\002\024\001}\006+\002'\000\245\000U\002\171\002\201\002\131\004<\004\011\000U\002\250\002\253\000U\000\220\002\174\000\246\004<\0022\002\197\002\198\001R\001S\000U\002\180\000P\001}\000\236\0027\002\004\000U\002\005\002\176\002\254\000\211\002\188\002\193\002\245\001^\001k\000U\004\023\004U\001V\002\197\002\198\002\209\002\201\002E\002\223\004\182\006\n\002\250\002\253\002\011\004\219\002\197\002\198\002\229\000P\000\220\002\247\000\246\003\001\001\252\001}\002\230\000U\004\014\003\007\002\229\002\249\004T\0039\002\254\001}\004+\000U\002\230\002\243\006\012\004\224\002B\0041\004K\006\n\000U\002\197\002\198\002J\003\t\002\243\002I\004@\006\r\004C\004F\000U\000U\006\015\006\017\002\229\002\247\006\016\003\001\004G\004\135\002\200\000U\002\230\003\007\000U\002\249\004*\006\012\004)\002c\002\201\005 \002\r\004\228\001}\002\243\002R\002~\002Z\004\163\002\014\006\r\001\250\004\233\003\t\002\245\006\015\004\214\000U\000\198\006\026\000U\000\199\001}\002c\002\201\005(\002\245\000U\004\221\002\250\002\253\002~\002`\002\197\002\198\002m\002\201\000U\002c\000U\005.\002\250\002\253\004\230\002\130\000\201\002~\002\229\001}\000U\000U\002\254\001}\004\240\002\247\002\230\004\245\002\245\004\253\002o\002\131\005\000\002\248\002\254\002\249\004'\005\004\002\201\002\243\002\130\000U\000P\002\250\002\253\002\197\002\198\002q\005\005\000U\002\247\005\007\003\001\000\216\002s\002\130\002\131\002v\003\007\002\229\002\249\000U\002\247\005\014\003\001\002\254\001}\002\230\006\n\001}\003\007\002\131\002\249\002z\005\b\002\129\000U\004$\005\016\003\t\002\243\000\203\004\"\005\018\002\197\002\198\000U\004\030\002c\000U\0055\003\t\002\245\002\247\000U\003\001\002~\006\012\002\229\000U\000P\003\007\002\201\002\249\005\023\001}\002\230\002\250\002\253\002\197\002\198\006\r\004\021\000U\002\164\005+\006\015\0054\001}\002\243\006*\005\020\003\t\002\229\005\027\000U\006\n\0059\000\236\002\254\002c\002\230\006\153\002\245\002\130\000\211\002\167\004\015\002~\005\130\002\197\002\198\005\133\002\201\002\243\000U\002\170\002\173\002\250\002\253\002\131\002\179\005>\002\183\002\229\006\012\005H\002\247\005N\003\186\005\030\000\220\002\230\000\246\005Y\003\007\000U\002\249\004\004\006\r\002\254\001\243\002\245\005\"\006\015\002\243\002\130\000U\006<\000U\001}\002\187\002\201\002\192\003\218\001}\003\t\002\250\002\253\000U\001\244\003\247\002\131\001\246\001\247\005d\001}\002\245\002\247\005z\003\186\002\197\002\198\002\208\001}\002\222\003\007\002\201\002\249\002\254\003R\005i\002\250\002\253\000U\002\229\005\129\005\145\000U\005\155\000U\005\182\001}\002\230\003Q\001}\000U\003\t\002\245\003\238\005\203\003\006\002\197\002\198\002\254\005b\002\243\002\247\002\201\003\001\005\134\002\197\002\198\002\250\002\253\003\007\002\229\002\249\005\213\003J\005\230\005\138\001}\005\236\002\230\002\229\001}\000U\001\251\005\180\003\227\000U\002\247\002\230\003\001\002\254\003\t\002\243\001\252\003\219\003\007\003I\002\249\000U\003\194\005\239\002\243\005\188\000U\000U\005\200\000U\003\209\000U\003\222\006)\002\197\002\198\001}\002\245\005\244\003\t\000U\002\247\001}\003\001\006\027\003\248\005\249\002\201\002\229\003\007\003\233\002\249\002\250\002\253\006\023\005\208\002\230\003\241\000U\005\219\000U\005\255\003\169\000U\006\007\004\001\002\197\002\198\002\245\002\243\003\t\002\r\001}\001}\002\254\001}\004 \002\245\002\201\002!\002\229\001\250\0040\002\250\002\253\000U\004?\002\201\002\230\006.\005\191\005\241\002\250\002\253\002\241\000U\004A\005\252\001}\006B\000U\002\243\002\247\001}\003\001\002\254\000U\004B\000U\004H\003\007\006m\002\249\004Z\002\254\006\149\000U\005\192\006\138\005\193\004\136\001}\002\245\000U\004\140\004\158\000U\006\030\006(\004\164\006,\003\t\002\201\002\247\004\168\003\001\004\196\002\250\002\253\004\220\004\213\003\007\002\247\002\249\003\001\004\215\002\197\002\198\005\194\001}\003\007\000U\002\249\0060\002\245\004\218\004\235\001}\0064\002\254\002\229\000U\003\t\001}\002\201\001}\002\197\002\198\002\230\002\250\002\253\003\t\004\234\000U\002\252\005\195\006@\000U\002\197\002\198\002\229\002\243\001}\004\239\005\196\001}\005\197\002\247\002\230\003\001\004\244\002\254\002\229\004\246\003\000\003\007\001}\002\249\001}\004\252\002\230\002\243\004\251\005\226\006G\004\255\003\015\005\001\005\006\005\017\002\197\002\198\006V\002\243\005\r\005\015\003\t\005\019\006]\002\247\006q\003\001\005\022\005\026\002\229\005\029\005\199\003\007\0051\002\249\005\201\005\211\002\230\0050\002\245\0053\0058\006\132\003\014\005:\006\216\005\154\005\222\005=\002\201\002\243\005@\005D\003\t\002\250\002\253\006\227\005L\006\232\002\245\005S\005^\005\223\002\197\002\198\000\198\005j\005{\000\199\002\201\005\153\002\245\005\146\005\147\002\250\002\253\002\254\002\229\005\152\005\156\005\157\002\201\005\190\005\183\005\184\002\230\002\250\002\253\005\189\005\210\005\206\003>\000\201\005\207\005\209\005\221\002\254\005\218\002\243\005\220\005\229\005\231\001\006\002\245\002\247\005\232\003\001\005\237\002\254\005\250\006\000\006\018\003\007\002\201\002\249\006\024\001/\006\028\002\250\002\253\000\198\006I\006C\000\199\002\247\006D\003\001\002\197\002\198\000\216\006H\006X\003\007\003\t\002\249\006y\002\247\006\131\003\001\006\135\002\254\002\229\006\148\006\157\003\007\006\201\002\249\000\201\000\000\002\230\000\000\002\245\006\003\003\t\000\000\003A\000\000\000\203\002\197\002\198\000\000\002\201\002\243\000\000\000\000\003\t\002\250\002\253\002\247\000\000\003\001\000\000\002\229\000\000\000\000\000\000\003\007\000\000\002\249\000\000\002\230\000\000\000\000\000\000\000\216\000\000\003U\000\000\002\254\000\000\000\000\000\000\000\000\002\243\000\000\000\000\000\000\003\t\000\000\002\197\002\198\000\000\000\000\000\000\000\236\000\000\000\000\000\000\000\000\000\000\000\000\000\211\000\203\002\229\000\000\002\245\002\247\000\000\003\001\002\197\002\198\002\230\002\197\002\198\003\007\002\201\002\249\003z\000\000\000\000\002\250\002\253\000\000\002\229\002\243\000\000\002\229\000\220\000\000\001\020\000\000\002\230\000\000\000\000\002\230\003\t\002\245\003\127\000\000\000\000\003\172\000\000\002\254\000\000\002\243\000\000\002\201\002\243\000\000\000\236\000\000\002\250\002\253\002\197\002\198\000\000\000\211\000\000\000\000\000\000\005u\000\000\000\000\000\000\000\000\000\000\000\000\002\229\000\000\000\000\002\247\000\000\003\001\002\254\000\000\002\230\000\000\002\245\003\007\000\000\002\249\003\175\000\220\000\000\000\246\000\000\000\000\002\201\002\243\000\000\000\000\000\000\002\250\002\253\000\000\000\000\000\000\002\245\000\000\003\t\002\245\002\247\000\000\003\001\000\000\000\000\000\000\002\201\000\000\003\007\002\201\002\249\002\250\002\253\002\254\002\250\002\253\002\197\002\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\000\000\000\000\000\000\002\254\000\000\000\000\002\254\000\000\002\199\000\000\002\245\002\247\000\000\003\001\000\000\000\000\000\000\000\000\000\000\003\007\002\201\002\249\000\000\002\197\002\198\002\250\002\253\000\000\000\000\000\000\000\000\002\247\000\000\003\001\002\247\000\000\003\001\002\229\000\000\003\007\003\t\002\249\003\007\000\000\002\249\002\230\000\000\002\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\184\002\197\002\198\002\243\000\000\003\t\000\000\000\000\003\t\000\000\002\197\002\198\000\000\002\197\002\198\002\229\000\000\000\000\000\000\002\200\002\247\000\000\003\001\002\230\002\229\000\000\000\000\002\229\003\007\002\201\002\249\000\000\002\230\003\188\000\000\002\230\002\243\000\000\000\000\000\000\000\000\003\223\003\191\000\000\000\000\002\243\000\000\000\000\002\243\003\tt\000\000\000\216\002\243\002\247\000\000\003\186\000\000\000\000\000\000\000\000\000\000\003\007\002\247\002\249\003\186\002\247\000\000\003\001\000\000\000\000\003\007\000\000\002\249\003\007\000\000\002\249\000\000\000\000\000\000\000\203\000\000\000\000\003\t\000\000\000\000\000\000\000\000\000\000\002\197\002\198\000\000\003\t\000\000\002\245\003\tt\002\245\000\000\000\000\002\250\002\253\000\000\000\000\002\201\000\000\002\229\002\201\003\tt\002\245\000\000\000\000\000\000\002\197\002\198\000\000\000\000\003\t\000\000\002\201\003\t\000\000\002\197\002\198\002\250\002\253\000\000\000\000\000\000\000\000\000\000\002\197\002\198\002\245\000\000\002\224\002\229\000\000\000\000\000\000\002\197\002\198\001\251\002\201\002\230\002\229\002\254\000\000\002\250\002\253\004\t\000\000\001\252\002\230\002\229\000\000\000\000\002\243\000\000\004.\000\000\000\000\002\230\000\000\002\197\002\198\002\243\000\000\004;\000\000\002\254\000\000\000\000\000\000\002\247\002\243\003\001\000\198\002\229\000\000\000\199\004P\003\007\000\000\002\249\000\000\002\230\000\000\000\000\000\000\000\000\000\000\004E\000\000\000\000\000\000\000\000\000\000\002\247\002\243\003\001\002\200\000\000\003\t\000\201\000\000\003\007\002\r\002\249\000\000\002\245\002\201\000\234\000\000\000\000\002!\000\000\001\250\000\198\002\245\002\201\000\199\000\000\000\000\000\000\002\250\002\253\003\tt\000\000\000\000\002\197\002\198\000\000\000\203\000\000\002\229\003\t\000\000\000\000\000\236\002\247\000\000\003\001\002\230\002\229\003\t\000\211\002\245\003\007\004^\002\249\000\000\002\230\000\000\002\197\002\198\002\243\002\201\004c\000\000\000\000\000\000\002\250\002\253\000\000\002\243\000\000\000\000\002\229\003\t\000\000\000\000\000\220\000\000\000\242\001\243\002\230\000\000\000\000\000\000\000\223\000\000\004f\004L\002\254\000\000\000\000\000\211\000\000\002\243\000\000\004O\000\000\000\000\001\244\003\247\000\000\001\246\001\247\000\000\000\000\002\197\002\198\000\000\000\000\000\000\000\000\000\000\000\000\002\245\000\000\000\000\002\247\000\220\003\001\002\229\000\000\000\000\002\245\002\201\003\007\000\000\002\249\002\230\002\250\002\253\002\197\002\198\002\201\004\139\000\000\000\000\000\000\002\250\002\253\000\000\002\243\000\000\000\000\000\000\002\229\003\t\002\245\000\000\000\000\000\000\002\254\001\243\002\230\000\000\000\000\000\000\002\201\000\000\004\142\002\254\000\000\002\250\002\253\000\000\000\000\002\243\001\251\000\000\000\000\000\000\001\244\001\245\000\000\001\246\001\247\000\000\001\252\000\000\002\247\000\000\003\001\000\000\000\000\002\254\000\000\000\000\003\007\002\247\002\249\003\001\000\000\000\000\000\000\002\245\000\000\003\007\000\000\002\249\000\000\000\000\000\000\002\197\002\198\002\201\000\000\004P\000\000\003\t\002\250\002\253\000\000\002\247\000\000\003\001\000\000\002\229\003\t\000\198\002\245\003\007\005\166\002\249\000\000\002\230\000\000\000\000\004R\000\000\002\201\004\157\002\254\002\r\000\000\002\250\002\253\000\000\002\243\000\000\001\251\002!\003\t\001\250\002\197\002\198\000\201\002\197\002\198\000\000\001\252\000\000\000\000\000\000\000\000\000\000\000\000\002\254\002\229\000\000\002\247\002\229\003\001\000\000\002\197\002\198\002\230\000\000\003\007\002\230\002\249\000\000\004\160\000\000\000\000\004\172\000\000\000\000\002\229\002\243\000\000\000\000\002\243\005\168\000\000\002\247\002\230\003\001\000\000\003\t\000\000\002\245\004\178\003\007\000\000\002\249\000\000\000\000\000\000\002\243\000\000\002\201\000\000\000\000\000\000\002\r\002\250\002\253\002\197\002\198\000\000\005\171\000\000\002!\003\t\001\250\000\000\000\000\000\000\000\000\000\000\000\000\002\229\000\000\000\000\000\000\000\198\000\000\002\254\000\199\002\230\000\000\002\245\000\000\000\000\002\245\004\200\000\000\000\000\000\000\000\000\000\000\002\201\002\243\000\000\002\201\000\000\002\250\002\253\000\000\002\250\002\253\002\245\000\201\000\000\000\000\002\247\000\000\003\001\000\000\000\000\000\000\002\201\000\000\003\007\005\174\002\249\002\250\002\253\002\254\001O\000\000\002\254\000\000\000\000\000\000\005w\000\000\005\178\000\000\005\176\000\000\000\000\000\000\000\000\003\t\000\000\000\000\000\000\002\254\000\216\000\220\000\000\000\000\000\000\000\000\002\245\002\247\000\000\003\001\002\247\000\000\003\001\000\000\005\217\003\007\002\201\002\249\003\007\000\000\002\249\002\250\002\253\000\000\002\197\002\198\000\000\002\247\000\203\003\001\000\000\000\000\000\000\002\197\002\198\003\007\003\t\002\249\002\229\003\t\000\000\000\000\000\000\002\254\000\000\000\000\002\230\002\229\000\000\000\000\002\197\002\198\004\203\000\000\000\000\002\230\003\t\000\000\000\000\002\243\000\000\004\210\000\000\000\000\002\229\000\000\000\000\000\000\002\243\001R\001S\002\247\002\230\003\001\000\000\000\236\000\000\000\000\005\240\003\007\000\000\002\249\000\211\000\000\000\000\002\243\001^\001k\000\000\000\000\000\000\001V\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\000\000\000\000\000\198\002\197\002\198\000\199\000\000\000\220\000\000\000\246\000\000\002\245\000\000\000\000\000\000\000\000\000\000\002\229\000\000\000\000\002\245\002\201\000\000\000\000\000\000\002\230\002\250\002\253\000\000\000\201\002\201\006\166\000\000\000\000\000\000\002\250\002\253\002\245\002\243\000\000\000\000\000\000\002\197\002\198\000\000\000\000\001O\002\201\002\254\000\000\000\000\000\000\002\250\002\253\000\000\000\000\002\229\002\254\000\000\000\000\000\000\000\000\000\000\000\000\002\230\000\000\000\216\000\000\000\000\000\000\006\168\000\000\000\000\000\000\002\254\000\000\002\247\002\243\003\001\000\000\006\130\000\000\000\000\000\000\003\007\002\247\002\249\003\001\000\000\002\197\002\198\002\245\000\000\003\007\000\203\002\249\000\000\000\000\000\000\000\000\000\000\002\201\002\247\002\229\003\001\003\t\002\250\002\253\000\000\000\000\003\007\002\230\002\249\000\000\003\t\000\198\000\000\006\171\000\199\000\000\000\000\000\000\000\000\000\000\002\243\000\000\000\000\000\000\002\254\000\000\002\245\003\t\000\000\002\197\002\198\001R\001S\002\197\002\198\000\000\002\201\000\236\000\201\000\000\001\029\002\250\002\253\002\229\000\211\000\000\000\000\002\229\001^\001k\000\000\002\230\002\247\001V\003\001\002\230\000\000\006\176\000\000\000\000\003\007\006\178\002\249\002\254\002\243\000\000\000\000\000\000\002\243\000\000\000\220\000\198\000\246\002\245\000\199\000\216\000\000\000\198\000\000\000\000\000\199\003\t\000\000\002\201\000\000\000\000\000\000\000\000\002\250\002\253\000\000\002\247\000\000\003\001\000\000\006J\000\000\000\000\000\201\003\007\000\000\002\249\000\000\000\203\000\201\000\000\000\000\002\197\002\198\006\222\002\254\000\000\006\223\000\000\000\000\006M\000\000\002\245\000\000\000\000\003\t\002\245\000\000\000\000\006N\000\000\000\000\002\201\000\000\002\226\000\000\002\201\002\250\002\253\000\000\000\216\002\250\002\253\002\247\000\000\003\001\000\216\000\000\000\000\000\000\000\000\003\007\000\000\002\249\000\198\000\236\006J\000\199\006O\002\254\000\000\000\000\000\211\002\254\000\000\000\000\001$\000\000\000\203\000\000\006\222\000\000\003\t\006\223\000\203\000\000\006M\000\000\000\000\000\000\000\000\000\201\000\000\000\000\000\000\006N\006P\002\247\000\220\003\001\000\246\002\247\000\000\003\001\006Q\003\007\000\000\002\249\001O\003\007\002\200\002\249\000\000\000\000\000\000\006R\002\253\000\000\006\224\000\000\002\201\000\000\006J\000\000\006O\000\219\003\t\000\000\000\216\000\000\003\tq\000\000\002\247\002\229\004j\000\000\003\007\000\000\002\249\002\011\003\007\002\230\002\249\000\000\002\197\002\198\000\000\004Q\000\000\001\252\000\000\000\000\002\r\000\000\002\243\000\000\000\000\003\t\002\229\000\000\002!\003\t\001\250\000\000\000\000\000\000\002\230\000\000\000\000\000\000\000\000\000\000\003\173\003\178\000\000\000\198\002\245\000\000\000\199\002\243\000\000\000\000\000\000\002\197\002\198\000\000\002\201\000\000\000\000\000\000\000\000\002\250\002\253\000\000\000\000\000\000\000\000\002\229\000\000\000\000\000\000\000\000\000\201\000\000\002\rt\002\245\002\247\000\000\004\024\000\000\002\236\002\229\000\000\000\000\003\007\002\201\002\249\000\000\000\000\002\230\002\250\002\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\198\002\247\002\243\003\161\000\000\003\t\000\000\002\245\000\000\003\007\000\000\002\249\002\254\002\229\000\000\000\000\002\245\002\201\001\026\000\000\000\000\002\230\002\250\002\253\000\000\000\211\002\201\000\000\000\000\000\000\003\t\002\250\002\253\000\000\002\243\000\000\000\000\000\000\002\197\002\198\002\247\000\000\003\160\000\000\002\254\000\000\002\200\000\000\003\007\000\000\002\249\000\220\002\229\002\254\000\000\002\245\002\201\000\000\000\000\000\000\002\230\000\000\000\000\002\197\002\198\002\201\000\000\000\000\000\000\003\t\002\250\002\253\002\247\002\243\003S\000\000\000\000\002\229\000\000\000\000\003\007\002\247\002\249\003\003\000\000\002\230\000\000\002\245\000\000\003\007\000\000\002\249\002\254\000\000\002\197\002\198\000\000\002\201\002\243\000\000\000\000\003\t\002\250\002\253\000\000\000\000\000\000\000\000\002\229\000\000\003\t\002\247\000\000\000\000\000\000\000\000\002\230\000\000\000\000\002\248\002\247\002\249\003\005\000\000\002\254\000\000\002\245\000\000\003\007\002\243\002\249\000\000\000\000\002\197\002\198\000\000\002\201\000\000\000\000\000\000\000\000\002\250\002\253\000\000\000\000\000\000\000\000\002\229\000\000\003\t\000\000\002\245\002\247\000\000\003\n\002\230\000\000\000\000\000\000\000\000\003\007\002\201\002\249\002\254\000\000\000\000\002\250\002\253\002\243\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\002\245\000\000\000\000\001\243\000\000\000\000\002\254\000\000\000\000\002\247\002\201\003\017\000\000\002\197\002\198\002\250\002\253\003\007\000\000\002\249\000\000\000\000\001\244\002M\000\000\001\246\001\247\002\229\000\000\000\000\000\000\002\197\002\198\000\000\002\247\002\230\003\019\002\254\003\t\002\245\000\000\000\000\003\007\000\000\002\249\002\229\000\000\000\000\002\243\002\201\000\000\000\000\000\000\002\230\002\250\002\253\002\197\002\198\000\000\000\000\001\243\000\000\000\000\003\t\000\000\002\247\002\243\003\021\000\000\000\000\002\229\000\000\000\000\003\007\000\000\002\249\002\254\000\000\002\230\001\244\002\003\000\000\001\246\001\247\000\000\000\000\000\000\000\000\000\000\000\000\001\251\002\243\000\000\000\000\003\t\000\000\000\000\000\000\000\000\000\000\001\252\002\245\000\000\000\000\002\247\000\000\003\023\000\000\000\000\000\000\000\000\002\201\003\007\000\000\002\249\000\000\002\250\002\253\000\000\002\245\000\000\000\000\002\004\000\000\002\005\003\252\002\197\002\198\000\000\002\201\000\000\000\000\000\000\003\t\002\250\002\253\000\000\000\000\002\254\000\000\002\229\000\132\000\000\000\000\002\245\000\000\000\000\002\011\002\230\000\000\000\000\000\000\000\000\000\000\002\201\002\r\002\254\001\252\000\000\002\250\002\253\002\243\000\000\002!\000\000\001\250\002\247\000\000\003\025\002\197\002\198\000\000\000\000\000\000\003\007\000\000\002\249\000\000\000\000\001\243\000\000\002\254\000\000\002\229\002\247\000\000\003\027\000\000\000\000\000\000\000\000\002\230\003\007\000\000\002\249\003\t\000\000\000\000\001\244\002\003\000\000\001\246\001\247\000\000\002\243\000\000\000\000\000\000\000\000\002\247\000\000\003\029\002\r\003\t\002\245\000\000\000\000\003\007\000\000\002\249\002\014\004m\001\250\000\000\002\201\002\197\002\198\000\000\000\000\002\250\002\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\tt\000\000\000\000\002\197\002\198\002\245\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\198\002\247\002\201\003!\002\229\000\000\000\000\002\250\002\253\003\007\002\r\002\249\002\230\000\000\000\000\000\000\002\245\000\000\002\014\000\000\001\250\002\246\000\000\000\000\000\000\002\243\002\201\000\000\000\000\002\254\003\t\002\250\002\253\002\197\002\198\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\198\002\201\002\229\000\000\000\000\000\000\002\250\002\253\002\254\000\000\002\230\000\000\002\247\002\229\003#\000\000\000\000\000\000\000\000\000\000\003\007\002\230\002\249\002\243\000\000\000\000\000\000\000\000\002\254\000\000\000\000\000\000\000\000\002\245\002\243\000\000\002\247\000\000\003%\000\000\000\000\003\t\002\200\002\201\003\007\000\000\002\249\000\000\002\250\002\253\000\198\000\000\002\201\000\199\000\000\000\000\002\247\000\000\003'\000\000\002\197\002\198\000\000\000\000\003\007\003\t\002\249\000\000\000\000\000\000\002\254\000\000\000\000\000\000\002\229\000\000\002\245\000\201\000\000\000\000\000\000\000\000\002\230\000\000\000\000\003\t\002\201\002\245\000\000\000\000\000\000\002\250\002\253\000\000\000\000\002\243\000\000\002\201\002\247\000\000\003)\000\000\002\250\002\253\002\197\002\198\003\007\002\247\002\249\000\000\000\000\000\000\000\000\002\254\000\216\002\248\000\000\002\249\002\229\000\000\000\000\000\000\002\197\002\198\002\254\000\000\002\230\003\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\229\000\000\000\000\002\243\000\000\002\247\000\203\003+\002\230\002\197\002\198\000\000\002\245\003\007\000\000\002\249\002\247\000\000\003-\000\000\000\000\002\243\002\201\002\229\003\007\000\000\002\249\002\250\002\253\002\197\002\198\002\230\002\197\002\198\003\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\243\003\t\002\229\000\000\000\000\002\254\000\000\002\230\000\000\000\236\002\230\000\000\002\245\000\000\000\000\000\000\000\211\000\000\000\000\000\000\002\243\000\000\002\201\002\243\000\000\000\000\000\000\002\250\002\253\000\000\002\245\000\000\000\000\002\247\000\000\003/\000\000\000\000\000\000\000\000\002\201\003\007\000\220\002\249\001\n\002\250\002\253\000\000\000\000\002\254\000\000\000\000\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\002\201\000\000\000\000\000\000\002\254\002\250\002\253\000\000\000\000\000\198\002\245\000\000\000\199\002\245\002\247\000\247\0031\002\197\002\198\000\000\002\201\000\000\003\007\002\201\002\249\002\250\002\253\002\254\002\250\002\253\000\000\002\229\002\247\000\000\0033\000\249\000\201\002\197\002\198\002\230\003\007\005m\002\249\003\t\000\000\000\000\000\000\002\254\000\000\000\000\002\254\002\229\002\243\000\000\000\000\002\247\000\000\0035\000\000\002\230\000\000\003\t\000\000\003\007\000\000\002\249\000\000\000\000\000\000\000\000\000\000\000\000\002\243\000\216\000\000\002\247\000\000\0037\002\247\000\000\003X\002\197\002\198\003\007\003\t\002\249\003\007\000\000\002\249\000\000\000\230\000\000\000\000\000\000\000\000\002\229\000\000\000\000\000\000\000\000\000\000\000\203\000\000\002\230\003\t\002\245\000\000\003\t`\002\197\002\198\000\000\000\000\000\000\003\007\003\t\002\249\000\000\000\000\000\000\000\000\000\000\002\254\002\229\000\000\000\000\002\245\000\000\000\000\000\000\001\251\002\230\000\000\002\245\000\000\003\t\002\201\000\000\000\000\000\000\001\252\002\250\002\253\002\201\002\243\000\000\000\000\000\000\002\250\002\253\002\247\000\000\003c\000\000\002\197\002\198\000\000\002\245\003\007\000\000\002\249\000\000\000\000\002\254\000\000\000\000\000\000\002\201\002\229\004\002\002\254\000\000\002\250\002\253\000\000\000\000\002\230\000\000\000\000\003\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\243\000\000\002\247\000\000\003j\002\254\002\r\000\000\002\245\002\247\003\007\003m\002\249\000\000\002!\000\000\001\250\003\007\002\201\002\249\000\000\000\000\000\000\002\250\002\253\000\198\002\197\002\198\000\199\000\000\000\000\003\t\000\000\002\247\000\000\003o\000\000\000\000\003\t\000\000\002\229\003\007\000\000\002\249\000\000\002\254\000\000\000\000\002\230\000\000\002\197\002\198\000\201\002\245\000\000\000\000\000\000\002\197\002\198\000\000\000\000\002\243\003\t\002\201\002\229\000\000\000\000\000\000\002\250\002\253\000\000\002\229\002\230\002\247\000\000\003r\000\000\000\000\000\000\002\230\000\000\003\007\000\000\002\249\000\000\002\243\000\000\000\000\000\000\000\216\002\254\000\000\002\243\000\000\000\000\000\000\000\000\002\197\002\198\000\000\000\000\000\000\003\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\229\000\000\000\000\002\245\000\000\000\000\000\203\002\247\002\230\003t\002\197\002\198\000\000\002\201\000\000\003\007\000\000\002\249\002\250\002\253\000\000\002\243\000\000\000\000\002\229\000\000\000\000\002\245\000\000\000\000\000\000\000\000\002\230\000\000\002\245\000\000\003\t\002\201\000\000\000\000\002\254\000\000\002\250\002\253\002\201\002\243\000\000\000\000\000\000\002\250\002\253\000\000\000\000\000\236\000\000\000\000\000\000\000\000\002\197\002\198\000\211\000\000\000\000\000\000\002\254\000\000\000\000\000\000\002\247\000\000\003w\002\254\002\229\000\000\002\245\000\000\003\007\000\000\002\249\000\000\002\230\002\197\002\198\000\000\002\201\000\000\000\220\000\000\002l\002\250\002\253\000\000\002\247\002\243\003}\002\229\000\000\003\t\002\245\002\247\003\007\003\130\002\249\002\230\000\000\002\197\002\198\003\007\002\201\002\249\000\000\002\254\000\000\002\250\002\253\000\000\002\243\000\000\000\000\002\229\000\000\003\t\002\197\002\198\000\000\000\000\000\000\002\230\003\t\002\197\002\198\000\000\000\000\000\000\000\000\002\254\002\229\000\000\000\000\002\247\002\243\003\132\000\000\002\229\002\230\000\000\002\245\003\007\000\000\002\249\000\000\002\230\000\000\002\197\002\198\000\000\002\201\002\243\000\000\000\000\000\000\002\250\002\253\002\247\002\243\003\135\000\000\002\229\003\t\002\245\000\000\003\007\000\000\002\249\000\000\002\230\000\000\000\000\000\000\002\201\000\000\000\000\000\000\002\254\002\250\002\253\000\000\000\000\002\243\000\000\000\000\000\000\003\t\002\245\000\000\000\000\000\000\000\198\000\000\000\000\000\199\000\000\000\000\002\201\000\000\000\000\002\254\000\000\002\250\002\253\002\245\002\247\000\000\003\139\000\000\002\197\002\198\002\245\000\000\003\007\002\201\002\249\000\000\000\000\000\201\002\250\002\253\002\201\000\000\002\229\002\254\000\000\002\250\002\253\002\247\000\000\003\142\002\230\000\000\000\000\003\t\002\245\003\007\000\000\002\249\000\000\000\000\002\254\000\000\000\000\002\243\002\201\000\000\000\000\002\254\000\000\002\250\002\253\002\247\000\000\003\144\000\216\000\000\003\t\000\000\000\000\003\007\000\000\002\249\002\197\002\198\000\000\000\000\000\000\000\000\002\247\000\000\003\147\002\254\000\000\000\000\000\000\002\247\003\007\003\149\002\249\000\000\003\t\000\000\000\203\003\007\003\b\002\249\000\000\000\000\002\197\002\198\000\000\002\197\002\198\000\000\000\000\000\000\002\245\003\t\000\000\002\247\000\000\003\152\002\229\000\000\003\t\002\229\002\201\003\007\000\000\002\249\002\230\002\250\002\253\002\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\243\000\000\000\000\002\243\000\000\003\t\000\236\002\197\002\198\000\000\002\254\000\000\001\243\000\211\000\000\000\000\000\000\005\130\000\000\000\000\006/\002\229\000\000\000\000\000\000\000\000\000\000\002\200\000\000\002\230\000\000\001\244\002\003\000\000\001\246\001\247\000\000\002\201\002\247\000\220\003\155\000\246\002\243\000\000\000\000\000\000\003\007\000\000\002\249\000\000\000\000\002\197\002\198\002\245\004p\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\229\002\201\003\tt\000\000\002\201\003\t\000\201\000\000\000\000\002\250\002\253\000\000\000\000\000\000\000\000\002\247\006J\004\017\000\000\002\r\000\000\006J\000\000\003\007\000\000\002\249\005\171\002\014\000\000\001\250\006O\002\254\000\000\006K\000\000\000\000\006M\000\000\006K\000\000\000\000\006M\000\000\000\216\003\t\006N\000\000\000\000\000\000\000\000\006N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006P\002\247\000\000\004\019\000\000\000\000\000\000\000\000\006Q\003\007\000\000\002\249\000\000\000\203\000\000\000\000\006O\000\000\000\000\006R\002\253\006O\005\174\000\000\000\000\000\000\006S\000\000\000\000\000\000\003\t\000\000\000\000\005w\000\000\005\177\000\000\005\176\000\000\000\000\000\000\006T\000\000\000\000\006P\000\000\000\000\000\000\000\220\006P\006U\000\000\006Q\000\000\006W\000\000\000\000\006Q\000\000\000\000\000\236\000\000\000\000\006R\002\253\000\000\006Y\000\211\006R\002\253\006^\006\142\000\000\000\000\000\000\006rr\000\000\000\216\000\000\002,\000\251\000\000\002\r\002\014\006T\001\250\000\000\000\000\000\000\003gr\001\244\002\003\000\211\001\246\001\247\000\000\000\244\002!\000\000\001\250\002\031\000\000\000\000\004h\000\000\000\000\000\000\000\000\000\000\002\004\000\000\002\005\002\029\000\000\000\000\000\000\000\000\000\000\000\220\002\247\000\246\002\004\000\000\002\005\002\029\000\000\000\000\002\248\001\243\002\249\002\rr\000\000\000\000\000\000\002\004\000\000\002\005\002\176\002\014\000\000\001\250\000\000\002\r\000\000\003:\002\003\002\011\001\246\001\247\000\000\002\014\000\000\001\250\000\000\002\r\002,\001\252\000\000\002\004\002\011\002\005\002\176\002\014\000\000\001\250\000\000\000\000\000\000\000\000\001\252\001\251\000\000\000\000\004\n\003:\002\003\002,\001\246\001\247\000\000\001\252\002A\000\000\002\011\000\000\000\000\003?\003K\003L\000\000\000\000\000\000\000\000\001\252\000\000\003:\002\003\004\r\001\246\001\247\000\000\000\000\000\000\000\000\000\000\000\000\002,\000\000\000\000\006\b\000\000\002\r\002\011\000\000\000\000\000\000\003?\003K\003L\002\014\000\000\001\250\001\252\000\000\002\r\003:\002\003\000\000\001\246\001\247\000\000\000\000\002\014\000\000\001\250\002\r\000\000\003?\003K\003L\000\000\000\000\002\011\002!\000\000\001\250\000\000\000\000\002\r\000\000\003O\000\000\001\252\000\000\000\000\006\021\002\014\000\000\001\250\002,\000\000\000\000\000\000\002\011\000\000\000\000\000\000\003?\003K\003L\000\000\000\000\000\000\001\252\000\000\001\243\000\000\002\r\003:\002\003\003\177\001\246\001\247\000\198\000\000\002\014\000\199\001\250\000\000\000\247\000\000\000\000\000\000\002\011\001\244\002\003\000\000\001\246\001\247\000\198\000\000\004I\000\199\001\252\000\000\000\224\000\000\002\r\000\000\000\249\000\201\000\000\000\000\000\000\000\000\002\014\000\000\001\250\000\000\000\000\003?\003K\003L\000\000\000\000\000\229\000\201\000\000\002\r\000\000\000\000\005\251\000\000\000\000\000\000\000\000\002\014\002\004\001\250\002\005\006\196\006\198\000\198\000\000\000\000\005\166\002\011\000\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\252\000\000\002\r\000\000\000\000\000\000\002\011\000\216\000\230\000\000\002\014\000\000\001\250\000\201\000\000\000\000\001\252\000\000\000\000\000\203\000\000\001\243\000\000\000\000\000\230\000\000\001\243\000\000\006\029\000\000\000\000\000\000\000\000\000\000\000\000\000\203\000\000\000\000\001\243\000\000\001\244\002\003\000\000\001\246\001\247\001\244\002\003\000\000\001\246\001\247\005\168\000\000\000\000\000\000\000\000\002\r\000\000\001\244\002\003\000\000\001\246\001\247\000\000\002\014\000\000\001\250\000\236\000\000\000\000\000\000\000\000\002\rw\000\000\005\175\001\243\005\176\000\000\002\004\000\000\002\005\002\007\000\000\000\000\000\000\000\000\001\243\000\220\000\000\001\244\002\003\002\011\001\246\001\247\001\244\002\003\000\000\001\246\001\247\000\000\000\000\001\252\002\r\002\011\000\000\001\244\002\003\002\r\001\246\001\247\002\014\000\000\001\250\001\252\000\000\002\014\000\000\001\250\000\000\002\r\000\000\000\000\001\243\000\000\000\000\000\000\000\000\002\014\000\000\001\250\000\000\000\000\002\004\000\000\002\005\002\t\000\000\002\004\000\000\002\005\002\012\001\244\002\003\000\000\001\246\001\247\000\000\000\000\002\004\000\000\002\005\002\015\000\000\000\000\000\000\000\000\002\r\002\011\000\000\000\000\000\000\000\000\002\011\000\000\002\014\000\000\001\250\001\252\002\r\001\243\000\000\000\000\001\252\002\011\000\000\000\000\002\014\000\000\001\250\000\000\001\243\000\000\000\000\001\252\002\004\000\000\002\005\002\020\001\244\002\003\000\000\001\246\001\247\001\243\000\000\000\000\000\000\000\000\001\243\001\244\002\003\000\000\001\246\001\247\000\000\000\000\000\000\000\000\000\000\002\011\000\000\000\000\001\244\002\003\000\000\001\246\001\247\001\244\002\003\001\252\001\246\001\247\002\r\000\000\000\000\000\000\000\000\002\r\000\000\000\000\002\014\002\004\001\250\002\005\002\022\002\014\000\000\001\250\002\r\000\000\000\000\000\000\002\004\000\000\002\005\002\189\002\014\000\000\001\250\001\243\000\000\000\000\000\000\000\000\000\000\002\004\002\011\002\005\002\194\000\000\002\004\000\000\002\005\003C\000\000\000\000\001\252\002\011\001\244\002\003\000\000\001\246\001\247\000\000\002\r\000\000\000\000\001\252\000\000\001\243\002\011\000\000\002\014\000\000\001\250\002\011\000\000\000\000\000\000\000\000\001\252\000\000\000\000\000\000\000\000\001\252\000\000\001\243\001\244\002\003\000\000\001\246\001\247\001\243\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\000\002\005\003E\000\000\001\244\002\003\000\000\001\246\001\247\002\r\001\244\002\003\000\000\001\246\001\247\000\000\000\000\002\014\000\000\001\250\002\r\000\000\000\000\000\000\002\011\000\000\000\000\000\000\002\014\002\004\001\250\002\005\003G\002\r\001\252\000\000\005\191\000\000\002\r\001\243\000\000\002\014\000\000\001\250\000\000\000\000\002\014\002\004\001\250\002\005\003N\000\000\000\000\002\004\002\011\002\005\004\208\000\000\001\244\003\247\000\000\001\246\001\247\005\192\001\252\005\193\000\000\000\000\000\000\000\000\000\000\000\000\002\011\005\191\000\000\000\000\000\000\000\000\002\011\000\000\000\000\000\000\001\252\000\000\001\243\000\000\000\000\000\000\001\252\002\r\000\000\000\000\000\000\001\243\005\194\000\000\000\000\002\014\000\000\001\250\005\192\000\000\005\193\001\244\003\247\000\000\001\246\001\247\000\000\004\180\000\000\000\000\001\244\003\247\000\000\001\246\001\247\000\000\000\000\002\r\000\000\005\195\000\000\000\000\000\000\000\000\001\251\002\014\000\000\001\250\005\196\005\194\005\197\000\000\000\000\000\000\001\252\002\r\000\000\000\000\000\000\000\198\000\000\002\r\000\199\002\014\000\000\001\250\000\000\005\224\000\000\002\014\000\000\001\250\000\000\000\000\000\000\000\000\005\195\000\000\000\198\000\000\000\000\000\199\000\000\003\248\000\000\005\196\000\201\005\197\000\000\001\251\005\199\000\000\000\000\000\000\005\201\005\211\004\173\000\000\001\251\001\252\000\000\000\000\000\000\003\249\005\198\000\201\005\222\000\000\001\252\002\r\000\000\004\176\000\000\000\000\000\000\004\173\001\243\002!\000\000\001\250\000\000\005\223\000\000\000\216\000\000\000\000\000\000\005\199\003\248\000\000\004\191\005\201\005\211\001\243\000\000\001\244\003\247\004P\001\246\001\247\000\000\000\000\000\216\005\222\000\000\000\000\000\000\000\000\004\003\004\204\000\000\000\203\001\244\003\247\002\r\001\246\001\247\000\000\005\223\000\000\000\000\000\000\002!\002\r\001\250\000\198\001\243\000\000\000\199\000\000\000\203\002!\000\000\001\250\000\198\000\198\000\000\000\199\000\199\000\000\000\000\000\000\000\000\000\000\000\000\001\244\003\247\000\000\001\246\001\247\000\000\000\000\000\201\000\000\000\198\000\000\000\000\000\199\000\236\000\000\000\000\000\201\000\201\001\251\000\000\000\211\000\000\000\000\000\000\004\179\000\000\004\173\004\173\001\252\000\000\000\000\000\000\000\236\000\000\000\000\001\251\000\201\000\000\000\000\000\211\001\243\004\201\005a\004\179\000\216\001\252\000\220\000\000\000\246\000\000\000\000\000\000\000\198\000\216\000\216\000\199\000\000\006=\000\198\001\244\003\247\000\199\001\246\001\247\000\000\000\220\000\000\000\246\001\251\000\000\000\000\006\188\000\203\000\216\004P\000\000\000\000\000\000\001\252\000\201\000\000\000\203\000\203\002\r\000\000\000\201\000\000\000\000\000\000\000\000\000\000\002!\001\243\001\250\000\000\000\000\000\198\000\000\000\000\000\199\002\r\000\203\000\000\000\000\006?\000\000\000\000\006\b\002!\000\000\001\250\001\244\003\247\000\000\001\246\001\247\000\216\000\000\000\000\000\236\000\000\000\000\000\216\000\201\000\000\000\000\000\211\001\251\000\236\000\236\001#\000\000\000\000\002\r\000\000\000\211\000\211\001\252\000\000\004\179\004\179\002!\000\198\001\250\000\203\000\199\000\000\000\000\000\236\000\000\000\203\000\000\000\220\006\020\000\246\000\211\000\000\000\000\000\000\006\189\000\216\000\220\000\220\000\246\000\246\000\000\006=\000\198\000\000\000\201\000\199\000\000\000\198\000\000\000\000\000\199\000\000\000\000\000\000\001\251\000\000\000\220\000\000\000\246\000\198\000\000\000\000\000\199\000\203\001\252\000\000\000\236\002\r\000\000\000\201\000\000\000\000\000\236\000\211\000\201\002!\000\000\001\250\000\000\000\211\000\000\000\216\000\000\001'\000\000\000\000\000\201\000\000\006>\000\000\000\000\000\198\000\000\006=\000\199\000\000\000\000\000\000\000\000\000\220\000\000\002n\000\000\000\000\000\000\000\220\000\216\000\246\000\000\000\203\000\236\000\216\000\000\000\000\000\000\000\000\000\000\000\211\000\201\002\r\000\000\001z\000\000\000\216\000\000\000\000\000\000\002!\000\000\001\250\000\198\000\000\000\000\000\199\000\203\000\198\000\000\000\000\000\199\000\203\006F\000\000\000\000\000\220\000\198\000\246\000\000\000\199\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000\216\000\236\000\201\000\000\000\000\000\000\000\000\000\201\000\211\000\000\000\000\000\000\001|at\000\220\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\171\000\000\000\000\000\000\000\000\000\000\000\236\005\171\000\000\000\000\000\220\000\000\000\246\000\211\000\000\000\000\000\000\005\132\000\000\000\000\000\000\000\000\005\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005w\000\000\005\187\000\000\005\176\000\000\000\220\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\220\000\000\000\000\000\000\000\000\000\000\005\174\000\000\000\000\000\000\000\000\000\000\000\000\005\174\000\000\000\000\000\000\005w\000\000\006\"\000\000\005\176\000\000\000\000\005w\000\000\006:\000\000\005\176\000\000\000\000\000\000\000\220\000\000\000\000\000\000\000\000\000\000\000\000\000\220"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3630 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+" )
# 1372 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3631 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+." )
# 1397 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3203 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1422 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tyvar00;
          MenhirLib.EngineTypes.startp = _startpos_tyvar00_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ty00;
                MenhirLib.EngineTypes.startp = _startpos_ty00_;
                MenhirLib.EngineTypes.endp = _endpos_ty00_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let tyvar00 : (string) = Obj.magic tyvar00 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let ty00 : (Parsetree.core_type) = Obj.magic ty00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_tyvar00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_tyvar0_ = _endpos_tyvar00_ in
          let _startpos_ty0_ = _startpos_ty00_ in
          let tyvar0 = tyvar00 in
          let _30 = _300 in
          let _20 = _200 in
          let ty0 = ty00 in
          let _1 =
            let tyvar = tyvar0 in
            let _3 = _30 in
            let _2 = _20 in
            let ty = ty0 in
            
# 3206 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_alias(ty, tyvar) )
# 1477 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_tyvar0_ in
          let _startpos__1_ = _startpos_ty0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1488 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3208 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1494 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Ast_helper.let_binding) = let attrs2 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1539 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__11_ in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1548 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2482 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklb ~loc:_sloc false body attrs
    )
# 1560 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 3264 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 1597 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1000 : (Parsetree.module_type) = Obj.magic _1000 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type) = let _4 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 1662 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1673 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1679 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1690 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 1696 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3266 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
# 1705 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (string) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 3269 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_var _2 )
# 1744 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1755 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1761 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3271 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_any )
# 1792 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1803 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1809 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let tid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 1849 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              
# 3316 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 1856 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3274 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 1862 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1873 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1879 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty000;
            MenhirLib.EngineTypes.startp = _startpos_ty000_;
            MenhirLib.EngineTypes.endp = _endpos_ty000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let ty000 : (Parsetree.core_type) = Obj.magic ty000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_ty00_ = _startpos_ty000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let ty00 = ty000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let ty0 = ty00 in
            let tid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 1928 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let ty = ty0 in
              
# 3318 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 1936 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3274 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 1942 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos_ty00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1953 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1959 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1100;
          MenhirLib.EngineTypes.startp = _startpos__1100_;
          MenhirLib.EngineTypes.endp = _endpos__1100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3000;
            MenhirLib.EngineTypes.startp = _startpos__3000_;
            MenhirLib.EngineTypes.endp = _endpos__3000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs00000;
              MenhirLib.EngineTypes.startp = _startpos_xs00000_;
              MenhirLib.EngineTypes.endp = _endpos_xs00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1100 : (Longident.t) = Obj.magic _1100 in
        let _3000 : unit = Obj.magic _3000 in
        let xs00000 : (Parsetree.core_type list) = Obj.magic xs00000 in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__110_ = _endpos__1100_ in
          let _startpos__110_ = _startpos__1100_ in
          let _startpos__100_ = _startpos__1000_ in
          let _110 = _1100 in
          let _300 = _3000 in
          let xs0000 = xs00000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__11_ = _endpos__110_ in
            let _startpos__11_ = _startpos__110_ in
            let _11 = _110 in
            let _30 = _300 in
            let xs000 = xs0000 in
            let _10 = _100 in
            let tid =
              let _endpos__1_ = _endpos__11_ in
              let _startpos__1_ = _startpos__11_ in
              let _1 = _11 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2024 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let _3 = _30 in
              let xs00 = xs000 in
              let _1 = _10 in
              let tys =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 2038 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2044 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3320 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2050 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3274 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2056 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__110_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2067 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2073 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 3276 "src/ocaml/preprocess/parser_raw.mly"
        ( let (f, c) = _2 in Ptyp_object (f, c) )
# 2120 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2131 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2137 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 3278 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_object ([], Closed) )
# 2176 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2187 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2193 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__200_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos__20_ = _startpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2242 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              
# 3316 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 2249 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3282 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2255 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__20_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2266 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2272 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty000;
              MenhirLib.EngineTypes.startp = _startpos_ty000_;
              MenhirLib.EngineTypes.endp = _endpos_ty000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let ty000 : (Parsetree.core_type) = Obj.magic ty000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_ty00_ = _startpos_ty000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let ty00 = ty000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let ty0 = ty00 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2329 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let ty = ty0 in
              
# 3318 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 2337 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3282 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2343 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos_ty00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2354 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2360 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1100;
          MenhirLib.EngineTypes.startp = _startpos__1100_;
          MenhirLib.EngineTypes.endp = _endpos__1100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3000;
              MenhirLib.EngineTypes.startp = _startpos__3000_;
              MenhirLib.EngineTypes.endp = _endpos__3000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = xs00000;
                MenhirLib.EngineTypes.startp = _startpos_xs00000_;
                MenhirLib.EngineTypes.endp = _endpos_xs00000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1100 : (Longident.t) = Obj.magic _1100 in
        let _200 : unit = Obj.magic _200 in
        let _3000 : unit = Obj.magic _3000 in
        let xs00000 : (Parsetree.core_type list) = Obj.magic xs00000 in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__110_ = _endpos__1100_ in
          let _startpos__110_ = _startpos__1100_ in
          let _startpos__100_ = _startpos__1000_ in
          let _110 = _1100 in
          let _20 = _200 in
          let _300 = _3000 in
          let xs0000 = xs00000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__11_ = _endpos__110_ in
            let _startpos__11_ = _startpos__110_ in
            let _11 = _110 in
            let _2 = _20 in
            let _30 = _300 in
            let xs000 = xs0000 in
            let _10 = _100 in
            let cid =
              let _endpos__1_ = _endpos__11_ in
              let _startpos__1_ = _startpos__11_ in
              let _1 = _11 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2433 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let _3 = _30 in
              let xs00 = xs000 in
              let _1 = _10 in
              let tys =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 2447 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2453 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3320 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2459 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3282 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2465 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__110_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2476 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2482 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.row_field) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 3285 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([_2], Closed, None) )
# 2529 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2540 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2546 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 2607 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2613 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3330 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2619 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3287 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, None) )
# 2625 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2636 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2642 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.row_field) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let xs0000 = xs00000 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let xs000 = xs0000 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _4 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 2711 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2717 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3330 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2723 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3289 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_2 :: _4, Closed, None) )
# 2729 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2740 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2746 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : (unit option) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 2807 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2813 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3330 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2819 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3291 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Open, None) )
# 2825 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2836 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2842 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 3293 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([], Open, None) )
# 2881 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2892 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2898 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : (unit option) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 2959 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2965 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3330 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2971 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3295 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some []) )
# 2977 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2988 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2994 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _600;
          MenhirLib.EngineTypes.startp = _startpos__600_;
          MenhirLib.EngineTypes.endp = _endpos__600_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00100;
            MenhirLib.EngineTypes.startp = _startpos_xs00100_;
            MenhirLib.EngineTypes.endp = _endpos_xs00100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _400;
              MenhirLib.EngineTypes.startp = _startpos__400_;
              MenhirLib.EngineTypes.endp = _endpos__400_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = xs00000;
                MenhirLib.EngineTypes.startp = _startpos_xs00000_;
                MenhirLib.EngineTypes.endp = _endpos_xs00000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _600 : unit = Obj.magic _600 in
        let xs00100 : (string list) = Obj.magic xs00100 in
        let _400 : unit = Obj.magic _400 in
        let xs00000 : (Parsetree.row_field list) = Obj.magic xs00000 in
        let _200 : (unit option) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__600_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__60_ = _endpos__600_ in
          let _startpos__10_ = _startpos__100_ in
          let _60 = _600 in
          let xs0010 = xs00100 in
          let _40 = _400 in
          let xs0000 = xs00000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _6 = _60 in
            let xs001 = xs0010 in
            let _4 = _40 in
            let xs000 = xs0000 in
            let _2 = _20 in
            let _1 = _10 in
            let _5 =
              let xs00 = xs001 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 3071 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 947 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3077 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3358 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3083 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 3095 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3101 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3330 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3107 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3297 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some _5) )
# 3113 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__60_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3124 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3130 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3299 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_extension _1 )
# 3161 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3172 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3301 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3178 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3697 "src/ocaml/preprocess/parser_raw.mly"
                     ( _1 )
# 3209 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 875 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3220 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3699 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3226 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (string Location.loc) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (string Location.loc) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 3698 "src/ocaml/preprocess/parser_raw.mly"
                                 ( _1 ^ "." ^ _3.txt )
# 3273 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 875 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3284 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3699 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3290 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3703 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 3336 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = 
# 1766 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3361 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3400 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1768 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_class_attrs ~loc:_sloc _3 _2 )
# 3409 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1770 "src/ocaml/preprocess/parser_raw.mly"
      ( class_of_let_bindings ~loc:_sloc _1 _3 )
# 3449 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3511 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3519 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__10_ in
        let _3 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3527 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1772 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3538 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3606 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3614 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _3 =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3623 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1772 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3634 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1776 "src/ocaml/preprocess/parser_raw.mly"
      ( Cl.attr _1 _2 )
# 3665 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs0000 : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs0000 in
        let _100 : (Parsetree.class_expr) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos__10_ = _startpos__100_ in
          let xs000 = xs0000 in
          let _10 = _100 in
          let _1 =
            let xs00 = xs000 in
            let _1 = _10 in
            let _2 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 3708 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 947 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3714 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1779 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_apply(_1, _2) )
# 3720 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3731 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1782 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3737 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1781 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_extension _1 )
# 3768 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3779 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1782 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3785 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3836 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__11_ in
        let _3 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3845 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3852 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1831 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3862 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3919 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__12_ in
        let _3 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3928 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3936 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1831 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3946 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _10 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3986 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1834 "src/ocaml/preprocess/parser_raw.mly"
      ( let v, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
# 3998 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _10 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4038 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1838 "src/ocaml/preprocess/parser_raw.mly"
      ( let meth, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
# 4050 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4095 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4104 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1842 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
# 4114 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4159 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4168 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1845 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
# 4178 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_field) = let _2 =
          let _1 = _10 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4211 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1848 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
# 4222 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_field) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1851 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcf_attribute _1 )
# 4253 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 896 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcf ~loc:_sloc _1 )
# 4264 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1852 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4270 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1746 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4301 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.class_expr) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_type) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1749 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_4, _2) )
# 4356 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4367 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1752 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4373 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1751 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 4412 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4423 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1752 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4429 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e00;
          MenhirLib.EngineTypes.startp = _startpos_e00_;
          MenhirLib.EngineTypes.endp = _endpos_e00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e00 : (Parsetree.class_expr) = Obj.magic e00 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_e00_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos_e0_ = _endpos_e00_ in
          let _startpos__10_ = _startpos__100_ in
          let e0 = e00 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let e = e0 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1807 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4476 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4487 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1808 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4493 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e00;
          MenhirLib.EngineTypes.startp = _startpos_e00_;
          MenhirLib.EngineTypes.endp = _endpos_e00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e00 : (Parsetree.class_expr) = Obj.magic e00 in
        let _100 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_e00_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos_e0_ = _endpos_e00_ in
          let _startpos__10_ = _startpos__100_ in
          let e0 = e00 in
          let _10 = _100 in
          let _1 =
            let e = e0 in
            let _1 = _10 in
            
# 1807 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4532 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4543 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1808 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4549 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4570 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3517 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 4578 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4609 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3518 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 4619 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1816 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 4659 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1818 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 4722 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 4733 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1819 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4739 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__0_ in
        let _symbolstartpos = _endpos in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1821 "src/ocaml/preprocess/parser_raw.mly"
      ( ghpat ~loc:_sloc Ppat_any )
# 4760 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 1946 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4797 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            
# 1947 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ptyp_any )
# 4817 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 4827 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1948 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4833 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.class_type) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4878 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4887 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1956 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
# 4897 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty0;
            MenhirLib.EngineTypes.startp = _startpos_ty0_;
            MenhirLib.EngineTypes.endp = _endpos_ty0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = flags0;
                  MenhirLib.EngineTypes.startp = _startpos_flags0_;
                  MenhirLib.EngineTypes.endp = _endpos_flags0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _30 : unit = Obj.magic _30 in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4951 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let flags0 : (Asttypes.mutable_flag * Asttypes.virtual_flag) = Obj.magic flags0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4964 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _3 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let ty = ty0 in
          let _3 = _30 in
          let _100 = _1000 in
          let flags = flags0 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 4984 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 4995 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1981 "src/ocaml/preprocess/parser_raw.mly"
  (
    let mut, virt = flags in
    label, mut, virt, ty
  )
# 5004 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5012 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1959 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
# 5022 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 5076 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.class_type_field) = let _7 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5089 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__12_ in
        let _6 =
          let _1 = _11 in
          
# 3169 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5098 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 5110 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5121 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5129 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1963 "src/ocaml/preprocess/parser_raw.mly"
      ( let (p, v) = _3 in
        let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
# 5140 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5185 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5194 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1967 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
# 5204 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_type_field) = let _2 =
          let _1 = _10 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5237 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1970 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
# 5248 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_type_field) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1973 "src/ocaml/preprocess/parser_raw.mly"
      ( Pctf_attribute _1 )
# 5279 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 894 "src/ocaml/preprocess/parser_raw.mly"
    ( mkctf ~loc:_sloc _1 )
# 5290 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1974 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5296 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5336 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                
# 1932 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5344 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1938 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5350 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1915 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5356 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 892 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5367 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1918 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5373 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1010;
          MenhirLib.EngineTypes.startp = _startpos__1010_;
          MenhirLib.EngineTypes.endp = _endpos__1010_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30000;
            MenhirLib.EngineTypes.startp = _startpos__30000_;
            MenhirLib.EngineTypes.endp = _endpos__30000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs000000;
              MenhirLib.EngineTypes.startp = _startpos_xs000000_;
              MenhirLib.EngineTypes.endp = _endpos_xs000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _30000 : unit = Obj.magic _30000 in
        let xs000000 : (Parsetree.core_type list) = Obj.magic xs000000 in
        let _10000 : unit = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__1010_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _101 = _1010 in
          let _3000 = _30000 in
          let xs00000 = xs000000 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _10 = _101 in
            let _300 = _3000 in
            let xs0000 = xs00000 in
            let _100 = _1000 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5438 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let _30 = _300 in
              let xs000 = xs0000 in
              let _10 = _100 in
              let tys =
                let _3 = _30 in
                let xs00 = xs000 in
                let _1 = _10 in
                let params =
                  let xs0 = xs00 in
                  let xs =
                    let xs = xs0 in
                    
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 5456 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 5462 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1934 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 5468 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1938 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5474 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1915 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5480 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__101_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 892 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5491 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1918 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5497 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1917 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_extension _1 )
# 5528 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 892 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5539 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1918 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5545 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss0000;
            MenhirLib.EngineTypes.startp = _startpos_xss0000_;
            MenhirLib.EngineTypes.endp = _endpos_xss0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss0000 : (Parsetree.class_type_field list list) = Obj.magic xss0000 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type) = let _3 =
          let _endpos_xss000_ = _endpos_xss0000_ in
          let _startpos_xss000_ = _startpos_xss0000_ in
          let xss000 = xss0000 in
          let _1 = _11 in
          let _2 =
            let _endpos_xss00_ = _endpos_xss000_ in
            let _startpos_xss00_ = _startpos_xss000_ in
            let xss00 = xss000 in
            let _1 =
              let xss0 = xss00 in
              let _1 =
                let xss = xss0 in
                
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 5607 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1952 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5613 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xss00_ in
            let _startpos__1_ = _startpos_xss00_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 840 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5623 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1942 "src/ocaml/preprocess/parser_raw.mly"
      ( Csig.mk _1 _2 )
# 5629 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5637 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1920 "src/ocaml/preprocess/parser_raw.mly"
      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
# 5646 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type) = 
# 1924 "src/ocaml/preprocess/parser_raw.mly"
      ( Cty.attr _1 _2 )
# 5677 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5739 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5747 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__10_ in
        let _3 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 5755 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1926 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5766 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5834 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5842 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__11_ in
        let _3 =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 5851 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1926 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5862 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = 
# 1786 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 5899 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5939 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                
# 1932 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5947 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1938 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5953 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1791 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 5959 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5970 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1798 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5976 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1010;
          MenhirLib.EngineTypes.startp = _startpos__1010_;
          MenhirLib.EngineTypes.endp = _endpos__1010_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30000;
            MenhirLib.EngineTypes.startp = _startpos__30000_;
            MenhirLib.EngineTypes.endp = _endpos__30000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs000000;
              MenhirLib.EngineTypes.startp = _startpos_xs000000_;
              MenhirLib.EngineTypes.endp = _endpos_xs000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _30000 : unit = Obj.magic _30000 in
        let xs000000 : (Parsetree.core_type list) = Obj.magic xs000000 in
        let _10000 : unit = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__1010_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _101 = _1010 in
          let _3000 = _30000 in
          let xs00000 = xs000000 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _10 = _101 in
            let _300 = _3000 in
            let xs0000 = xs00000 in
            let _100 = _1000 in
            let cid =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 6041 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let _30 = _300 in
              let xs000 = xs0000 in
              let _10 = _100 in
              let tys =
                let _3 = _30 in
                let xs00 = xs000 in
                let _1 = _10 in
                let params =
                  let xs0 = xs00 in
                  let xs =
                    let xs = xs0 in
                    
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 6059 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6065 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1934 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 6071 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1938 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 6077 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1791 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 6083 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__101_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6094 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1798 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6100 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.class_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1795 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_2, _4) )
# 6163 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 898 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 6174 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1798 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6180 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss0000;
            MenhirLib.EngineTypes.startp = _startpos_xss0000_;
            MenhirLib.EngineTypes.endp = _endpos_xss0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss0000 : (Parsetree.class_field list list) = Obj.magic xss0000 in
        let _11 : (Parsetree.pattern) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_expr) = let _3 =
          let _endpos_xss000_ = _endpos_xss0000_ in
          let _startpos_xss000_ = _startpos_xss0000_ in
          let xss000 = xss0000 in
          let _1 = _11 in
          let _2 =
            let _endpos_xss00_ = _endpos_xss000_ in
            let _startpos_xss00_ = _startpos_xss000_ in
            let xss00 = xss000 in
            let _1 =
              let xss0 = xss00 in
              let _1 =
                let xss = xss0 in
                
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 6242 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1825 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6248 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos_xss00_ in
            let _startpos__1_ = _startpos_xss00_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 839 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 6258 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1812 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 6264 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6272 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1800 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
# 6281 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = 
# 1903 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6306 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = domain00;
              MenhirLib.EngineTypes.startp = _startpos_domain00_;
              MenhirLib.EngineTypes.endp = _endpos_domain00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label000;
                MenhirLib.EngineTypes.startp = _startpos_label000_;
                MenhirLib.EngineTypes.endp = _endpos_label000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.class_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let domain00 : (Parsetree.core_type) = Obj.magic domain00 in
        let label000 : (string) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let domain0 = domain00 in
          let label00 = label000 in
          let _1 =
            let codomain = codomain0 in
            let _3 = _30 in
            let domain = domain0 in
            let label0 = label00 in
            let label =
              let label = label0 in
              
# 3232 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 6363 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1909 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6369 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 892 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6380 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1910 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6386 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = domain00;
              MenhirLib.EngineTypes.startp = _startpos_domain00_;
              MenhirLib.EngineTypes.endp = _endpos_domain00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2000;
                MenhirLib.EngineTypes.startp = _startpos__2000_;
                MenhirLib.EngineTypes.endp = _endpos__2000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label000;
                  MenhirLib.EngineTypes.startp = _startpos_label000_;
                  MenhirLib.EngineTypes.endp = _endpos_label000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.class_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let domain00 : (Parsetree.core_type) = Obj.magic domain00 in
        let _2000 : unit = Obj.magic _2000 in
        let label000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6431 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let domain0 = domain00 in
          let _200 = _2000 in
          let label00 = label000 in
          let _1 =
            let codomain = codomain0 in
            let _3 = _30 in
            let domain = domain0 in
            let _20 = _200 in
            let label0 = label00 in
            let label =
              let _2 = _20 in
              let label = label0 in
              
# 3234 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 6456 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1909 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6462 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 892 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6473 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1910 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6479 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = domain00;
              MenhirLib.EngineTypes.startp = _startpos_domain00_;
              MenhirLib.EngineTypes.endp = _endpos_domain00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.class_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let domain00 : (Parsetree.core_type) = Obj.magic domain00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_domain00_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _startpos_domain0_ = _startpos_domain00_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let domain0 = domain00 in
          let _1 =
            let codomain = codomain0 in
            let _3 = _30 in
            let domain = domain0 in
            let label =
              
# 3236 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 6527 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1909 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6533 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_domain0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 892 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6544 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1910 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6550 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0;
          MenhirLib.EngineTypes.startp = _startpos_bs0_;
          MenhirLib.EngineTypes.endp = _endpos_bs0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200;
            MenhirLib.EngineTypes.startp = _startpos__1200_;
            MenhirLib.EngineTypes.endp = _endpos__1200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = csig00;
              MenhirLib.EngineTypes.startp = _startpos_csig00_;
              MenhirLib.EngineTypes.endp = _endpos_csig00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _800;
                MenhirLib.EngineTypes.startp = _startpos__800_;
                MenhirLib.EngineTypes.endp = _endpos__800_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1100;
                  MenhirLib.EngineTypes.startp = _startpos__1100_;
                  MenhirLib.EngineTypes.endp = _endpos__1100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params00;
                    MenhirLib.EngineTypes.startp = _startpos_params00_;
                    MenhirLib.EngineTypes.endp = _endpos_params00_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt00;
                      MenhirLib.EngineTypes.startp = _startpos_virt00_;
                      MenhirLib.EngineTypes.endp = _endpos_virt00_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _1000;
                        MenhirLib.EngineTypes.startp = _startpos__1000_;
                        MenhirLib.EngineTypes.endp = _endpos__1000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext00;
                          MenhirLib.EngineTypes.startp = _startpos_ext00_;
                          MenhirLib.EngineTypes.endp = _endpos_ext00_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _200;
                            MenhirLib.EngineTypes.startp = _startpos__200_;
                            MenhirLib.EngineTypes.endp = _endpos__200_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _130;
                              MenhirLib.EngineTypes.startp = _startpos__130_;
                              MenhirLib.EngineTypes.endp = _endpos__130_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0 : (Parsetree.class_type_declaration list) = Obj.magic bs0 in
        let _1200 : (Parsetree.attributes) = Obj.magic _1200 in
        let csig00 : (Parsetree.class_type) = Obj.magic csig00 in
        let _800 : unit = Obj.magic _800 in
        let _1100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6625 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1100 in
        let params00 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params00 in
        let virt00 : (Asttypes.virtual_flag) = Obj.magic virt00 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let ext00 : (string Location.loc option) = Obj.magic ext00 in
        let _200 : unit = Obj.magic _200 in
        let _130 : unit = Obj.magic _130 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130_ in
        let _endpos = _endpos_bs0_ in
        let _v : (string Location.loc option * Parsetree.class_type_declaration list) = let _1 =
          let _startpos__13_ = _startpos__130_ in
          let _endpos__120_ = _endpos__1200_ in
          let _endpos__110_ = _endpos__1100_ in
          let _startpos__110_ = _startpos__1100_ in
          let bs = bs0 in
          let _120 = _1200 in
          let csig0 = csig00 in
          let _80 = _800 in
          let _110 = _1100 in
          let params0 = params00 in
          let virt0 = virt00 in
          let _100 = _1000 in
          let ext0 = ext00 in
          let _20 = _200 in
          let _13 = _130 in
          let a =
            let _endpos__12_ = _endpos__120_ in
            let _endpos__11_ = _endpos__110_ in
            let _startpos__11_ = _startpos__110_ in
            let _startpos__1_ = _startpos__13_ in
            let _12 = _120 in
            let csig = csig0 in
            let _8 = _80 in
            let _11 = _110 in
            let params = params0 in
            let virt = virt0 in
            let _10 = _100 in
            let ext = ext0 in
            let _2 = _20 in
            let _1 = _13 in
            let attrs2 =
              let _1 = _12 in
              
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6672 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__12_ in
            let id =
              let _endpos__1_ = _endpos__11_ in
              let _startpos__1_ = _startpos__11_ in
              let _1 = _11 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 6686 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6694 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2048 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
    )
# 6709 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 6715 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2036 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6721 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6742 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3513 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 6750 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6781 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3514 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 6791 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 665 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 6812 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3404 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _1 in Pconst_integer (n, m) )
# 6820 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 624 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 6841 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3405 "src/ocaml/preprocess/parser_raw.mly"
                 ( Pconst_char _1 )
# 6849 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 717 "src/ocaml/preprocess/parser_raw.mly"
       (string * string option)
# 6870 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3406 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (s, d) = _1 in Pconst_string (s, d) )
# 6878 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 644 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 6899 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3407 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _1 in Pconst_float (f, m) )
# 6907 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6928 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3467 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 6936 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3468 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "[]" )
# 6967 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3469 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "()" )
# 6998 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3470 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 7035 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3471 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "false" )
# 7060 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3472 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "true" )
# 7085 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3480 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7110 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Longident.t) = 
# 3481 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1,"::") )
# 7159 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 3482 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident "[]" )
# 7190 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 3483 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident "()" )
# 7221 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3484 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident "::" )
# 7258 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3485 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident "false" )
# 7283 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3486 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident "true" )
# 7308 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type) = 
# 1992 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3 )
# 7345 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x000;
          MenhirLib.EngineTypes.startp = _startpos_x000_;
          MenhirLib.EngineTypes.endp = _endpos_x000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos_x000_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let x00 = x000 in
          let xs =
            let x0 = x00 in
            let xs =
              let x = x0 in
              
# 963 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 7376 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 7382 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 983 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7388 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3039 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 7394 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x000;
          MenhirLib.EngineTypes.startp = _startpos_x000_;
          MenhirLib.EngineTypes.endp = _endpos_x000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs000;
              MenhirLib.EngineTypes.startp = _startpos_xs000_;
              MenhirLib.EngineTypes.endp = _endpos_xs000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _2000 : unit = Obj.magic _2000 in
        let xs000 : (Parsetree.core_type list) = Obj.magic xs000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs000_ in
        let _endpos = _endpos_x000_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let x00 = x000 in
          let _200 = _2000 in
          let xs00 = xs000 in
          let xs =
            let x0 = x00 in
            let _20 = _200 in
            let xs0 = xs00 in
            let xs =
              let x = x0 in
              let _2 = _20 in
              let xs = xs0 in
              
# 967 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 7443 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 7449 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 983 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7455 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3039 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 7461 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_arguments) = 
# 3041 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_record _2 )
# 7498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 2960 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 7523 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs0;
          MenhirLib.EngineTypes.startp = _startpos_xs0_;
          MenhirLib.EngineTypes.endp = _endpos_xs0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs0 : (Parsetree.constructor_declaration list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_xs0_ in
        let _v : (Parsetree.constructor_declaration list) = let cs =
          let xs = xs0 in
          
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 7550 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2962 "src/ocaml/preprocess/parser_raw.mly"
      ( cs )
# 7556 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = _10 in
          
# 3194 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7583 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3184 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 7589 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 3186 "src/ocaml/preprocess/parser_raw.mly"
      ( Typ.attr _1 _2 )
# 7620 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3567 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Upto )
# 7645 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3568 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Downto )
# 7670 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3771 "src/ocaml/preprocess/parser_raw.mly"
    ( expr_of_lwt_bindings ~loc:_loc _1 (merloc _endpos__2_ _3) )
# 7710 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs000;
          MenhirLib.EngineTypes.startp = _startpos_xs000_;
          MenhirLib.EngineTypes.endp = _endpos_xs000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs000 : (Parsetree.case list) = Obj.magic xs000 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs000_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs00 = xs000 in
          let xs =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 7771 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1040 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7777 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2523 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7783 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos_xs000_ in
        let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7795 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7801 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3773 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
          (Pexp_match(Fake.app Fake.Lwt.un_lwt _3, List.rev _5)) _2 in
      Fake.app Fake.Lwt.in_lwt expr )
# 7812 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7860 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7866 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3777 "src/ocaml/preprocess/parser_raw.mly"
    ( reloc_exp ~loc:_loc (Fake.app Fake.Lwt.in_lwt _3) )
# 7875 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs000;
          MenhirLib.EngineTypes.startp = _startpos_xs000_;
          MenhirLib.EngineTypes.endp = _endpos_xs000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs000 : (Parsetree.case list) = Obj.magic xs000 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs000_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs00 = xs000 in
          let xs =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 7936 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1040 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7942 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2523 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7948 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos_xs000_ in
        let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7960 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7966 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3779 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
        (Pexp_try(Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 )
# 7976 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8036 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8042 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3782 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.app (Fake.app Fake.Lwt.finally_ _3) _5 )
# 8048 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs000;
              MenhirLib.EngineTypes.startp = _startpos_xs000_;
              MenhirLib.EngineTypes.endp = _endpos_xs000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs000 : (Parsetree.case list) = Obj.magic xs000 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs00 = xs000 in
          let xs =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 8121 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1040 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8127 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2523 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8133 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8144 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8150 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3784 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
        (Pexp_try (Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 in
      Fake.app (Fake.app Fake.Lwt.finally_ expr) _7 )
# 8161 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8227 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8233 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3788 "src/ocaml/preprocess/parser_raw.mly"
  ( let expr = Pexp_while (_3, Fake.(app Lwt.un_lwt _5)) in
    Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8243 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _100;
                          MenhirLib.EngineTypes.startp = _startpos__100_;
                          MenhirLib.EngineTypes.endp = _endpos__100_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _11;
                            MenhirLib.EngineTypes.startp = _startpos__11_;
                            MenhirLib.EngineTypes.endp = _endpos__11_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8333 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8339 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__10_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3791 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = Pexp_for (_3, _5, _7, _6, Fake.(app Lwt.un_lwt _9)) in
      Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8349 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100;
                      MenhirLib.EngineTypes.startp = _startpos__100_;
                      MenhirLib.EngineTypes.endp = _endpos__100_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _11;
                        MenhirLib.EngineTypes.startp = _startpos__11_;
                        MenhirLib.EngineTypes.endp = _endpos__11_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.expression) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8427 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8433 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3794 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
          (Pexp_let (Nonrecursive, [Vb.mk _3 (Fake.(app Lwt.un_stream _5))],
             Fake.(app Lwt.unit_lwt _7)))
          _2
    )
# 8446 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2139 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 8471 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _101;
                MenhirLib.EngineTypes.startp = _startpos__101_;
                MenhirLib.EngineTypes.endp = _endpos__101_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _20;
                      MenhirLib.EngineTypes.startp = _startpos__20_;
                      MenhirLib.EngineTypes.endp = _endpos__20_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _12;
                        MenhirLib.EngineTypes.startp = _startpos__12_;
                        MenhirLib.EngineTypes.endp = _endpos__12_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.module_expr) = Obj.magic _50 in
        let _101 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 8530 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _101 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__10_ = _endpos__101_ in
          let _startpos__10_ = _startpos__101_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _10 = _101 in
          let _100 = _1000 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _12 in
          let _4 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8561 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8572 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8578 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2184 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letmodule(_4, _5, (merloc _endpos__6_ _7)), _3 )
# 8584 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8596 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1010;
                  MenhirLib.EngineTypes.startp = _startpos__1010_;
                  MenhirLib.EngineTypes.endp = _endpos__1010_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _111;
                      MenhirLib.EngineTypes.startp = _startpos__111_;
                      MenhirLib.EngineTypes.endp = _endpos__111_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _21;
                        MenhirLib.EngineTypes.startp = _startpos__21_;
                        MenhirLib.EngineTypes.endp = _endpos__21_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _10;
                          MenhirLib.EngineTypes.startp = _startpos__10_;
                          MenhirLib.EngineTypes.endp = _endpos__10_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : (Parsetree.expression) = Obj.magic _60 in
        let _50 : unit = Obj.magic _50 in
        let _1100 : (Parsetree.attributes) = Obj.magic _1100 in
        let _200 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _200 in
        let _1010 : (string) = Obj.magic _1010 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _111 : (string Location.loc option) = Obj.magic _111 in
        let _21 : unit = Obj.magic _21 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__110_ = _endpos__1100_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _6 = _60 in
          let _5 = _50 in
          let _110 = _1100 in
          let _20 = _200 in
          let _101 = _1010 in
          let _100 = _1000 in
          let _11 = _111 in
          let _2 = _21 in
          let _1 = _10 in
          let _4 =
            let _endpos__11_ = _endpos__110_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _11 = _110 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _1 = _11 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8691 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__11_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8705 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3024 "src/ocaml/preprocess/parser_raw.mly"
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
# 8716 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8727 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8733 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2186 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letexception(_4, _6), _3 )
# 8739 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8751 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.module_expr) = Obj.magic _50 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__5_ = _endpos__50_ in
          let _startpos__2_ = _startpos__20_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _100 = _1000 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _10 in
          let _4 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8828 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8834 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 8841 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2188 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 8849 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8861 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _101;
                    MenhirLib.EngineTypes.startp = _startpos__101_;
                    MenhirLib.EngineTypes.endp = _endpos__101_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _20;
                      MenhirLib.EngineTypes.startp = _startpos__20_;
                      MenhirLib.EngineTypes.endp = _endpos__20_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _12;
                        MenhirLib.EngineTypes.startp = _startpos__12_;
                        MenhirLib.EngineTypes.endp = _endpos__12_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.module_expr) = Obj.magic _50 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _101 : unit = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__5_ = _endpos__50_ in
          let _startpos__2_ = _startpos__20_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _100 = _1000 in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _1 = _12 in
          let _4 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8945 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8951 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let _1 = _10 in
            
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 8959 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2188 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 8967 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8979 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs0000 : (Parsetree.case list) = Obj.magic xs0000 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.expression) = let _1 =
          let xs000 = xs0000 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _3 =
            let xs00 = xs000 in
            let xs =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 9033 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1040 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9039 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2523 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9045 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9056 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9062 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2192 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_function _3, _2 )
# 9068 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs0000_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9080 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _40 : (Parsetree.expression) = Obj.magic _40 in
        let _30 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9140 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9146 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2194 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _3 in
        Pexp_fun(l, o, p, _4), _2 )
# 9153 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9165 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs00;
              MenhirLib.EngineTypes.startp = _startpos_xs00_;
              MenhirLib.EngineTypes.endp = _endpos_xs00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110;
                      MenhirLib.EngineTypes.startp = _startpos__110_;
                      MenhirLib.EngineTypes.endp = _endpos__110_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let xs00 : (string Location.loc list) = Obj.magic xs00 in
        let _40 : unit = Obj.magic _40 in
        let _30 : unit = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__7_ = _endpos__70_ in
          let _startpos__1_ = _startpos__10_ in
          let _7 = _70 in
          let _6 = _60 in
          let xs0 = xs00 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _5 =
            let xs = xs0 in
            
# 2418 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9245 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9256 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9262 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2197 "src/ocaml/preprocess/parser_raw.mly"
      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
# 9271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9283 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs0000 : (Parsetree.case list) = Obj.magic xs0000 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.expression) = let _1 =
          let xs000 = xs0000 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _5 =
            let xs00 = xs000 in
            let xs =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 9351 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1040 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9357 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2523 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9363 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9374 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9380 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2199 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_match(_3, _5), _2 )
# 9386 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs0000_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9398 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs0000 : (Parsetree.case list) = Obj.magic xs0000 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.expression) = let _1 =
          let xs000 = xs0000 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _5 =
            let xs00 = xs000 in
            let xs =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 9466 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1040 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9472 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2523 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9478 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9489 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9495 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2201 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_try(_3, _5), _2 )
# 9501 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs0000_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9513 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110;
                      MenhirLib.EngineTypes.startp = _startpos__110_;
                      MenhirLib.EngineTypes.endp = _endpos__110_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _endpos__4_ = _endpos__40_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9596 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9602 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2205 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), Some (merloc _endpos__6_ _7)), _2 )
# 9608 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9620 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__4_ = _endpos__40_ in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9688 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9694 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2207 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), None), _2 )
# 9700 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9712 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _30;
                MenhirLib.EngineTypes.startp = _startpos__30_;
                MenhirLib.EngineTypes.endp = _endpos__30_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__4_ = _endpos__40_ in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9787 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9793 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2209 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_while(_3, (merloc _endpos__4_ _5)), _2 )
# 9799 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9811 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _101;
          MenhirLib.EngineTypes.startp = _startpos__101_;
          MenhirLib.EngineTypes.endp = _endpos__101_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _90;
            MenhirLib.EngineTypes.startp = _startpos__90_;
            MenhirLib.EngineTypes.endp = _endpos__90_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _80;
              MenhirLib.EngineTypes.startp = _startpos__80_;
              MenhirLib.EngineTypes.endp = _endpos__80_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70;
                MenhirLib.EngineTypes.startp = _startpos__70_;
                MenhirLib.EngineTypes.endp = _endpos__70_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _60;
                  MenhirLib.EngineTypes.startp = _startpos__60_;
                  MenhirLib.EngineTypes.endp = _endpos__60_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _50;
                    MenhirLib.EngineTypes.startp = _startpos__50_;
                    MenhirLib.EngineTypes.endp = _endpos__50_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _40;
                      MenhirLib.EngineTypes.startp = _startpos__40_;
                      MenhirLib.EngineTypes.endp = _endpos__40_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _30;
                        MenhirLib.EngineTypes.startp = _startpos__30_;
                        MenhirLib.EngineTypes.endp = _endpos__30_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _1000;
                          MenhirLib.EngineTypes.startp = _startpos__1000_;
                          MenhirLib.EngineTypes.endp = _endpos__1000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _110;
                            MenhirLib.EngineTypes.startp = _startpos__110_;
                            MenhirLib.EngineTypes.endp = _endpos__110_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _12;
                              MenhirLib.EngineTypes.startp = _startpos__12_;
                              MenhirLib.EngineTypes.endp = _endpos__12_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _101 : unit = Obj.magic _101 in
        let _90 : (Parsetree.expression) = Obj.magic _90 in
        let _80 : unit = Obj.magic _80 in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : (Asttypes.direction_flag) = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.pattern) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__101_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__8_ = _endpos__80_ in
          let _endpos__6_ = _endpos__60_ in
          let _endpos__4_ = _endpos__40_ in
          let _10 = _101 in
          let _9 = _90 in
          let _8 = _80 in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _12 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9916 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9922 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2212 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_for(_3, (merloc _endpos__4_ _5), (merloc _endpos__6_ _7), _6, (merloc _endpos__8_ _9)), _2 )
# 9928 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__101_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9940 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9993 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9999 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2214 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_assert _3, _2 )
# 10005 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10017 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10070 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10076 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2216 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_lazy _3, _2 )
# 10082 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10094 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss00000;
            MenhirLib.EngineTypes.startp = _startpos_xss00000_;
            MenhirLib.EngineTypes.endp = _endpos_xss00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _101;
              MenhirLib.EngineTypes.startp = _startpos__101_;
              MenhirLib.EngineTypes.endp = _endpos__101_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _12;
                    MenhirLib.EngineTypes.startp = _startpos__12_;
                    MenhirLib.EngineTypes.endp = _endpos__12_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let xss00000 : (Parsetree.class_field list list) = Obj.magic xss00000 in
        let _101 : (Parsetree.pattern) = Obj.magic _101 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_xss0000_ = _endpos_xss00000_ in
          let _startpos_xss0000_ = _startpos_xss00000_ in
          let _4 = _40 in
          let xss0000 = xss00000 in
          let _10 = _101 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _12 in
          let _3 =
            let _endpos_xss000_ = _endpos_xss0000_ in
            let _startpos_xss000_ = _startpos_xss0000_ in
            let xss000 = xss0000 in
            let _1 = _10 in
            let _2 =
              let _endpos_xss00_ = _endpos_xss000_ in
              let _startpos_xss00_ = _startpos_xss000_ in
              let xss00 = xss000 in
              let _1 =
                let xss0 = xss00 in
                let _1 =
                  let xss = xss0 in
                  
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 10171 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1825 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10177 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_xss00_ in
              let _startpos__1_ = _startpos_xss00_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 839 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 10187 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1812 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 10193 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10204 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10210 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2218 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_object _3, _2 )
# 10216 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2141 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10228 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs0000 : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs0000 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos__10_ = _startpos__100_ in
          let xs000 = xs0000 in
          let _10 = _100 in
          let _1 =
            let xs00 = xs000 in
            let _1 = _10 in
            let _2 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 10271 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 947 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 10277 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2224 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, _2) )
# 10283 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10294 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10300 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs00000;
          MenhirLib.EngineTypes.startp = _startpos_xs00000_;
          MenhirLib.EngineTypes.endp = _endpos_xs00000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs00000 : (Parsetree.expression list) = Obj.magic xs00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs00000_ in
        let _endpos = _endpos_xs00000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_xs0000_ = _endpos_xs00000_ in
          let _startpos_xs0000_ = _startpos_xs00000_ in
          let xs0000 = xs00000 in
          let _1 =
            let xs000 = xs0000 in
            let _1 =
              let xs00 = xs000 in
              let es =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 10337 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 10343 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2551 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 10349 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2226 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_tuple(_1) )
# 10355 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs0000_ in
          let _startpos__1_ = _startpos_xs0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10366 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10372 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 10421 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2228 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, Some _2) )
# 10427 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10438 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10444 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2230 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, Some _2) )
# 10483 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10494 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10500 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 655 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10532 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3445 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10561 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10572 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10578 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10589 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10595 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 656 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10627 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3446 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10656 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10667 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10673 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10684 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10690 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 657 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10722 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3447 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10751 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10762 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10768 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10779 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10785 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 658 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10817 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3448 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10846 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10857 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10863 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10874 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10880 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = op0000;
            MenhirLib.EngineTypes.startp = _startpos_op0000_;
            MenhirLib.EngineTypes.endp = _endpos_op0000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let op0000 : (
# 659 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10912 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_op000_ = _endpos_op0000_ in
          let _startpos_op000_ = _startpos_op0000_ in
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let e20 = e200 in
          let op000 = op0000 in
          let e10 = e100 in
          let _1 =
            let _endpos_op00_ = _endpos_op000_ in
            let _startpos_op00_ = _startpos_op000_ in
            let e2 = e20 in
            let op00 = op000 in
            let e1 = e10 in
            let op =
              let _endpos_op0_ = _endpos_op00_ in
              let _startpos_op0_ = _startpos_op00_ in
              let op0 = op00 in
              let _1 =
                let op = op0 in
                
# 3449 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10941 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos_op0_ in
              let _startpos__1_ = _startpos_op0_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10952 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10958 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10969 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10975 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3450 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 11032 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11043 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11049 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11060 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11066 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3451 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 11123 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11134 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11140 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11151 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11157 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3452 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 11214 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11225 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11231 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11242 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11248 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3453 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 11305 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11316 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11322 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11333 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11339 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3454 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 11396 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11407 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11413 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11424 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11430 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3455 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 11487 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11498 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11504 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11515 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11521 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3456 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 11578 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11589 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11595 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11606 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11612 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3457 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 11669 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11680 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11686 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11697 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11703 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3458 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 11760 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11771 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11777 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11788 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11794 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3459 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 11851 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11862 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11868 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11879 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11885 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3460 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 11942 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11953 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11959 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11970 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11976 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3461 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 12033 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12044 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12050 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12061 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12067 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3462 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 12124 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12135 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12141 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12152 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12158 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3463 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 12215 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12226 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12232 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12243 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12249 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e200;
          MenhirLib.EngineTypes.startp = _startpos_e200_;
          MenhirLib.EngineTypes.endp = _endpos_e200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e100;
              MenhirLib.EngineTypes.startp = _startpos_e100_;
              MenhirLib.EngineTypes.endp = _endpos_e100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e200 : (Parsetree.expression) = Obj.magic e200 in
        let _10000 : unit = Obj.magic _10000 in
        let e100 : (Parsetree.expression) = Obj.magic e100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e100_ in
        let _endpos = _endpos_e200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos_e20_ = _endpos_e200_ in
          let _startpos_e10_ = _startpos_e100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let e20 = e200 in
          let _1000 = _10000 in
          let e10 = e100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let e2 = e20 in
            let _100 = _1000 in
            let e1 = e10 in
            let op =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3464 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 12306 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12317 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2232 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12323 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_e20_ in
          let _startpos__1_ = _startpos_e10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12334 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12340 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2234 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuminus ~oploc:_loc__1_ _1 _2 )
# 12383 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12394 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12400 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2236 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuplus ~oploc:_loc__1_ _1 _2 )
# 12443 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12454 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2144 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12460 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2146 "src/ocaml/preprocess/parser_raw.mly"
      ( expr_of_let_bindings ~loc:_sloc _1 (merloc _endpos__2_ _3) )
# 12500 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.expression) = Obj.magic body in
        let _3 : unit = Obj.magic _3 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _10 : (
# 661 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12539 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.expression) = let pbop_op =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12554 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_pbop_op_ = _startpos__10_ in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_pbop_op_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2148 "src/ocaml/preprocess/parser_raw.mly"
      ( let (pbop_pat, pbop_exp, rev_ands) = bindings in
        let ands = List.rev rev_ands in
        let pbop_loc = make_loc _sloc in
        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        mkexp ~loc:_sloc (Pexp_letop{ let_; ands; body}) )
# 12568 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__2_ = (_startpos__2_, _endpos__2_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2154 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;(merloc _endpos__2_ _3)])) )
# 12609 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12642 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 12656 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12667 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__100_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2156 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
# 12677 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12733 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2158 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
# 12742 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2160 "src/ocaml/preprocess/parser_raw.mly"
      ( array_set ~loc:_sloc _1 _4 _7 )
# 12806 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2162 "src/ocaml/preprocess/parser_raw.mly"
      ( string_set ~loc:_sloc _1 _4 _7 )
# 12870 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2164 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_set ~loc:_sloc _1 _4 _7 )
# 12934 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12990 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2166 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "[]<-")) _1 _4 _7 )
# 13002 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13058 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2168 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "()<-")) _1 _4 _7 )
# 13070 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13126 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2170 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "{}<-")) _1 _4 _7 )
# 13138 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13204 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2172 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3,"." ^ _4 ^ "[]<-")) _1 _6 _9 )
# 13218 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13284 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2174 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "()<-")) _1 _6 _9 )
# 13298 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13364 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2176 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "{}<-")) _1 _6 _9 )
# 13378 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2178 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.attr _1 _2 )
# 13409 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 3723 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 13427 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string Location.loc option) = 
# 3724 "src/ocaml/preprocess/parser_raw.mly"
                    ( Some _2 )
# 13458 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3734 "src/ocaml/preprocess/parser_raw.mly"
                                           ( (_2, _3) )
# 13501 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _12 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13552 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__12_ in
        let lid =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13566 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13579 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3108 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13589 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _12 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13634 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__12_ in
        let lid =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13648 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13661 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__10_ in
        let _1 =
          
# 3543 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 13669 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3108 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13679 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3711 "src/ocaml/preprocess/parser_raw.mly"
    ( mark_symbol_docs _sloc;
      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 13726 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params =
          
# 1932 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 13745 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1757 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 13751 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : unit = Obj.magic _30 in
        let xs000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs000 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params =
          let _3 = _30 in
          let xs00 = xs000 in
          let _1 = _10 in
          let params =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 13796 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 13802 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1934 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 13808 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1757 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 13814 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2509 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 13839 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2511 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _3 _1 )
# 13879 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2536 "src/ocaml/preprocess/parser_raw.mly"
      ( (merloc _endpos__1_ _2) )
# 13910 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.core_type) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2538 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint ((merloc _endpos__3_ _4), _2) )
# 13967 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 13978 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 13984 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2542 "src/ocaml/preprocess/parser_raw.mly"
      (
       let (l,o,p) = _1 in
       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
      )
# 14021 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let xs = xs0 in
          
# 2418 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14072 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2547 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 14081 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3220 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 14106 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label000;
                MenhirLib.EngineTypes.startp = _startpos_label000_;
                MenhirLib.EngineTypes.endp = _endpos_label000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.core_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let label000 : (string) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let _endpos__100_ = _endpos__1000_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let _100 = _1000 in
          let label00 = label000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let codomain = codomain0 in
            let _3 = _30 in
            let _10 = _100 in
            let label0 = label00 in
            let domain =
              let _endpos__1_ = _endpos__10_ in
              let _1 = _10 in
              
# 843 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 14166 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let label =
              let label = label0 in
              
# 3232 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 14174 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3226 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 14180 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 14191 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3228 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14197 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2000;
                MenhirLib.EngineTypes.startp = _startpos__2000_;
                MenhirLib.EngineTypes.endp = _endpos__2000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label000;
                  MenhirLib.EngineTypes.startp = _startpos_label000_;
                  MenhirLib.EngineTypes.endp = _endpos_label000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.core_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let _2000 : unit = Obj.magic _2000 in
        let label000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14242 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_label00_ = _startpos_label000_ in
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let _endpos__100_ = _endpos__1000_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let _100 = _1000 in
          let _200 = _2000 in
          let label00 = label000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let codomain = codomain0 in
            let _3 = _30 in
            let _10 = _100 in
            let _20 = _200 in
            let label0 = label00 in
            let domain =
              let _endpos__1_ = _endpos__10_ in
              let _1 = _10 in
              
# 843 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 14269 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let label =
              let _2 = _20 in
              let label = label0 in
              
# 3234 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 14278 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3226 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 14284 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos_label00_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 14295 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3228 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14301 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = codomain00;
          MenhirLib.EngineTypes.startp = _startpos_codomain00_;
          MenhirLib.EngineTypes.endp = _endpos_codomain00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain00 : (Parsetree.core_type) = Obj.magic codomain00 in
        let _300 : unit = Obj.magic _300 in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_codomain00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_codomain0_ = _endpos_codomain00_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let codomain0 = codomain00 in
          let _30 = _300 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let codomain = codomain0 in
            let _3 = _30 in
            let _10 = _100 in
            let domain =
              let _endpos__1_ = _endpos__10_ in
              let _1 = _10 in
              
# 843 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 14353 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let label =
              
# 3236 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 14360 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3226 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 14366 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain0_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 14377 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3228 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14383 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (string Location.loc * Parsetree.module_type option) = let x =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1189 "src/ocaml/preprocess/parser_raw.mly"
                            ("*")
# 14422 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14433 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1190 "src/ocaml/preprocess/parser_raw.mly"
      ( x, None )
# 14439 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string Location.loc * Parsetree.module_type option) = let x =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14495 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1193 "src/ocaml/preprocess/parser_raw.mly"
      ( x, Some mty )
# 14501 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14522 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string) = 
# 1199 "src/ocaml/preprocess/parser_raw.mly"
      ( x )
# 14530 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 1202 "src/ocaml/preprocess/parser_raw.mly"
      ( "_" )
# 14555 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((string Location.loc * Parsetree.module_type option) list) = 
# 1182 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14580 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3028 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],None) )
# 14598 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3029 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,None) )
# 14629 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3031 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,Some _4) )
# 14672 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3033 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 14703 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14750 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__11_ in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14764 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2976 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14778 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14819 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__11_ in
        let cid =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14833 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__10_ in
        let _1 =
          
# 3543 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 14841 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2976 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14855 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _12;
                MenhirLib.EngineTypes.startp = _startpos__12_;
                MenhirLib.EngineTypes.endp = _endpos__12_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let _20 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _20 in
        let _12 : unit = Obj.magic _12 in
        let _11 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14920 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _11 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _13 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14935 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 14948 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 929 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14954 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2892 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14960 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let kind_priv_manifest =
          let _2 = _20 in
          let _1 = _12 in
          
# 2927 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 14969 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14982 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag =
          
# 3563 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 14989 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14997 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2864 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15013 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _14;
          MenhirLib.EngineTypes.startp = _startpos__14_;
          MenhirLib.EngineTypes.endp = _endpos__14_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _13;
                MenhirLib.EngineTypes.startp = _startpos__13_;
                MenhirLib.EngineTypes.endp = _endpos__13_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _12;
                  MenhirLib.EngineTypes.startp = _startpos__12_;
                  MenhirLib.EngineTypes.endp = _endpos__12_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _14 : (Parsetree.attributes) = Obj.magic _14 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let _20 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _20 in
        let _13 : unit = Obj.magic _13 in
        let _12 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15083 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _12 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _11 : unit = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__14_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _14 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15099 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__14_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 15112 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 929 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 15118 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2892 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15124 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let kind_priv_manifest =
          let _2 = _20 in
          let _1 = _13 in
          
# 2927 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 15133 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15146 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 3564 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 15159 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15167 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2864 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15183 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _11 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15242 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _11 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15257 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 15270 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 929 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 15276 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2892 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15282 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15295 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag =
          
# 3559 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 15302 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15310 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2864 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15326 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _12;
                MenhirLib.EngineTypes.startp = _startpos__12_;
                MenhirLib.EngineTypes.endp = _endpos__12_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _12 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15390 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _12 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _11 : unit = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _13 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15406 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let cstrs =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 15419 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 929 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 15425 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2892 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15431 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15444 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag =
          let _1 = _11 in
          
# 3560 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 15452 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15460 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2864 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15476 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15497 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3420 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 15505 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15526 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3421 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 15534 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 821 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.structure)
# 15565 "src/ocaml/preprocess/parser_raw.ml"
        ) = 
# 1100 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15569 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.signature) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.signature)
# 15600 "src/ocaml/preprocess/parser_raw.ml"
        ) = 
# 1106 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15604 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3737 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( (_2, _3) )
# 15647 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15691 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.label_declaration) = let _5 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15702 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _4 =
          let _1 = _10 in
          
# 3173 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15711 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 15723 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15734 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__100_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3050 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Type.field _2 _4 ~mut:_1 ~attrs:_5 ~loc:(make_loc _sloc) ~info )
# 15748 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _6 : unit = Obj.magic _6 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15804 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.label_declaration) = let _7 =
          let _1 = _12 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15815 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__12_ in
        let _5 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15824 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _4 =
          let _1 = _10 in
          
# 3173 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15833 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 15845 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15856 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__100_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3055 "src/ocaml/preprocess/parser_raw.mly"
      ( let info =
          match rhs_info _endpos__5_ with
          | Some _ as info_before_semi -> info_before_semi
          | None -> symbol_info _endpos
       in
       Type.field _2 _4 ~mut:_1 ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info )
# 15874 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3044 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 15899 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3045 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 15924 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.label_declaration list) = 
# 3046 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 :: _2 )
# 15955 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15976 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15995 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2127 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16006 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2119 "src/ocaml/preprocess/parser_raw.mly"
      ( x )
# 16012 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cty;
          MenhirLib.EngineTypes.startp = _startpos_cty_;
          MenhirLib.EngineTypes.endp = _endpos_cty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cty : (Parsetree.core_type) = Obj.magic cty in
        let _2 : unit = Obj.magic _2 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16045 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_cty_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16064 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2127 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16075 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_x_ = _startpos__100_ in
        let _endpos = _endpos_cty_ in
        let _symbolstartpos = _startpos_x_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2121 "src/ocaml/preprocess/parser_raw.mly"
      ( let lab, pat = x in
        lab,
        mkpat ~loc:_sloc (Ppat_constraint (pat, cty)) )
# 16087 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16108 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3489 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 16116 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16147 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3490 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 16157 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2404 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, _1) )
# 16182 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 666 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16209 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2406 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, _2) )
# 16217 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16243 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2408 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Labelled label, mkexpvar ~loc label) )
# 16254 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16280 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2411 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Optional label, mkexpvar ~loc label) )
# 16291 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 696 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16318 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2414 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _2) )
# 16326 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Parsetree.expression option) = Obj.magic _10 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
          let _1 = _10 in
          
# 2115 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16377 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2089 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _3), _4, snd _3) )
# 16383 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16409 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__100_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16429 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2127 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16440 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2091 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _2), None, snd _2) )
# 16446 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Parsetree.expression option) = Obj.magic _10 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 696 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16491 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
          let _1 = _10 in
          
# 2115 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16501 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2093 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _4, _3) )
# 16507 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 696 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16534 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2095 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, None, _2) )
# 16542 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2097 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _3), None, snd _3) )
# 16585 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16611 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__100_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16631 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2127 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16642 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2099 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 16648 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 666 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16675 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2101 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, None, _2) )
# 16683 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2103 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, None, _1) )
# 16708 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2421 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16746 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2425 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _2) )
# 16752 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2421 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16802 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2427 "src/ocaml/preprocess/parser_raw.mly"
      ( let v = _1 in (* PR#7344 *)
        let t =
          match _2 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__1_, _endpos__2_) in
        (ghpat ~loc:patloc (Ppat_constraint(v, typ)),
         mkexp_constraint ~loc:_sloc _4 _2) )
# 16823 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs000;
                  MenhirLib.EngineTypes.startp = _startpos_xs000_;
                  MenhirLib.EngineTypes.endp = _endpos_xs000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs000 : (string Location.loc list) = Obj.magic xs000 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _3 =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 16890 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 947 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 16896 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3155 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16902 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__3_ = _startpos_xs000_ in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2421 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16916 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        
# 2443 "src/ocaml/preprocess/parser_raw.mly"
      ( let typloc = (_startpos__3_, _endpos__5_) in
        let patloc = (_startpos__1_, _endpos__5_) in
        (ghpat ~loc:patloc
           (Ppat_constraint(_1, ghtyp ~loc:typloc (Ptyp_poly(_3,_5)))),
         _7) )
# 16927 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs0;
                  MenhirLib.EngineTypes.startp = _startpos_xs0_;
                  MenhirLib.EngineTypes.endp = _endpos_xs0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _4 =
          let xs = xs0 in
          
# 2418 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 16996 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2421 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17009 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2449 "src/ocaml/preprocess/parser_raw.mly"
      ( let exp, poly =
          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
        let loc = (_startpos__1_, _endpos__6_) in
        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
# 17022 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2454 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _3) )
# 17059 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2456 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__1_, _endpos__3_) in
        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
# 17109 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _110;
          MenhirLib.EngineTypes.startp = _startpos__110_;
          MenhirLib.EngineTypes.endp = _endpos__110_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body0;
            MenhirLib.EngineTypes.startp = _startpos_body0_;
            MenhirLib.EngineTypes.endp = _endpos_body0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = rec_flag0;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag0_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext0;
                  MenhirLib.EngineTypes.startp = _startpos_ext0_;
                  MenhirLib.EngineTypes.endp = _endpos_ext0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _12;
                    MenhirLib.EngineTypes.startp = _startpos__12_;
                    MenhirLib.EngineTypes.endp = _endpos__12_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let body0 : (Parsetree.pattern * Parsetree.expression) = Obj.magic body0 in
        let rec_flag0 : (Asttypes.rec_flag) = Obj.magic rec_flag0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let ext0 : (string Location.loc option) = Obj.magic ext0 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__110_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let _endpos__11_ = _endpos__110_ in
          let _startpos__1_ = _startpos__12_ in
          let _11 = _110 in
          let body = body0 in
          let rec_flag = rec_flag0 in
          let _10 = _100 in
          let ext = ext0 in
          let _1 = _12 in
          let attrs2 =
            let _1 = _11 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17175 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__11_ in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17184 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2472 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17196 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2462 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17202 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2463 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 17233 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _110;
          MenhirLib.EngineTypes.startp = _startpos__110_;
          MenhirLib.EngineTypes.endp = _endpos__110_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body0;
            MenhirLib.EngineTypes.startp = _startpos_body0_;
            MenhirLib.EngineTypes.endp = _endpos_body0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = rec_flag0;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag0_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _12;
                  MenhirLib.EngineTypes.startp = _startpos__12_;
                  MenhirLib.EngineTypes.endp = _endpos__12_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let body0 : (Parsetree.pattern * Parsetree.expression) = Obj.magic body0 in
        let rec_flag0 : (Asttypes.rec_flag) = Obj.magic rec_flag0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__110_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let _endpos__11_ = _endpos__110_ in
          let _startpos__1_ = _startpos__12_ in
          let _11 = _110 in
          let body = body0 in
          let rec_flag = rec_flag0 in
          let _10 = _100 in
          let _1 = _12 in
          let attrs2 =
            let _1 = _11 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17292 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__11_ in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17301 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let ext =
            
# 3727 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 17308 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2472 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17320 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2462 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17326 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120;
          MenhirLib.EngineTypes.startp = _startpos__120_;
          MenhirLib.EngineTypes.endp = _endpos__120_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body0;
            MenhirLib.EngineTypes.startp = _startpos_body0_;
            MenhirLib.EngineTypes.endp = _endpos_body0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = rec_flag0;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag0_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _13;
                      MenhirLib.EngineTypes.startp = _startpos__13_;
                      MenhirLib.EngineTypes.endp = _endpos__13_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let body0 : (Parsetree.pattern * Parsetree.expression) = Obj.magic body0 in
        let rec_flag0 : (Asttypes.rec_flag) = Obj.magic rec_flag0 in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _200 : (string Location.loc) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos__120_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__12_ = _endpos__120_ in
          let _startpos__10_ = _startpos__100_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let body = body0 in
          let rec_flag = rec_flag0 in
          let _11 = _110 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17401 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let attrs1 =
            let _1 = _11 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17410 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let ext =
            let _endpos__2_ = _endpos__20_ in
            let _startpos__1_ = _startpos__10_ in
            let _2 = _20 in
            let _1 = _10 in
            let _endpos = _endpos__2_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 3728 "src/ocaml/preprocess/parser_raw.mly"
                    ( not_expecting _loc "extension"; None )
# 17424 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2472 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17436 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2462 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17442 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2463 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 17473 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2131 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 17498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2133 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_1, _3) )
# 17545 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 17556 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2134 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 17562 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let pat =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2421 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17600 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2489 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 17606 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pat;
                  MenhirLib.EngineTypes.startp = _startpos_pat_;
                  MenhirLib.EngineTypes.endp = _endpos_pat_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _4 : unit = Obj.magic _4 in
        let typ : (Parsetree.core_type) = Obj.magic typ in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2491 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos_pat_, _endpos_typ_) in
        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) )
# 17656 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pat;
              MenhirLib.EngineTypes.startp = _startpos_pat_;
              MenhirLib.EngineTypes.endp = _endpos_pat_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2494 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 17693 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_body_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = 
# 2498 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp = body in
        let_pat, let_exp, [] )
# 17719 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _10 : (
# 662 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 17751 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _10 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_bindings_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = let pbop_op =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17767 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_bindings_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2501 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp, rev_ands = bindings in
        let pbop_pat, pbop_exp = body in
        let pbop_loc = make_loc _sloc in
        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        let_pat, let_exp, and_ :: rev_ands )
# 17780 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 17798 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body0;
              MenhirLib.EngineTypes.startp = _startpos_body0_;
              MenhirLib.EngineTypes.endp = _endpos_body0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params0;
                  MenhirLib.EngineTypes.startp = _startpos_params0_;
                  MenhirLib.EngineTypes.endp = _endpos_params0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = virt0;
                    MenhirLib.EngineTypes.startp = _startpos_virt0_;
                    MenhirLib.EngineTypes.endp = _endpos_virt0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100;
                      MenhirLib.EngineTypes.startp = _startpos__100_;
                      MenhirLib.EngineTypes.endp = _endpos__100_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _13;
                        MenhirLib.EngineTypes.startp = _startpos__13_;
                        MenhirLib.EngineTypes.endp = _endpos__13_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let body0 : (Parsetree.class_expr) = Obj.magic body0 in
        let _110 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 17857 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let virt0 : (Asttypes.virtual_flag) = Obj.magic virt0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let body = body0 in
          let _11 = _110 in
          let params = params0 in
          let virt = virt0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17883 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17897 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17905 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1735 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
  )
# 17920 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 17926 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_description list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 17944 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cty0;
              MenhirLib.EngineTypes.startp = _startpos_cty0_;
              MenhirLib.EngineTypes.endp = _endpos_cty0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _60;
                MenhirLib.EngineTypes.startp = _startpos__60_;
                MenhirLib.EngineTypes.endp = _endpos__60_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0;
                    MenhirLib.EngineTypes.startp = _startpos_params0_;
                    MenhirLib.EngineTypes.endp = _endpos_params0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt0;
                      MenhirLib.EngineTypes.startp = _startpos_virt0_;
                      MenhirLib.EngineTypes.endp = _endpos_virt0_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13;
                          MenhirLib.EngineTypes.startp = _startpos__13_;
                          MenhirLib.EngineTypes.endp = _endpos__13_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_description list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let cty0 : (Parsetree.class_type) = Obj.magic cty0 in
        let _60 : unit = Obj.magic _60 in
        let _110 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18009 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let virt0 : (Asttypes.virtual_flag) = Obj.magic virt0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_description list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let cty = cty0 in
          let _6 = _60 in
          let _11 = _110 in
          let params = params0 in
          let virt = virt0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18036 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18050 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18058 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2026 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18073 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18079 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18097 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = csig0;
              MenhirLib.EngineTypes.startp = _startpos_csig0_;
              MenhirLib.EngineTypes.endp = _endpos_csig0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _60;
                MenhirLib.EngineTypes.startp = _startpos__60_;
                MenhirLib.EngineTypes.endp = _endpos__60_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0;
                    MenhirLib.EngineTypes.startp = _startpos_params0_;
                    MenhirLib.EngineTypes.endp = _endpos_params0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt0;
                      MenhirLib.EngineTypes.startp = _startpos_virt0_;
                      MenhirLib.EngineTypes.endp = _endpos_virt0_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13;
                          MenhirLib.EngineTypes.startp = _startpos__13_;
                          MenhirLib.EngineTypes.endp = _endpos__13_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let csig0 : (Parsetree.class_type) = Obj.magic csig0 in
        let _60 : unit = Obj.magic _60 in
        let _110 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18162 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let virt0 : (Asttypes.virtual_flag) = Obj.magic virt0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let csig = csig0 in
          let _6 = _60 in
          let _11 = _110 in
          let params = params0 in
          let virt = virt0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18189 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18203 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18211 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2065 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18226 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18232 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_binding list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18250 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body0;
              MenhirLib.EngineTypes.startp = _startpos_body0_;
              MenhirLib.EngineTypes.endp = _endpos_body0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _13;
                    MenhirLib.EngineTypes.startp = _startpos__13_;
                    MenhirLib.EngineTypes.endp = _endpos__13_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_binding list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let body0 : (Parsetree.module_expr) = Obj.magic body0 in
        let _110 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18299 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _110 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_binding list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let body = body0 in
          let _11 = _110 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18321 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let uid =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18335 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18343 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1416 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Mb.mk uid body ~attrs ~loc ~text ~docs
  )
# 18358 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18364 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18382 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = mty0;
              MenhirLib.EngineTypes.startp = _startpos_mty0_;
              MenhirLib.EngineTypes.endp = _endpos_mty0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _13;
                      MenhirLib.EngineTypes.startp = _startpos__13_;
                      MenhirLib.EngineTypes.endp = _endpos__13_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let mty0 : (Parsetree.module_type) = Obj.magic mty0 in
        let _40 : unit = Obj.magic _40 in
        let _110 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18437 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _110 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let mty = mty0 in
          let _4 = _40 in
          let _11 = _110 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18460 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let uid =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18474 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18482 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1693 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let loc = make_loc _sloc in
    let text = symbol_text _symbolstartpos in
    Md.mk uid mty ~attrs ~loc ~text ~docs
  )
# 18497 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18503 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18521 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18552 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18570 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0000;
              MenhirLib.EngineTypes.startp = _startpos_xs0000_;
              MenhirLib.EngineTypes.endp = _endpos_xs0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = kind_priv_manifest0;
                MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest0_;
                MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110;
                  MenhirLib.EngineTypes.startp = _startpos__110_;
                  MenhirLib.EngineTypes.endp = _endpos__110_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0;
                    MenhirLib.EngineTypes.startp = _startpos_params0_;
                    MenhirLib.EngineTypes.endp = _endpos_params0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100;
                      MenhirLib.EngineTypes.startp = _startpos__100_;
                      MenhirLib.EngineTypes.endp = _endpos__100_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _13;
                        MenhirLib.EngineTypes.startp = _startpos__13_;
                        MenhirLib.EngineTypes.endp = _endpos__13_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let xs0000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs0000 in
        let kind_priv_manifest0 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest0 in
        let _110 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18630 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _13 : unit = Obj.magic _13 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__13_ in
          let _12 = _120 in
          let xs000 = xs0000 in
          let kind_priv_manifest = kind_priv_manifest0 in
          let _11 = _110 in
          let params = params0 in
          let _10 = _100 in
          let _1 = _13 in
          let attrs2 =
            let _1 = _12 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18655 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__12_ in
          let cstrs =
            let xs00 = xs000 in
            let _1 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 18668 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 929 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 18674 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2892 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18680 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18693 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18701 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2881 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 18717 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18723 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18741 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _130;
            MenhirLib.EngineTypes.startp = _startpos__130_;
            MenhirLib.EngineTypes.endp = _endpos__130_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0000;
              MenhirLib.EngineTypes.startp = _startpos_xs0000_;
              MenhirLib.EngineTypes.endp = _endpos_xs0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _120;
                  MenhirLib.EngineTypes.startp = _startpos__120_;
                  MenhirLib.EngineTypes.endp = _endpos__120_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = params0;
                      MenhirLib.EngineTypes.startp = _startpos_params0_;
                      MenhirLib.EngineTypes.endp = _endpos_params0_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _14;
                          MenhirLib.EngineTypes.startp = _startpos__14_;
                          MenhirLib.EngineTypes.endp = _endpos__14_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _130 : (Parsetree.attributes) = Obj.magic _130 in
        let xs0000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs0000 in
        let _200 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _200 in
        let _120 : unit = Obj.magic _120 in
        let _110 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18807 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _110 in
        let params0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _14 : unit = Obj.magic _14 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__14_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let _endpos__13_ = _endpos__130_ in
          let _endpos__11_ = _endpos__110_ in
          let _startpos__11_ = _startpos__110_ in
          let _startpos__1_ = _startpos__14_ in
          let _13 = _130 in
          let xs000 = xs0000 in
          let _20 = _200 in
          let _12 = _120 in
          let _11 = _110 in
          let params = params0 in
          let _10 = _100 in
          let _1 = _14 in
          let attrs2 =
            let _1 = _13 in
            
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18833 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__13_ in
          let cstrs =
            let xs00 = xs000 in
            let _1 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 18846 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 929 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 18852 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2892 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18858 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let kind_priv_manifest =
            let _2 = _20 in
            let _1 = _12 in
            
# 2927 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 18867 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let _endpos__1_ = _endpos__11_ in
            let _startpos__1_ = _startpos__11_ in
            let _1 = _11 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18880 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18888 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2881 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 18904 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18910 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18928 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 18959 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.signature_item list list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 18977 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _startpos = _startpos__1_ in
            
# 855 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos )
# 19015 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1554 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19021 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19027 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _100 : (Parsetree.signature_item) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _startpos = _startpos__1_ in
            
# 853 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos @ [_1] )
# 19065 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1554 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19071 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19077 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 19095 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let ys =
              let items =
                
# 915 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 19134 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1299 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 19140 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _startpos = _startpos__1_ in
              
# 851 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 19150 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( xs @ ys )
# 19156 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1315 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19162 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19168 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000000;
            MenhirLib.EngineTypes.startp = _startpos__100000000_;
            MenhirLib.EngineTypes.endp = _endpos__100000000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e0000000;
              MenhirLib.EngineTypes.startp = _startpos_e0000000_;
              MenhirLib.EngineTypes.endp = _endpos_e0000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _1000 : unit = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos_e000000_ = _startpos_e0000000_ in
          let _endpos__10000000_ = _endpos__100000000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _100 = _1000 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let _endpos__1000000_ = _endpos__10000000_ in
            let _startpos__10_ = _startpos__100_ in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let _10 = _100 in
            let ys =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _endpos__100000_ = _endpos__1000000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let items =
                let _startpos_e000_ = _startpos_e0000_ in
                let _endpos__10000_ = _endpos__100000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _endpos__1000_ = _endpos__10000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _startpos_e0_ = _startpos_e00_ in
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19249 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      
# 1306 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 19255 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e0_ in
                    let _startpos = _startpos__1_ in
                    
# 849 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19263 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos__1_ = _endpos__1000_ in
                  let _startpos__1_ = _startpos_e00_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 868 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 19274 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 917 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 19280 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1299 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 19286 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _startpos = _startpos__1_ in
              
# 851 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 19296 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( xs @ ys )
# 19302 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1315 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19308 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19314 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _100 : (Parsetree.structure_item) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _startpos = _startpos__1_ in
            
# 849 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19352 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1315 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19358 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19364 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_field list list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 19382 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_field list list) = Obj.magic xs in
        let _10 : (Parsetree.class_type_field) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_field list list) = let x =
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _startpos = _startpos__1_ in
          
# 863 "src/ocaml/preprocess/parser_raw.mly"
  ( text_csig _startpos @ [_1] )
# 19417 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19423 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_field list list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 19441 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_field list list) = Obj.magic xs in
        let _10 : (Parsetree.class_field) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_field list list) = let x =
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _startpos = _startpos__1_ in
          
# 861 "src/ocaml/preprocess/parser_raw.mly"
  ( text_cstr _startpos @ [_1] )
# 19476 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19482 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 19500 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _10 : (Parsetree.structure_item) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _startpos = _startpos__1_ in
          
# 849 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19535 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19541 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.toplevel_phrase list list) = 
# 211 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [] )
# 19559 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            let x =
              let _1 =
                
# 915 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 19596 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1145 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19602 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 19608 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1157 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19614 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19620 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000000;
            MenhirLib.EngineTypes.startp = _startpos__100000000_;
            MenhirLib.EngineTypes.endp = _endpos__100000000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e0000000;
              MenhirLib.EngineTypes.startp = _startpos_e0000000_;
              MenhirLib.EngineTypes.endp = _endpos_e0000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _startpos_e000000_ = _startpos_e0000000_ in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _10 = _100 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let _1 = _10 in
            let x =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let _1 =
                let _startpos_e000_ = _startpos_e0000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19693 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      
# 1306 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 19699 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    
# 859 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 19705 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e00_ in
                  let _startpos = _startpos__1_ in
                  
# 857 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 19713 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 917 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 19719 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1145 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19725 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 19731 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1157 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19737 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19743 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1000 : (Parsetree.structure_item) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 859 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 19782 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _startpos = _startpos__1_ in
            
# 857 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 19790 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1157 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19796 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19802 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1000 : (Parsetree.toplevel_phrase) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 868 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 19848 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _startpos = _startpos__1_ in
            
# 857 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 19856 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1157 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19862 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 19868 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = opat0;
          MenhirLib.EngineTypes.startp = _startpos_opat0_;
          MenhirLib.EngineTypes.endp = _endpos_opat0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = octy0;
            MenhirLib.EngineTypes.startp = _startpos_octy0_;
            MenhirLib.EngineTypes.endp = _endpos_octy0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_opat0_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 19906 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19926 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2770 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 19945 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1084 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 19951 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = opat0;
            MenhirLib.EngineTypes.startp = _startpos_opat0_;
            MenhirLib.EngineTypes.endp = _endpos_opat0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = octy0;
              MenhirLib.EngineTypes.startp = _startpos_octy0_;
              MenhirLib.EngineTypes.endp = _endpos_octy0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 19996 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20016 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2770 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20035 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1084 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 20041 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = y;
            MenhirLib.EngineTypes.startp = _startpos_y_;
            MenhirLib.EngineTypes.endp = _endpos_y_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = opat0;
                MenhirLib.EngineTypes.startp = _startpos_opat0_;
                MenhirLib.EngineTypes.endp = _endpos_opat0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = octy0;
                  MenhirLib.EngineTypes.startp = _startpos_octy0_;
                  MenhirLib.EngineTypes.endp = _endpos_octy0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit option) = Obj.magic _4 in
        let y : unit = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__4_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20110 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2770 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20129 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1086 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], Some y )
# 20135 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = opat0;
              MenhirLib.EngineTypes.startp = _startpos_opat0_;
              MenhirLib.EngineTypes.endp = _endpos_opat0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = octy0;
                MenhirLib.EngineTypes.startp = _startpos_octy0_;
                MenhirLib.EngineTypes.endp = _endpos_octy0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let opat0 : (Parsetree.pattern option) = Obj.magic opat0 in
        let octy0 : (Parsetree.core_type option) = Obj.magic octy0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_tail_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let _endpos_opat_ = _endpos_opat0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let opat = opat0 in
          let octy = octy0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20198 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2770 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20217 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1090 "src/ocaml/preprocess/parser_raw.mly"
    ( let xs, y = tail in
      x :: xs, y )
# 20224 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _4 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Ast_helper.let_bindings) = let _5 =
          let _1 = _10 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20281 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__10_ in
        let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20293 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 20299 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc = (_startpos, _endpos) in
        
# 3761 "src/ocaml/preprocess/parser_raw.mly"
      ( let (ext, attr) = _2 in
        mklbs ~loc:_loc ext _3 (mklb ~loc:_loc__4_ true _4 (attr@_5)) )
# 20310 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast_helper.let_bindings) = 
# 3765 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20335 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 3766 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 20366 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = 
# 2527 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_ _3) )
# 20403 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.case) = 
# 2529 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 ~guard:(merloc _endpos__2_ _3) (merloc _endpos__4_ _5) )
# 20452 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2531 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_
                       (Exp.unreachable ~loc:(make_loc _loc__3_) ())) )
# 20491 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _120;
            MenhirLib.EngineTypes.startp = _startpos__120_;
            MenhirLib.EngineTypes.endp = _endpos__120_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _101;
                  MenhirLib.EngineTypes.startp = _startpos__101_;
                  MenhirLib.EngineTypes.endp = _endpos__101_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1000;
                      MenhirLib.EngineTypes.startp = _startpos__1000_;
                      MenhirLib.EngineTypes.endp = _endpos__1000_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let _50 : unit = Obj.magic _50 in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _101 : (Parsetree.core_type) = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20548 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _12 = _120 in
          let _5 = _50 in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _100 = _1000 in
          let _6 =
            let _1 = _12 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20569 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__12_ in
          let _4 =
            let _1 = _11 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20578 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__11_ in
          let _3 =
            let _1 = _10 in
            
# 3173 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20587 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20599 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20610 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3383 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 20626 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3364 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 20632 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty0;
              MenhirLib.EngineTypes.startp = _startpos_ty0_;
              MenhirLib.EngineTypes.endp = _endpos_ty0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty0_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos_ty_ = _endpos_ty0_ in
          let _startpos_ty_ = _startpos_ty0_ in
          let ty = ty0 in
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3394 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 20676 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3364 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 20682 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120;
          MenhirLib.EngineTypes.startp = _startpos__120_;
          MenhirLib.EngineTypes.endp = _endpos__120_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _101;
                MenhirLib.EngineTypes.startp = _startpos__101_;
                MenhirLib.EngineTypes.endp = _endpos__101_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120 : (Parsetree.attributes) = Obj.magic _120 in
        let _50 : unit = Obj.magic _50 in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _101 : (Parsetree.core_type) = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20733 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__120_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos__12_ = _endpos__120_ in
          let _endpos__11_ = _endpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _12 = _120 in
          let _5 = _50 in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _100 = _1000 in
          let _6 =
            let _1 = _12 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20754 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__12_ in
          let _4 =
            let _1 = _11 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20763 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__11_ in
          let _3 =
            let _1 = _10 in
            
# 3173 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20772 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20784 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20795 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3383 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 20811 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3367 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 20817 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty0;
            MenhirLib.EngineTypes.startp = _startpos_ty0_;
            MenhirLib.EngineTypes.endp = _endpos_ty0_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty0_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos_ty_ = _endpos_ty0_ in
          let _startpos_ty_ = _startpos_ty0_ in
          let ty = ty0 in
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3394 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 20855 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3367 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 20861 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _110;
          MenhirLib.EngineTypes.startp = _startpos__110_;
          MenhirLib.EngineTypes.endp = _endpos__110_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _101;
            MenhirLib.EngineTypes.startp = _startpos__101_;
            MenhirLib.EngineTypes.endp = _endpos__101_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _110 : (Parsetree.attributes) = Obj.magic _110 in
        let _101 : (Parsetree.core_type) = Obj.magic _101 in
        let _20 : unit = Obj.magic _20 in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20900 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__110_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos__11_ = _endpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _11 = _110 in
          let _10 = _101 in
          let _2 = _20 in
          let _100 = _1000 in
          let _4 =
            let _1 = _11 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20918 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__11_ in
          let _3 =
            let _1 = _10 in
            
# 3173 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20927 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20939 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20950 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3376 "src/ocaml/preprocess/parser_raw.mly"
    ( let info = symbol_info _endpos in
      let attrs = add_info_attrs info _4 in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 20962 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3370 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 20968 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty0;
          MenhirLib.EngineTypes.startp = _startpos_ty0_;
          MenhirLib.EngineTypes.endp = _endpos_ty0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty0 : (Parsetree.core_type) = Obj.magic ty0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty0_ in
        let _endpos = _endpos_ty0_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos_ty_ = _endpos_ty0_ in
          let _startpos_ty_ = _startpos_ty0_ in
          let ty = ty0 in
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3394 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21000 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3370 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21006 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 3372 "src/ocaml/preprocess/parser_raw.mly"
      ( [], Open )
# 21031 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = private_;
                MenhirLib.EngineTypes.startp = _startpos_private__;
                MenhirLib.EngineTypes.endp = _endpos_private__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21074 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let private_ : (Asttypes.private_flag) = Obj.magic private_ in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let ty =
          let _1 = _11 in
          
# 3169 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21087 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let label =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21099 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21110 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21118 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          
# 3619 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21125 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1873 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, private_, Cfk_virtual ty), attrs )
# 21131 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21168 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21185 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21196 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21204 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21211 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1875 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21220 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21262 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21280 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21291 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21299 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 21307 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1875 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21316 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21371 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _11 in
          
# 3169 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21384 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__11_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21397 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21408 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21416 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21423 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1881 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 21432 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _12 : (Parsetree.core_type) = Obj.magic _12 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21492 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _12 in
          
# 3169 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21506 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__12_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21519 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21530 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21538 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 21546 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1881 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 21555 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs0;
                  MenhirLib.EngineTypes.startp = _startpos_xs0_;
                  MenhirLib.EngineTypes.endp = _endpos_xs0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _12;
                            MenhirLib.EngineTypes.startp = _startpos__12_;
                            MenhirLib.EngineTypes.endp = _endpos__12_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21628 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 =
          let xs = xs0 in
          
# 2418 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 21641 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__7_ = _startpos_xs0_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21654 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21665 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _12 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21674 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__12_ in
        let _startpos__2_ = _startpos__12_ in
        let _1 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21683 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__0_ in
        let _startpos__1_ = _endpos__0_ in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1887 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 21712 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs0;
                  MenhirLib.EngineTypes.startp = _startpos_xs0_;
                  MenhirLib.EngineTypes.endp = _endpos_xs0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _13;
                            MenhirLib.EngineTypes.startp = _startpos__13_;
                            MenhirLib.EngineTypes.endp = _endpos__13_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _12;
                              MenhirLib.EngineTypes.startp = _startpos__12_;
                              MenhirLib.EngineTypes.endp = _endpos__12_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21790 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 =
          let xs = xs0 in
          
# 2418 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 21804 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__7_ = _startpos_xs0_ in
        let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21817 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21828 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _13 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21837 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__13_ in
        let _startpos__2_ = _startpos__13_ in
        let _1 =
          let _1 = _12 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 21847 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__12_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1887 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 21876 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21897 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 21905 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21936 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3502 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 21946 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Longident.t) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3504 "src/ocaml/preprocess/parser_raw.mly"
      ( lapply ~loc:_sloc _1 _3 )
# 21992 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22013 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3497 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 22021 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22052 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3498 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 22062 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1375 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 22093 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me00;
          MenhirLib.EngineTypes.startp = _startpos_me00_;
          MenhirLib.EngineTypes.endp = _endpos_me00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = mty00;
              MenhirLib.EngineTypes.startp = _startpos_mty00_;
              MenhirLib.EngineTypes.endp = _endpos_mty00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let me00 : (Parsetree.module_expr) = Obj.magic me00 in
        let _300 : unit = Obj.magic _300 in
        let mty00 : (Parsetree.module_type) = Obj.magic mty00 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_me00_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_me0_ = _endpos_me00_ in
          let _startpos__10_ = _startpos__100_ in
          let me0 = me00 in
          let _30 = _300 in
          let mty0 = mty00 in
          let _10 = _100 in
          let _1 =
            let me = me0 in
            let _3 = _30 in
            let mty = mty0 in
            let _1 = _10 in
            
# 1378 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_constraint(me, mty) )
# 22148 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_me0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 888 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22159 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1382 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22165 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body00;
          MenhirLib.EngineTypes.startp = _startpos_body00_;
          MenhirLib.EngineTypes.endp = _endpos_body00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg00;
            MenhirLib.EngineTypes.startp = _startpos_arg00_;
            MenhirLib.EngineTypes.endp = _endpos_arg00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body00 : (Parsetree.module_expr) = Obj.magic body00 in
        let arg00 : (string Location.loc * Parsetree.module_type option) = Obj.magic arg00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg00_ in
        let _endpos = _endpos_body00_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_body0_ = _endpos_body00_ in
          let _startpos_arg0_ = _startpos_arg00_ in
          let body0 = body00 in
          let arg0 = arg00 in
          let _1 =
            let body = body0 in
            let arg = arg0 in
            
# 1380 "src/ocaml/preprocess/parser_raw.mly"
        ( let (x, mty) = arg in
          Pmod_functor(x, mty, body) )
# 22205 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_body0_ in
          let _startpos__1_ = _startpos_arg0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 888 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22216 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1382 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22222 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = 
# 1619 "src/ocaml/preprocess/parser_raw.mly"
      ( mty )
# 22253 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = body00;
          MenhirLib.EngineTypes.startp = _startpos_body00_;
          MenhirLib.EngineTypes.endp = _endpos_body00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg00;
            MenhirLib.EngineTypes.startp = _startpos_arg00_;
            MenhirLib.EngineTypes.endp = _endpos_arg00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body00 : (Parsetree.module_type) = Obj.magic body00 in
        let arg00 : (string Location.loc * Parsetree.module_type option) = Obj.magic arg00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg00_ in
        let _endpos = _endpos_body00_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos_body0_ = _endpos_body00_ in
          let _startpos_arg0_ = _startpos_arg00_ in
          let body0 = body00 in
          let arg0 = arg00 in
          let _1 =
            let body = body0 in
            let arg = arg0 in
            
# 1622 "src/ocaml/preprocess/parser_raw.mly"
        ( let (x, mty) = arg in
          Pmty_functor(x, mty, body) )
# 22293 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_body0_ in
          let _startpos__1_ = _startpos_arg0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 890 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 22304 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1625 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22310 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.structure) = Obj.magic s in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22355 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1216 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_structure s) )
# 22364 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _4 : unit = Obj.magic _4 in
        let args : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic args in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22415 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_me_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1218 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mod_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (x, mty) ->
            mkmod ~loc:_sloc (Pmod_functor (x, mty, acc))
          ) me args
        ) )
# 22428 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1224 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 22453 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = attr;
          MenhirLib.EngineTypes.startp = _startpos_attr_;
          MenhirLib.EngineTypes.endp = _endpos_attr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let attr : (Parsetree.attribute) = Obj.magic attr in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_attr_ in
        let _v : (Parsetree.module_expr) = 
# 1226 "src/ocaml/preprocess/parser_raw.mly"
      ( Mod.attr me attr )
# 22484 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let x =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22524 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1230 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_ident x )
# 22530 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 888 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22541 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1242 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22547 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = me200;
          MenhirLib.EngineTypes.startp = _startpos_me200_;
          MenhirLib.EngineTypes.endp = _endpos_me200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me100;
            MenhirLib.EngineTypes.startp = _startpos_me100_;
            MenhirLib.EngineTypes.endp = _endpos_me100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me200 : (Parsetree.module_expr) = Obj.magic me200 in
        let me100 : (Parsetree.module_expr) = Obj.magic me100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me100_ in
        let _endpos = _endpos_me200_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_me20_ = _endpos_me200_ in
          let _startpos_me10_ = _startpos_me100_ in
          let me20 = me200 in
          let me10 = me100 in
          let _1 =
            let me2 = me20 in
            let me1 = me10 in
            
# 1233 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_apply(me1, me2) )
# 22586 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_me20_ in
          let _startpos__1_ = _startpos_me10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 888 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22597 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1242 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22603 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me100;
              MenhirLib.EngineTypes.startp = _startpos_me100_;
              MenhirLib.EngineTypes.endp = _endpos_me100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let me100 : (Parsetree.module_expr) = Obj.magic me100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _startpos_me10_ = _startpos_me100_ in
          let _endpos__30_ = _endpos__300_ in
          let _30 = _300 in
          let _20 = _200 in
          let me10 = me100 in
          let _1 =
            let _startpos_me1_ = _startpos_me10_ in
            let _endpos__3_ = _endpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let me1 = me10 in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_me1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1236 "src/ocaml/preprocess/parser_raw.mly"
        ( (* TODO review mkmod location *)
          Pmod_apply(me1, mkmod ~loc:_sloc (Pmod_structure [])) )
# 22656 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos_me10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 888 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22667 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1242 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22673 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ex00;
          MenhirLib.EngineTypes.startp = _startpos_ex00_;
          MenhirLib.EngineTypes.endp = _endpos_ex00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ex00 : (Parsetree.extension) = Obj.magic ex00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ex00_ in
        let _endpos = _endpos_ex00_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos_ex0_ = _endpos_ex00_ in
          let _startpos_ex0_ = _startpos_ex00_ in
          let ex0 = ex00 in
          let _1 =
            let ex = ex0 in
            
# 1240 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_extension ex )
# 22704 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_ex0_ in
          let _startpos__1_ = _startpos_ex0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 888 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22715 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1242 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22721 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _12;
            MenhirLib.EngineTypes.startp = _startpos__12_;
            MenhirLib.EngineTypes.endp = _endpos__12_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _5 : unit = Obj.magic _5 in
        let _11 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22775 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : (Parsetree.module_substitution * string Location.loc option) = let attrs2 =
          let _1 = _13 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22788 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let body =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22802 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let uid =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22815 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22823 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1655 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Ms.mk uid body ~attrs ~loc ~docs, ext
  )
# 22837 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.signature) = Obj.magic s in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22882 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1507 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs (Pmty_signature s) )
# 22891 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let args : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic args in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22942 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_mty_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1513 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mty_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (x, mty) ->
            mkmty ~loc:_sloc (Pmty_functor (x, mty, acc))
          ) mty args
        ) )
# 22955 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_type) = let _4 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23006 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1519 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
# 23015 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = 
# 1521 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 23052 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1525 "src/ocaml/preprocess/parser_raw.mly"
      ( Mty.attr _1 _2 )
# 23083 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23123 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1528 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_ident _1 )
# 23129 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 890 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23140 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1539 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23146 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.module_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.module_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1531 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_functor(mknoloc "_", Some _1, _3) )
# 23193 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 890 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23204 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1539 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs0000 : (Parsetree.with_constraint list) = Obj.magic xs0000 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.module_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos__10_ = _startpos__100_ in
          let xs000 = xs0000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let xs00 = xs000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 23261 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 23267 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1533 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_with(_1, _3) )
# 23273 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 890 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23284 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1539 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23290 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1537 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_extension _1 )
# 23321 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 890 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23332 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1539 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23338 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = typ;
            MenhirLib.EngineTypes.startp = _startpos_typ_;
            MenhirLib.EngineTypes.endp = _endpos_typ_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let typ : (Parsetree.module_type option) = Obj.magic typ in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.module_type_declaration * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23401 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23415 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23423 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1453 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
  )
# 23437 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3509 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 23462 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3510 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 23499 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag) = 
# 3579 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable )
# 23517 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3580 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Mutable )
# 23542 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3588 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Concrete )
# 23560 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3590 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Concrete )
# 23585 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Virtual )
# 23610 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3595 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 23641 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3595 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 23672 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3552 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 23703 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23724 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23739 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 221 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [ x ] )
# 23745 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _10 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23772 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_xs_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23787 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 223 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 23793 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s0;
          MenhirLib.EngineTypes.startp = _startpos_s0_;
          MenhirLib.EngineTypes.endp = _endpos_s0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s0 : (
# 717 "src/ocaml/preprocess/parser_raw.mly"
       (string * string option)
# 23814 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s0_ in
        let _endpos = _endpos_s0_ in
        let _v : (string list) = let x =
          let s = s0 in
          
# 3548 "src/ocaml/preprocess/parser_raw.mly"
    ( fst s )
# 23824 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 221 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( [ x ] )
# 23830 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s0;
            MenhirLib.EngineTypes.startp = _startpos_s0_;
            MenhirLib.EngineTypes.endp = _endpos_s0_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string list) = Obj.magic xs in
        let s0 : (
# 717 "src/ocaml/preprocess/parser_raw.mly"
       (string * string option)
# 23857 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s0_ in
        let _endpos = _endpos_xs_ in
        let _v : (string list) = let x =
          let s = s0 in
          
# 3548 "src/ocaml/preprocess/parser_raw.mly"
    ( fst s )
# 23867 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 223 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x :: xs )
# 23873 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23899 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2901 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 23905 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23938 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2901 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 23944 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23970 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 23978 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23984 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2905 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 23990 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24023 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 24031 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24037 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2905 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24043 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x000;
              MenhirLib.EngineTypes.startp = _startpos_x000_;
              MenhirLib.EngineTypes.endp = _endpos_x000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24081 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 24096 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 24102 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24108 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2905 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24114 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2000;
              MenhirLib.EngineTypes.startp = _startpos__2000_;
              MenhirLib.EngineTypes.endp = _endpos__2000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x000;
                MenhirLib.EngineTypes.startp = _startpos_x000_;
                MenhirLib.EngineTypes.endp = _endpos_x000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _10 : unit = Obj.magic _10 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24159 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 24174 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 24180 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24186 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2905 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24192 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24218 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 24226 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24232 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2909 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 24238 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 24279 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24285 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2909 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 24291 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x000;
              MenhirLib.EngineTypes.startp = _startpos_x000_;
              MenhirLib.EngineTypes.endp = _endpos_x000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24329 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 24344 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 24350 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24356 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2909 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 24362 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2000;
              MenhirLib.EngineTypes.startp = _startpos__2000_;
              MenhirLib.EngineTypes.endp = _endpos__2000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x000;
                MenhirLib.EngineTypes.startp = _startpos_x000_;
                MenhirLib.EngineTypes.endp = _endpos_x000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24407 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 24422 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 24428 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24434 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2909 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 24440 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24478 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 24486 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24492 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2913 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 24498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24543 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _1 =
            
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 24551 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24557 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2913 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 24563 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2000;
                MenhirLib.EngineTypes.startp = _startpos__2000_;
                MenhirLib.EngineTypes.endp = _endpos__2000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x000;
                  MenhirLib.EngineTypes.startp = _startpos_x000_;
                  MenhirLib.EngineTypes.endp = _endpos_x000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24613 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 24628 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 24634 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24640 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2913 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 24646 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2000;
                  MenhirLib.EngineTypes.startp = _startpos__2000_;
                  MenhirLib.EngineTypes.endp = _endpos__2000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x000;
                    MenhirLib.EngineTypes.startp = _startpos_x000_;
                    MenhirLib.EngineTypes.endp = _endpos_x000_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _10 : unit = Obj.magic _10 in
        let _2000 : unit = Obj.magic _2000 in
        let x000 : (Parsetree.core_type) = Obj.magic x000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x000_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24703 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let oty =
          let _200 = _2000 in
          let x00 = x000 in
          let _1 =
            let _20 = _200 in
            let x0 = x00 in
            let x =
              let _2 = _20 in
              let x = x0 in
              
# 191 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 24718 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 24724 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2917 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24730 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2913 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 24736 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _11 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24787 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__11_ in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24796 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 24803 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1472 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 24817 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _10 : unit = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24874 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let attrs1 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24883 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 24891 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1472 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 24905 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24956 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24970 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24978 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 24985 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1487 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 24999 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _12;
            MenhirLib.EngineTypes.startp = _startpos__12_;
            MenhirLib.EngineTypes.endp = _endpos__12_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _10 : unit = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _13 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25056 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__13_ in
        let id =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25070 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25078 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 25086 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1487 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 25100 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25121 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3431 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25129 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 661 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25150 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3432 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25158 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 662 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25179 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3433 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25187 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25220 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3434 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"()" )
# 25228 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25267 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3435 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "()<-" )
# 25275 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25308 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3436 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"[]" )
# 25316 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25355 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3437 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "[]<-" )
# 25363 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25396 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3438 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"{}" )
# 25404 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25443 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3439 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "{}<-" )
# 25451 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25472 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3440 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25480 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3441 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "!" )
# 25505 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 655 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25526 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3445 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 25536 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25542 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 656 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25563 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3446 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 25573 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25579 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 657 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25600 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3447 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 25610 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25616 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 658 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25637 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3448 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 25647 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25653 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op0;
          MenhirLib.EngineTypes.startp = _startpos_op0_;
          MenhirLib.EngineTypes.endp = _endpos_op0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op0 : (
# 659 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25674 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op0_ in
        let _endpos = _endpos_op0_ in
        let _v : (string) = let _1 =
          let op = op0 in
          
# 3449 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 25684 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25690 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3450 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 25717 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25723 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3451 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 25750 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25756 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3452 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 25783 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25789 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3453 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 25816 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25822 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3454 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 25849 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25855 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3455 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 25882 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25888 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3456 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 25915 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25921 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3457 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 25948 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25954 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3458 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 25981 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25987 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3459 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 26014 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26020 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3460 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 26047 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26053 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3461 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 26080 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26086 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3462 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 26113 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26119 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3463 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 26146 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26152 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string) = let _1 =
          let _1 = _10 in
          
# 3464 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 26179 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26185 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (bool) = 
# 3349 "src/ocaml/preprocess/parser_raw.mly"
                                                ( true )
# 26210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (bool) = 
# 3350 "src/ocaml/preprocess/parser_raw.mly"
                                                ( false )
# 26228 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26246 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26271 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26289 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26314 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26332 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26358 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc option) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 = _11 in
          let x =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 26379 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 26385 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26391 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26409 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 26443 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26449 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26467 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.expression) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.expression option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 26501 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26507 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_type option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26525 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.module_type) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.module_type option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 26559 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26565 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26583 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.pattern) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.pattern option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 26617 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26623 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26641 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : (Parsetree.expression) = Obj.magic x0 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.expression option) = let x =
          let x = x0 in
          let _1 = _10 in
          
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 26675 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26681 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 114 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 26699 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 116 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 26724 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 696 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26745 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3634 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26753 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26785 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3635 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 26794 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = me;
                MenhirLib.EngineTypes.startp = _startpos_me_;
                MenhirLib.EngineTypes.endp = _endpos_me_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1251 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc (Pmod_constraint(me, mty)) )
# 26846 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = 
# 1256 "src/ocaml/preprocess/parser_raw.mly"
      ( me (* TODO consider reloc *) )
# 26883 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e0;
            MenhirLib.EngineTypes.startp = _startpos_e0_;
            MenhirLib.EngineTypes.endp = _endpos_e0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let e = e0 in
          
# 1275 "src/ocaml/preprocess/parser_raw.mly"
      ( e )
# 26934 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26942 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1262 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 26951 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = e0;
                MenhirLib.EngineTypes.startp = _startpos_e0_;
                MenhirLib.EngineTypes.endp = _endpos_e0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _20 : unit = Obj.magic _20 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let _startpos_e_ = _startpos_e0_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _2 = _20 in
          let e = e0 in
          let ty =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 27029 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 27040 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27046 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty_ = _endpos__1000_ in
          let _endpos = _endpos_ty_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1277 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_constraint (e, ty)) )
# 27056 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27064 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1262 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27073 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10010;
            MenhirLib.EngineTypes.startp = _startpos__10010_;
            MenhirLib.EngineTypes.endp = _endpos__10010_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = e0;
                    MenhirLib.EngineTypes.startp = _startpos_e0_;
                    MenhirLib.EngineTypes.endp = _endpos_e0_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10010 : (Parsetree.module_type) = Obj.magic _10010 in
        let _40 : unit = Obj.magic _40 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _20 : unit = Obj.magic _20 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let _startpos_e_ = _startpos_e0_ in
          let _endpos__1001_ = _endpos__10010_ in
          let _startpos__1001_ = _startpos__10010_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1001 = _10010 in
          let _4 = _40 in
          let _1000 = _10000 in
          let _2 = _20 in
          let e = e0 in
          let ty2 =
            let _endpos__100_ = _endpos__1001_ in
            let _startpos__100_ = _startpos__1001_ in
            let _100 = _1001 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 27167 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 27178 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27184 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1001_ in
          let ty1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 27201 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 27212 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27218 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1279 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2)) )
# 27227 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27235 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1262 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27244 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = e0;
                MenhirLib.EngineTypes.startp = _startpos_e0_;
                MenhirLib.EngineTypes.endp = _endpos_e0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _20 : unit = Obj.magic _20 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let _startpos_e_ = _startpos_e0_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _2 = _20 in
          let e = e0 in
          let ty2 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 27322 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 27333 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27339 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1000_ in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1281 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, None, ty2)) )
# 27349 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27357 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1262 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27366 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 829 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.core_type)
# 27397 "src/ocaml/preprocess/parser_raw.ml"
        ) = 
# 1162 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27401 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 831 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.expression)
# 27432 "src/ocaml/preprocess/parser_raw.ml"
        ) = 
# 1167 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27436 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 833 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.pattern)
# 27467 "src/ocaml/preprocess/parser_raw.ml"
        ) = 
# 1172 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27471 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.pattern) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__3_ = _endpos__30_ in
          let _endpos__2_ = _endpos__20_ in
          let _startpos__2_ = _startpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2636 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 27520 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2624 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27526 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20;
          MenhirLib.EngineTypes.startp = _startpos__20_;
          MenhirLib.EngineTypes.endp = _endpos__20_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _20 : (Parsetree.attribute) = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__20_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _2 = _20 in
          let _1 = _10 in
          
# 2638 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 27560 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2624 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27566 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = _10 in
          
# 2640 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27593 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2624 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27599 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10000;
          MenhirLib.EngineTypes.startp = _startpos__10000_;
          MenhirLib.EngineTypes.endp = _endpos__10000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10000 : (string) = Obj.magic _10000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1100 : (Parsetree.pattern) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__10000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _200 = _2000 in
          let _110 = _1100 in
          let _1 =
            let _startpos__11_ = _startpos__110_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _20 = _200 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _2 = _20 in
              let _1 = _11 in
              let _3 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 27663 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2643 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 27669 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__100_ in
            let _startpos__1_ = _startpos__11_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27680 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2654 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27686 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2624 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27692 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Parsetree.pattern list) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 2647 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 27727 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27738 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2654 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27744 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2624 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27750 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.pattern) = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              
# 2651 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 27803 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27814 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2654 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27820 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2624 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27826 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27874 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 27880 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2626 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
# 27889 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2750 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 27926 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2751 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 27963 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2750 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 28000 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2751 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 28037 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2659 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28062 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 28111 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2662 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_construct(_1, Some _2) )
# 28117 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28128 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2665 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28134 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2664 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_variant(_1, Some _2) )
# 28173 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28184 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2665 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28190 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28238 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 28244 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2667 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
# 28253 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.pattern) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__3_ = _endpos__30_ in
          let _endpos__2_ = _endpos__20_ in
          let _startpos__2_ = _startpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2636 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 28302 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2631 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28308 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20;
          MenhirLib.EngineTypes.startp = _startpos__20_;
          MenhirLib.EngineTypes.endp = _endpos__20_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _20 : (Parsetree.attribute) = Obj.magic _20 in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__20_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _2 = _20 in
          let _1 = _10 in
          
# 2638 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 28342 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2631 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28348 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.pattern) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = _10 in
          
# 2640 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28375 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2631 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28381 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10000;
          MenhirLib.EngineTypes.startp = _startpos__10000_;
          MenhirLib.EngineTypes.endp = _endpos__10000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10000 : (string) = Obj.magic _10000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1100 : (Parsetree.pattern) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__10000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _1000 = _10000 in
          let _200 = _2000 in
          let _110 = _1100 in
          let _1 =
            let _startpos__11_ = _startpos__110_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _20 = _200 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _2 = _20 in
              let _1 = _11 in
              let _3 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 28445 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2643 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 28451 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__100_ in
            let _startpos__1_ = _startpos__11_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28462 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2654 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28468 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2631 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28474 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Parsetree.pattern list) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 2647 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 28509 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28520 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2654 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28526 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2631 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28532 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2000;
            MenhirLib.EngineTypes.startp = _startpos__2000_;
            MenhirLib.EngineTypes.endp = _endpos__2000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.pattern) = Obj.magic _3000 in
        let _2000 : unit = Obj.magic _2000 in
        let _1000 : (Parsetree.pattern) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__30_ = _endpos__300_ in
            let _startpos__10_ = _startpos__100_ in
            let _30 = _300 in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _3 = _30 in
              let _2 = _20 in
              let _1 = _10 in
              
# 2651 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 28585 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28596 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2654 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28602 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2631 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28608 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 28629 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 28652 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2108 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_var _1 )
# 28658 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28669 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2110 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28675 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2109 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_any )
# 28706 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28717 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2110 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28723 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.payload) = 
# 3740 "src/ocaml/preprocess/parser_raw.mly"
              ( PStr _1 )
# 28748 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3741 "src/ocaml/preprocess/parser_raw.mly"
                    ( PSig _2 )
# 28779 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3742 "src/ocaml/preprocess/parser_raw.mly"
                    ( PTyp _2 )
# 28810 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3743 "src/ocaml/preprocess/parser_raw.mly"
                     ( PPat (_2, None) )
# 28841 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.payload) = 
# 3744 "src/ocaml/preprocess/parser_raw.mly"
                                   ( PPat (_2, Some _4) )
# 28884 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3163 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28909 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs00000;
              MenhirLib.EngineTypes.startp = _startpos_xs00000_;
              MenhirLib.EngineTypes.endp = _endpos_xs00000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let xs00000 : (string Location.loc list) = Obj.magic xs00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs00000_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_xs0000_ = _startpos_xs00000_ in
          let _endpos__30_ = _endpos__300_ in
          let _30 = _300 in
          let _20 = _200 in
          let xs0000 = xs00000 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let xs000 = xs0000 in
            let _1 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 28962 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 947 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 28968 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3155 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28974 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3159 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 28980 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos_xs0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 28991 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3165 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28997 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = _10 in
          
# 3194 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29024 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3163 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29030 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs00000;
              MenhirLib.EngineTypes.startp = _startpos_xs00000_;
              MenhirLib.EngineTypes.endp = _endpos_xs00000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Parsetree.core_type) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let xs00000 : (string Location.loc list) = Obj.magic xs00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs00000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _startpos_xs0000_ = _startpos_xs00000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let xs0000 = xs00000 in
          let _1 =
            let _10 = _100 in
            let _2 = _20 in
            let xs000 = xs0000 in
            let _3 =
              let _1 = _10 in
              
# 3194 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29079 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _1 =
              let xs00 = xs000 in
              let _1 =
                let xs0 = xs00 in
                let xs =
                  let xs = xs0 in
                  
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 29091 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 947 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29097 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3155 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29103 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3159 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 29109 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos_xs0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 29120 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3165 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29126 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3707 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 29172 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = prim;
            MenhirLib.EngineTypes.startp = _startpos_prim_;
            MenhirLib.EngineTypes.endp = _endpos_prim_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let prim : (string list) = Obj.magic prim in
        let _7 : unit = Obj.magic _7 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29247 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29261 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29269 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2811 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~prim ~attrs ~loc ~docs,
      ext )
# 29282 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag) = let _1 =
          
# 3575 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 29301 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3572 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29307 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Asttypes.private_flag) = let _1 =
          let _1 = _10 in
          
# 3576 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 29334 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3572 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29340 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3598 "src/ocaml/preprocess/parser_raw.mly"
                 ( Public, Concrete )
# 29358 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3599 "src/ocaml/preprocess/parser_raw.mly"
            ( Private, Concrete )
# 29383 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
            ( Public, Virtual )
# 29408 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3601 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 29439 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 29470 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 3555 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 29488 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 3556 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 29513 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fields_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 29540 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2556 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 29546 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _200 : unit = Obj.magic _200 in
        let x00 : (Parsetree.expression) = Obj.magic x00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x00_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo =
          let _20 = _200 in
          let x0 = x00 in
          let x =
            let _2 = _20 in
            let x = x0 in
            
# 191 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 29590 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 29596 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2556 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 29602 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.constructor_declaration list) = let x =
          let d = d0 in
          
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 29634 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1057 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29640 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.constructor_declaration list) = let x =
          let d = d0 in
          
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 29672 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1060 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29678 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.constructor_declaration list) = let x =
          let d = d0 in
          
# 2985 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 29716 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1064 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 29722 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d00;
          MenhirLib.EngineTypes.startp = _startpos_d00_;
          MenhirLib.EngineTypes.endp = _endpos_d00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d00 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d00_ in
        let _endpos = _endpos_d00_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d0 = d00 in
          let _1 =
            let d = d0 in
            
# 3097 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 29756 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3091 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29762 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1057 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29768 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.extension_constructor) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = _10 in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29795 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1057 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29801 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d00;
          MenhirLib.EngineTypes.startp = _startpos_d00_;
          MenhirLib.EngineTypes.endp = _endpos_d00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d00 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d00_ in
        let _endpos = _endpos_d00_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d0 = d00 in
          let _1 =
            let d = d0 in
            
# 3097 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 29835 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3091 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29841 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1060 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29847 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.extension_constructor) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = _10 in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29874 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1060 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29880 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = d00;
          MenhirLib.EngineTypes.startp = _startpos_d00_;
          MenhirLib.EngineTypes.endp = _endpos_d00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d00 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d00 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d00_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d0 = d00 in
          let _1 =
            let d = d0 in
            
# 3097 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 29920 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3091 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29926 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1064 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 29932 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.extension_constructor) = Obj.magic _10 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = _10 in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29965 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1064 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 29971 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d = d0 in
          
# 3097 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30003 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1057 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30009 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d0_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d = d0 in
          
# 3097 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30041 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1060 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30047 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = d0;
          MenhirLib.EngineTypes.startp = _startpos_d0_;
          MenhirLib.EngineTypes.endp = _endpos_d0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d0 : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d0 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d0_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let d = d0 in
          
# 3097 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30085 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1064 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 30091 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = 
# 923 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 30109 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__300_ in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = let x =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 = _11 in
          let x =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1988 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3, make_loc _sloc )
# 30174 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 183 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( x )
# 30180 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 925 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30186 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string Location.loc * Parsetree.module_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((string Location.loc * Parsetree.module_type option) list) = 
# 937 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30211 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (string Location.loc * Parsetree.module_type option) = Obj.magic x in
        let xs : ((string Location.loc * Parsetree.module_type option) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((string Location.loc * Parsetree.module_type option) list) = 
# 939 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30242 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 937 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30267 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 939 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30298 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 937 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30323 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let xs : (string list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 939 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30354 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30397 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3151 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 30403 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 937 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30409 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _11 : unit = Obj.magic _11 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__100_ in
        let _v : (string Location.loc list) = let x =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30458 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3151 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 30464 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 939 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30470 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 30496 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1028 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30502 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x0;
            MenhirLib.EngineTypes.startp = _startpos_x0_;
            MenhirLib.EngineTypes.endp = _endpos_x0_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let x0 : unit = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 30535 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1028 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30541 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = 
# 1032 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30578 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type list) = let xs =
          let _10 = _100 in
          let x =
            let _1 = _10 in
            
# 3194 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30607 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 963 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30613 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30619 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.core_type list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type list) = let xs =
          let _10 = _100 in
          let _2 = _20 in
          let xs = xs0 in
          let x =
            let _1 = _10 in
            
# 3194 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30662 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 967 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30668 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30674 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.with_constraint) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.with_constraint list) = let xs =
          let x = x0 in
          
# 963 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30701 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30707 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.with_constraint) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.with_constraint list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.with_constraint list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 967 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30748 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30754 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.row_field) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.row_field list) = let xs =
          let x = x0 in
          
# 963 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30781 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30787 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.row_field) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.row_field list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.row_field list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 967 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30828 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30834 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          
# 963 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30861 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30867 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.core_type list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 967 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30908 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30914 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.core_type * Asttypes.variance) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs =
          let x = x0 in
          
# 963 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30941 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30947 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type * Asttypes.variance) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 967 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30988 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30994 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          
# 963 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31021 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31027 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.core_type list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 967 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31068 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31074 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31111 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 998 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 31148 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31185 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.expression) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.expression) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.expression list) = 
# 998 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 31222 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 994 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31259 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 998 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 31296 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = 
# 3334 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31321 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3336 "src/ocaml/preprocess/parser_raw.mly"
      ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
# 31349 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 31375 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31381 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.expression list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 31414 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31420 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression list) = 
# 1019 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31457 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = oe0;
          MenhirLib.EngineTypes.startp = _startpos_oe0_;
          MenhirLib.EngineTypes.endp = _endpos_oe0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let oe0 : (Parsetree.expression option) = Obj.magic oe0 in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 31484 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_oe0_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 31493 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let x =
          let _endpos_oe_ = _endpos_oe0_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let oe = oe0 in
          let _100 = _1000 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 31511 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31522 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__100_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2579 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 31540 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31546 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = oe0;
            MenhirLib.EngineTypes.startp = _startpos_oe0_;
            MenhirLib.EngineTypes.endp = _endpos_oe0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let oe0 : (Parsetree.expression option) = Obj.magic oe0 in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 31579 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_x0_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 31589 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let x =
          let _endpos_oe_ = _endpos_oe0_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let oe = oe0 in
          let _100 = _1000 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 31607 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31618 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__100_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2579 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 31636 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31642 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = oe0;
              MenhirLib.EngineTypes.startp = _startpos_oe0_;
              MenhirLib.EngineTypes.endp = _endpos_oe0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let oe0 : (Parsetree.expression option) = Obj.magic oe0 in
        let _1000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 31681 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos_xs_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let x =
          let _endpos_oe_ = _endpos_oe0_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let oe = oe0 in
          let _100 = _1000 in
          let label =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 31701 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31712 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__100_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2579 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 31730 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1019 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31736 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.pattern list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 31762 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31768 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.pattern list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 31801 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31807 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.pattern list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.pattern list) = 
# 1019 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31844 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = eo0;
          MenhirLib.EngineTypes.startp = _startpos_eo0_;
          MenhirLib.EngineTypes.endp = _endpos_eo0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c0;
            MenhirLib.EngineTypes.startp = _startpos_c0_;
            MenhirLib.EngineTypes.endp = _endpos_c0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let eo0 : (Parsetree.expression option) = Obj.magic eo0 in
        let c0 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_eo0_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 31882 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let x =
          let _endpos_eo_ = _endpos_eo0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let eo = eo0 in
          let c = c0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31902 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2562 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 31920 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31926 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = eo0;
            MenhirLib.EngineTypes.startp = _startpos_eo0_;
            MenhirLib.EngineTypes.endp = _endpos_eo0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = c0;
              MenhirLib.EngineTypes.startp = _startpos_c0_;
              MenhirLib.EngineTypes.endp = _endpos_c0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x0 : unit = Obj.magic x0 in
        let eo0 : (Parsetree.expression option) = Obj.magic eo0 in
        let c0 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_x0_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 =
          let x = x0 in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 31971 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let x =
          let _endpos_eo_ = _endpos_eo0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let eo = eo0 in
          let c = c0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31991 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2562 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 32009 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32015 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = eo0;
              MenhirLib.EngineTypes.startp = _startpos_eo0_;
              MenhirLib.EngineTypes.endp = _endpos_eo0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = c0;
                MenhirLib.EngineTypes.startp = _startpos_c0_;
                MenhirLib.EngineTypes.endp = _endpos_c0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let eo0 : (Parsetree.expression option) = Obj.magic eo0 in
        let c0 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c0 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_xs_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let x =
          let _endpos_eo_ = _endpos_eo0_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let eo = eo0 in
          let c = c0 in
          let _10 = _100 in
          let label =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32078 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__10_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2562 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 32096 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1019 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32102 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2077 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 32127 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2078 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 32158 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.expression) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2080 "src/ocaml/preprocess/parser_raw.mly"
    ( Pexp_sequence(_1, _3) )
# 32205 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 32216 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2081 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32222 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : (string Location.loc) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2083 "src/ocaml/preprocess/parser_raw.mly"
    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
      let payload = PStr [mkstrexp seq []] in
      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
# 32276 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _12;
            MenhirLib.EngineTypes.startp = _startpos__12_;
            MenhirLib.EngineTypes.endp = _endpos__12_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = args_res;
              MenhirLib.EngineTypes.startp = _startpos_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_args_res_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _13 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32339 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__13_ in
        let attrs2 =
          let _1 = _12 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32348 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32361 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32369 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3015 "src/ocaml/preprocess/parser_raw.mly"
    ( let args, res = args_res in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Te.mk_exception ~attrs
        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
      , ext )
# 32383 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss00;
          MenhirLib.EngineTypes.startp = _startpos_xss00_;
          MenhirLib.EngineTypes.endp = _endpos_xss00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss00 : (Parsetree.signature_item list list) = Obj.magic xss00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss00_ in
        let _endpos = _endpos_xss00_ in
        let _v : (Parsetree.signature) = let _1 =
          let _endpos_xss0_ = _endpos_xss00_ in
          let _startpos_xss0_ = _startpos_xss00_ in
          let xss0 = xss00 in
          let _1 =
            let xss = xss0 in
            
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 32414 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss0_ in
          let _startpos__1_ = _startpos_xss0_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 838 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_sig _startpos _endpos _1 )
# 32424 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1545 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32430 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.signature_item) = let _2 =
          let _1 = _10 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32463 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1560 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
# 32474 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1564 "src/ocaml/preprocess/parser_raw.mly"
        ( Psig_attribute _1 )
# 32505 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 886 "src/ocaml/preprocess/parser_raw.mly"
    ( mksig ~loc:_sloc _1 )
# 32516 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1566 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32522 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1569 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 32553 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32564 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32570 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1571 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 32601 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32612 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32618 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs00000;
          MenhirLib.EngineTypes.startp = _startpos_bs00000_;
          MenhirLib.EngineTypes.endp = _endpos_bs00000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a00000;
            MenhirLib.EngineTypes.startp = _startpos_a00000_;
            MenhirLib.EngineTypes.endp = _endpos_a00000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs00000 : (Parsetree.type_declaration list) = Obj.magic bs00000 in
        let a00000 : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a00000_ in
        let _endpos = _endpos_bs00000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs0000_ = _endpos_bs00000_ in
          let _startpos_a0000_ = _startpos_a00000_ in
          let bs0000 = bs00000 in
          let a0000 = a00000 in
          let _1 =
            let bs000 = bs0000 in
            let a000 = a0000 in
            let _1 =
              let bs00 = bs000 in
              let a00 = a000 in
              let _1 =
                let bs0 = bs00 in
                let a0 = a00 in
                let _1 =
                  let bs = bs0 in
                  let a = a0 in
                  
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 32667 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2847 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 32673 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2830 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32679 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1573 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_type _1 )
# 32685 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs0000_ in
          let _startpos__1_ = _startpos_a0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32696 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32702 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs00000;
          MenhirLib.EngineTypes.startp = _startpos_bs00000_;
          MenhirLib.EngineTypes.endp = _endpos_bs00000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a00000;
            MenhirLib.EngineTypes.startp = _startpos_a00000_;
            MenhirLib.EngineTypes.endp = _endpos_a00000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs00000 : (Parsetree.type_declaration list) = Obj.magic bs00000 in
        let a00000 : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a00000_ in
        let _endpos = _endpos_bs00000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs0000_ = _endpos_bs00000_ in
          let _startpos_a0000_ = _startpos_a00000_ in
          let bs0000 = bs00000 in
          let a0000 = a00000 in
          let _1 =
            let bs000 = bs0000 in
            let a000 = a0000 in
            let _1 =
              let bs00 = bs000 in
              let a00 = a000 in
              let _1 =
                let bs0 = bs00 in
                let a0 = a00 in
                let _1 =
                  let bs = bs0 in
                  let a = a0 in
                  
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 32751 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2847 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 32757 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2835 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32763 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1575 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typesubst _1 )
# 32769 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs0000_ in
          let _startpos__1_ = _startpos_a0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32780 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32786 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120000;
          MenhirLib.EngineTypes.startp = _startpos__120000_;
          MenhirLib.EngineTypes.endp = _endpos__120000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110000;
                  MenhirLib.EngineTypes.startp = _startpos__110000_;
                  MenhirLib.EngineTypes.endp = _endpos__110000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100000;
                      MenhirLib.EngineTypes.startp = _startpos__100000_;
                      MenhirLib.EngineTypes.endp = _endpos__100000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext0000;
                        MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13000;
                          MenhirLib.EngineTypes.startp = _startpos__13000_;
                          MenhirLib.EngineTypes.endp = _endpos__13000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120000 : (Parsetree.attributes) = Obj.magic _120000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _110000 : (Longident.t) = Obj.magic _110000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _13000 : unit = Obj.magic _13000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13000_ in
        let _endpos = _endpos__120000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__1300_ = _startpos__13000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _12000 = _120000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _11000 = _110000 in
          let params000 = params0000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1300 = _13000 in
          let _1 =
            let _startpos__130_ = _startpos__1300_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1200 = _12000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1100 = _11000 in
            let params00 = params000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _130 = _1300 in
            let _1 =
              let _startpos__13_ = _startpos__130_ in
              let _endpos__120_ = _endpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _120 = _1200 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _110 = _1100 in
              let params0 = params00 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _13 = _130 in
              let _1 =
                let _endpos__12_ = _endpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__13_ in
                let _12 = _120 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _11 = _110 in
                let params = params0 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _13 in
                let attrs2 =
                  let _1 = _12 in
                  
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32917 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__12_ in
                let cs =
                  let xs = xs0 in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 32926 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32939 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  
# 3563 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 32946 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32954 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3084 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 32966 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3071 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32972 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1577 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 32978 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__12000_ in
          let _startpos__1_ = _startpos__1300_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32989 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32995 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _130000;
          MenhirLib.EngineTypes.startp = _startpos__130000_;
          MenhirLib.EngineTypes.endp = _endpos__130000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _120000;
                  MenhirLib.EngineTypes.startp = _startpos__120000_;
                  MenhirLib.EngineTypes.endp = _endpos__120000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110000;
                      MenhirLib.EngineTypes.startp = _startpos__110000_;
                      MenhirLib.EngineTypes.endp = _endpos__110000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100000;
                        MenhirLib.EngineTypes.startp = _startpos__100000_;
                        MenhirLib.EngineTypes.endp = _endpos__100000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext0000;
                          MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                          MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _14000;
                            MenhirLib.EngineTypes.startp = _startpos__14000_;
                            MenhirLib.EngineTypes.endp = _endpos__14000_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _130000 : (Parsetree.attributes) = Obj.magic _130000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _120000 : (Longident.t) = Obj.magic _120000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _110000 : unit = Obj.magic _110000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _14000 : unit = Obj.magic _14000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__14000_ in
        let _endpos = _endpos__130000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__1400_ = _startpos__14000_ in
          let _endpos__13000_ = _endpos__130000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _startpos__12000_ = _startpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _13000 = _130000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _12000 = _120000 in
          let params000 = params0000 in
          let _11000 = _110000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1400 = _14000 in
          let _1 =
            let _startpos__140_ = _startpos__1400_ in
            let _endpos__1300_ = _endpos__13000_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _startpos__1200_ = _startpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1300 = _13000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1200 = _12000 in
            let params00 = params000 in
            let _1100 = _11000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _140 = _1400 in
            let _1 =
              let _startpos__14_ = _startpos__140_ in
              let _endpos__130_ = _endpos__1300_ in
              let _endpos__120_ = _endpos__1200_ in
              let _startpos__120_ = _startpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _130 = _1300 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _120 = _1200 in
              let params0 = params00 in
              let _110 = _1100 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _14 = _140 in
              let _1 =
                let _endpos__13_ = _endpos__130_ in
                let _endpos__12_ = _endpos__120_ in
                let _startpos__12_ = _startpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__14_ in
                let _13 = _130 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _12 = _120 in
                let params = params0 in
                let _11 = _110 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _14 in
                let attrs2 =
                  let _1 = _13 in
                  
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33144 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__13_ in
                let cs =
                  let xs = xs0 in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 33153 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__12_ in
                  let _startpos__1_ = _startpos__12_ in
                  let _1 = _12 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33166 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3564 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 33179 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33187 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3084 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 33199 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3071 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33205 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1577 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 33211 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__13000_ in
          let _startpos__1_ = _startpos__1400_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33222 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33228 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1579 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_exception _1 )
# 33259 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33270 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33276 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12000;
          MenhirLib.EngineTypes.startp = _startpos__12000_;
          MenhirLib.EngineTypes.endp = _endpos__12000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body000;
            MenhirLib.EngineTypes.startp = _startpos_body000_;
            MenhirLib.EngineTypes.endp = _endpos_body000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11000;
              MenhirLib.EngineTypes.startp = _startpos__11000_;
              MenhirLib.EngineTypes.endp = _endpos__11000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext000;
                  MenhirLib.EngineTypes.startp = _startpos_ext000_;
                  MenhirLib.EngineTypes.endp = _endpos_ext000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1300;
                    MenhirLib.EngineTypes.startp = _startpos__1300_;
                    MenhirLib.EngineTypes.endp = _endpos__1300_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12000 : (Parsetree.attributes) = Obj.magic _12000 in
        let body000 : (Parsetree.module_type) = Obj.magic body000 in
        let _11000 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33324 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _11000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1300 : unit = Obj.magic _1300 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1300_ in
        let _endpos = _endpos__12000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__130_ = _startpos__1300_ in
          let _endpos__1200_ = _endpos__12000_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _startpos__1100_ = _startpos__11000_ in
          let _1200 = _12000 in
          let body00 = body000 in
          let _1100 = _11000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _130 = _1300 in
          let _1 =
            let _startpos__13_ = _startpos__130_ in
            let _endpos__120_ = _endpos__1200_ in
            let _endpos__110_ = _endpos__1100_ in
            let _startpos__110_ = _startpos__1100_ in
            let _120 = _1200 in
            let body0 = body00 in
            let _110 = _1100 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _13 = _130 in
            let _1 =
              let _endpos__12_ = _endpos__120_ in
              let _endpos__11_ = _endpos__110_ in
              let _startpos__11_ = _startpos__110_ in
              let _startpos__1_ = _startpos__13_ in
              let _12 = _120 in
              let body = body0 in
              let _11 = _110 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _13 in
              let attrs2 =
                let _1 = _12 in
                
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33370 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__12_ in
              let uid =
                let _endpos__1_ = _endpos__11_ in
                let _startpos__1_ = _startpos__11_ in
                let _1 = _11 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33384 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _10 in
                
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33392 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1608 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk uid body ~attrs ~loc ~docs, ext
  )
# 33406 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1581 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 33412 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1200_ in
          let _startpos__1_ = _startpos__130_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33423 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33429 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12000;
          MenhirLib.EngineTypes.startp = _startpos__12000_;
          MenhirLib.EngineTypes.endp = _endpos__12000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5000;
              MenhirLib.EngineTypes.startp = _startpos__5000_;
              MenhirLib.EngineTypes.endp = _endpos__5000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11000;
                MenhirLib.EngineTypes.startp = _startpos__11000_;
                MenhirLib.EngineTypes.endp = _endpos__11000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10100;
                  MenhirLib.EngineTypes.startp = _startpos__10100_;
                  MenhirLib.EngineTypes.endp = _endpos__10100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext000;
                    MenhirLib.EngineTypes.startp = _startpos_ext000_;
                    MenhirLib.EngineTypes.endp = _endpos_ext000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1300;
                      MenhirLib.EngineTypes.startp = _startpos__1300_;
                      MenhirLib.EngineTypes.endp = _endpos__1300_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12000 : (Parsetree.attributes) = Obj.magic _12000 in
        let _100000 : (Longident.t) = Obj.magic _100000 in
        let _5000 : unit = Obj.magic _5000 in
        let _11000 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33483 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _11000 in
        let _10100 : (Parsetree.attributes) = Obj.magic _10100 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1300 : unit = Obj.magic _1300 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1300_ in
        let _endpos = _endpos__12000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__130_ = _startpos__1300_ in
          let _endpos__1200_ = _endpos__12000_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _startpos__1100_ = _startpos__11000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _1200 = _12000 in
          let _10000 = _100000 in
          let _500 = _5000 in
          let _1100 = _11000 in
          let _1010 = _10100 in
          let ext00 = ext000 in
          let _130 = _1300 in
          let _1 =
            let _startpos__13_ = _startpos__130_ in
            let _endpos__120_ = _endpos__1200_ in
            let _endpos__110_ = _endpos__1100_ in
            let _startpos__110_ = _startpos__1100_ in
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _120 = _1200 in
            let _1000 = _10000 in
            let _50 = _500 in
            let _110 = _1100 in
            let _101 = _1010 in
            let ext0 = ext00 in
            let _13 = _130 in
            let _1 =
              let _endpos__12_ = _endpos__120_ in
              let _endpos__11_ = _endpos__110_ in
              let _startpos__11_ = _startpos__110_ in
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _startpos__1_ = _startpos__13_ in
              let _12 = _120 in
              let _100 = _1000 in
              let _5 = _50 in
              let _11 = _110 in
              let _10 = _101 in
              let ext = ext0 in
              let _1 = _13 in
              let attrs2 =
                let _1 = _12 in
                
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33538 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__12_ in
              let body =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let id =
                  let _endpos__1_ = _endpos__10_ in
                  let _startpos__1_ = _startpos__10_ in
                  let _1 = _10 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33556 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_id_ = _endpos__10_ in
                let _startpos_id_ = _startpos__10_ in
                let _endpos = _endpos_id_ in
                let _symbolstartpos = _startpos_id_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1645 "src/ocaml/preprocess/parser_raw.mly"
    ( Mty.alias ~loc:(make_loc _sloc) id )
# 33567 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let uid =
                let _endpos__1_ = _endpos__11_ in
                let _startpos__1_ = _startpos__11_ in
                let _1 = _11 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33580 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _10 in
                
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33588 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1636 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk uid body ~attrs ~loc ~docs, ext
  )
# 33602 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1583 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 33608 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1200_ in
          let _startpos__1_ = _startpos__130_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33619 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33625 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.module_substitution * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1585 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modsubst body, ext) )
# 33656 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33667 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33673 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = mty00000;
              MenhirLib.EngineTypes.startp = _startpos_mty00000_;
              MenhirLib.EngineTypes.endp = _endpos_mty00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _600000;
                MenhirLib.EngineTypes.startp = _startpos__600000_;
                MenhirLib.EngineTypes.endp = _endpos__600000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1100000;
                  MenhirLib.EngineTypes.startp = _startpos__1100000_;
                  MenhirLib.EngineTypes.endp = _endpos__1100000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _400000;
                    MenhirLib.EngineTypes.startp = _startpos__400000_;
                    MenhirLib.EngineTypes.endp = _endpos__400000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _1000000;
                      MenhirLib.EngineTypes.startp = _startpos__1000000_;
                      MenhirLib.EngineTypes.endp = _endpos__1000000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext00000;
                        MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _130000;
                          MenhirLib.EngineTypes.startp = _startpos__130000_;
                          MenhirLib.EngineTypes.endp = _endpos__130000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.module_declaration list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let mty00000 : (Parsetree.module_type) = Obj.magic mty00000 in
        let _600000 : unit = Obj.magic _600000 in
        let _1100000 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33738 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1100000 in
        let _400000 : unit = Obj.magic _400000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let mty0000 = mty00000 in
          let _60000 = _600000 in
          let _110000 = _1100000 in
          let _40000 = _400000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let mty000 = mty0000 in
            let _6000 = _60000 in
            let _11000 = _110000 in
            let _4000 = _40000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let mty00 = mty000 in
              let _600 = _6000 in
              let _1100 = _11000 in
              let _400 = _4000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let mty0 = mty00 in
                let _60 = _600 in
                let _110 = _1100 in
                let _40 = _400 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let mty = mty0 in
                  let _6 = _60 in
                  let _11 = _110 in
                  let _4 = _40 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33822 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let uid =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33836 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33844 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1679 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext, Md.mk uid mty ~attrs ~loc ~docs
  )
# 33858 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 33864 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1668 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33870 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1587 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_recmodule l, ext) )
# 33876 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33887 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33893 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1589 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modtype body, ext) )
# 33924 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33935 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33941 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.open_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1591 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_open body, ext) )
# 33972 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33983 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33989 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11000;
          MenhirLib.EngineTypes.startp = _startpos__11000_;
          MenhirLib.EngineTypes.endp = _endpos__11000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = thing000;
            MenhirLib.EngineTypes.startp = _startpos_thing000_;
            MenhirLib.EngineTypes.endp = _endpos_thing000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10000;
              MenhirLib.EngineTypes.startp = _startpos__10000_;
              MenhirLib.EngineTypes.endp = _endpos__10000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext000;
                MenhirLib.EngineTypes.startp = _startpos_ext000_;
                MenhirLib.EngineTypes.endp = _endpos_ext000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1200;
                  MenhirLib.EngineTypes.startp = _startpos__1200_;
                  MenhirLib.EngineTypes.endp = _endpos__1200_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11000 : (Parsetree.attributes) = Obj.magic _11000 in
        let thing000 : (Parsetree.module_type) = Obj.magic thing000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1200 : unit = Obj.magic _1200 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1200_ in
        let _endpos = _endpos__11000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _startpos__120_ = _startpos__1200_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _1100 = _11000 in
          let thing00 = thing000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _120 = _1200 in
          let _1 =
            let _startpos__12_ = _startpos__120_ in
            let _endpos__110_ = _endpos__1100_ in
            let _110 = _1100 in
            let thing0 = thing00 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _12 = _120 in
            let _1 =
              let _endpos__11_ = _endpos__110_ in
              let _startpos__1_ = _startpos__12_ in
              let _11 = _110 in
              let thing = thing0 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _12 in
              let attrs2 =
                let _1 = _11 in
                
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34064 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__11_ in
              let attrs1 =
                let _1 = _10 in
                
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34073 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1437 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 34087 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1593 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_include _1 )
# 34093 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1100_ in
          let _startpos__1_ = _startpos__120_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34104 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34110 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cty00000;
              MenhirLib.EngineTypes.startp = _startpos_cty00000_;
              MenhirLib.EngineTypes.endp = _endpos_cty00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _700000;
                MenhirLib.EngineTypes.startp = _startpos__700000_;
                MenhirLib.EngineTypes.endp = _endpos__700000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1100000;
                  MenhirLib.EngineTypes.startp = _startpos__1100000_;
                  MenhirLib.EngineTypes.endp = _endpos__1100000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params00000;
                    MenhirLib.EngineTypes.startp = _startpos_params00000_;
                    MenhirLib.EngineTypes.endp = _endpos_params00000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = virt00000;
                      MenhirLib.EngineTypes.startp = _startpos_virt00000_;
                      MenhirLib.EngineTypes.endp = _endpos_virt00000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _1000000;
                        MenhirLib.EngineTypes.startp = _startpos__1000000_;
                        MenhirLib.EngineTypes.endp = _endpos__1000000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext00000;
                          MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                          MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _130000;
                            MenhirLib.EngineTypes.startp = _startpos__130000_;
                            MenhirLib.EngineTypes.endp = _endpos__130000_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.class_description list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let cty00000 : (Parsetree.class_type) = Obj.magic cty00000 in
        let _700000 : unit = Obj.magic _700000 in
        let _1100000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 34180 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1100000 in
        let params00000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params00000 in
        let virt00000 : (Asttypes.virtual_flag) = Obj.magic virt00000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let cty0000 = cty00000 in
          let _70000 = _700000 in
          let _110000 = _1100000 in
          let params0000 = params00000 in
          let virt0000 = virt00000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let cty000 = cty0000 in
            let _7000 = _70000 in
            let _11000 = _110000 in
            let params000 = params0000 in
            let virt000 = virt0000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let cty00 = cty000 in
              let _700 = _7000 in
              let _1100 = _11000 in
              let params00 = params000 in
              let virt00 = virt000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let cty0 = cty00 in
                let _70 = _700 in
                let _110 = _1100 in
                let params0 = params00 in
                let virt0 = virt00 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let cty = cty0 in
                  let _7 = _70 in
                  let _11 = _110 in
                  let params = params0 in
                  let virt = virt0 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34270 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let id =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34284 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34292 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 2009 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
    )
# 34307 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 34313 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1997 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34319 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1595 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class l, ext) )
# 34325 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34336 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34342 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1597 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class_type l, ext) )
# 34373 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 903 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34384 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1599 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34390 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3410 "src/ocaml/preprocess/parser_raw.mly"
                 ( _1 )
# 34415 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 665 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34441 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3411 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 34450 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 644 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34476 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3412 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 34485 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 665 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34511 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3413 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer (n, m) )
# 34520 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 644 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34546 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3414 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float(f, m) )
# 34555 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _1000 : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic _1000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__11_ = _startpos__110_ in
          let _30 = _300 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _3 = _30 in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 2762 "src/ocaml/preprocess/parser_raw.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 34606 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2733 "src/ocaml/preprocess/parser_raw.mly"
      ( let (fields, closed) = _2 in
        Ppat_record(fields, closed) )
# 34613 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34624 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2747 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34630 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ps000;
            MenhirLib.EngineTypes.startp = _startpos_ps000_;
            MenhirLib.EngineTypes.endp = _endpos_ps000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let ps000 : (Parsetree.pattern list) = Obj.magic ps000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let ps00 = ps000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let ps0 = ps00 in
            let _1 = _10 in
            let _2 =
              let ps = ps0 in
              
# 2756 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 34682 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2738 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailpat _loc__3_ _2) )
# 34689 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34700 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2747 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34706 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ps000;
            MenhirLib.EngineTypes.startp = _startpos_ps000_;
            MenhirLib.EngineTypes.endp = _endpos_ps000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let ps000 : (Parsetree.pattern list) = Obj.magic ps000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let ps00 = ps000 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let ps0 = ps00 in
            let _1 = _10 in
            let _2 =
              let ps = ps0 in
              
# 2756 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 34755 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2742 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array _2 )
# 34761 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34772 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2747 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34778 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2744 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array [] )
# 34817 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34828 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2747 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34834 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        
# 3749 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.code _startpos _endpos _2 )
# 34873 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _startpos = _startpos__1_ in
        
# 3751 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.uncode _startpos _endpos _2 )
# 34906 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2241 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_exp ~loc:_sloc _2 )
# 34946 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2245 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _2 _3 )
# 34992 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2247 "src/ocaml/preprocess/parser_raw.mly"
      ( array_get ~loc:_sloc _1 _4 )
# 35044 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2251 "src/ocaml/preprocess/parser_raw.mly"
      ( string_get ~loc:_sloc _1 _4 )
# 35096 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35140 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2255 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "[]")) _1 _4 )
# 35152 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35196 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2259 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "()")) _1 _4  )
# 35208 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35252 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "{}")) _1 _4 )
# 35264 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35318 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2267 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "[]")) _1 _6  )
# 35332 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35386 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2272 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "()")) _1 _6 )
# 35400 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35454 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2277 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "{}")) _1 _6  )
# 35468 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2282 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_get ~loc:_sloc _1 _4 )
# 35520 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e0;
            MenhirLib.EngineTypes.startp = _startpos_e0_;
            MenhirLib.EngineTypes.endp = _endpos_e0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext0;
                MenhirLib.EngineTypes.startp = _startpos_ext0_;
                MenhirLib.EngineTypes.endp = _endpos_ext0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : unit = Obj.magic _50 in
        let e0 : (Parsetree.expression) = Obj.magic e0 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let ext0 : (string Location.loc option) = Obj.magic ext0 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let e = e0 in
          let _10 = _100 in
          let ext = ext0 in
          let _1 = _11 in
          let attrs =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35577 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2293 "src/ocaml/preprocess/parser_raw.mly"
      ( e.pexp_desc, (ext, attrs @ e.pexp_attributes) )
# 35583 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__11_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2286 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 35595 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _30 : unit = Obj.magic _30 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__3_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _3 = _30 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _10 in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35650 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 35656 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2295 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
# 35665 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2286 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 35677 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _101;
          MenhirLib.EngineTypes.startp = _startpos__101_;
          MenhirLib.EngineTypes.endp = _endpos__101_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _12;
                MenhirLib.EngineTypes.startp = _startpos__12_;
                MenhirLib.EngineTypes.endp = _endpos__12_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _101 : (Longident.t) = Obj.magic _101 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _12 : unit = Obj.magic _12 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__12_ in
        let _endpos = _endpos__101_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__101_ in
          let _startpos__10_ = _startpos__101_ in
          let _10 = _101 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 = _12 in
          let _3 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35734 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35745 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 35751 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2299 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_new(_3), _2 )
# 35757 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__101_ in
        let _startpos__1_ = _startpos__12_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2286 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 35769 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _100 = _1000 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _10 in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35836 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 35842 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2301 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_pack _4, _3 )
# 35848 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2286 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 35860 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _1001;
                  MenhirLib.EngineTypes.startp = _startpos__1001_;
                  MenhirLib.EngineTypes.endp = _endpos__1001_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _110;
                    MenhirLib.EngineTypes.startp = _startpos__110_;
                    MenhirLib.EngineTypes.endp = _endpos__110_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _20;
                      MenhirLib.EngineTypes.startp = _startpos__20_;
                      MenhirLib.EngineTypes.endp = _endpos__20_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : unit = Obj.magic _70 in
        let _10000 : (Parsetree.module_type) = Obj.magic _10000 in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _1001 : (Parsetree.attributes) = Obj.magic _1001 in
        let _110 : (string Location.loc option) = Obj.magic _110 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__7_ = _endpos__70_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _startpos__1_ = _startpos__10_ in
          let _7 = _70 in
          let _1000 = _10000 in
          let _5 = _50 in
          let _4 = _40 in
          let _100 = _1001 in
          let _11 = _110 in
          let _2 = _20 in
          let _1 = _10 in
          let _6 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 35950 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 35961 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35967 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35978 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 35984 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2303 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
# 35993 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2286 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 36005 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36045 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2309 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ident (_1) )
# 36051 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36062 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36068 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2311 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constant _1 )
# 36099 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36110 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36116 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36156 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2313 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, None) )
# 36162 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36173 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36179 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2315 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, None) )
# 36210 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36221 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36227 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _1000 : (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36254 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 36280 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2317 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 36286 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36297 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36303 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _10000 : unit = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _2 = _20 in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 2318 "src/ocaml/preprocess/parser_raw.mly"
            ("!")
# 36351 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 36362 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2319 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 36368 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36379 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36385 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let xs000 : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let xs00 = xs000 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let xs0 = xs00 in
            let _1 = _10 in
            let _2 =
              let xs = xs0 in
              
# 2574 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 36434 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2321 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override _2 )
# 36440 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36451 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36457 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2325 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override [] )
# 36496 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36507 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36513 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _110 : (Parsetree.expression) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let _1 = _11 in
            let _3 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36570 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2327 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_field(_1, _3) )
# 36576 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36587 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36593 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36670 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36681 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2329 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, _4) )
# 36687 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36698 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36704 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let xs000 : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let xs00 = xs000 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let xs0 = xs00 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let _4 =
              let xs = xs0 in
              
# 2574 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 36773 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36790 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36801 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2331 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_override *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_override _4)) )
# 36812 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36823 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36829 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10000;
          MenhirLib.EngineTypes.startp = _startpos__10000_;
          MenhirLib.EngineTypes.endp = _endpos__10000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36860 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__10000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _startpos__10_ = _startpos__100_ in
          let _1000 = _10000 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _100 = _1000 in
            let _2 = _20 in
            let _1 = _10 in
            let _3 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 36889 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36900 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2336 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_send(_1, _3) )
# 36906 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1000_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36917 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36923 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.expression) = Obj.magic _300 in
        let _1000 : (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36955 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _110 : (Parsetree.expression) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _30 = _300 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _3 = _30 in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 872 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 36985 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2338 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix _1 _2 _3 )
# 36991 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37002 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37008 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2340 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension _1 )
# 37039 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37050 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37056 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 2342 "src/ocaml/preprocess/parser_raw.mly"
      ( let id = mkrhs "merlin.hole" _loc in
        Pexp_extension (id, PStr []) )
# 37093 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37104 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37110 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10100;
            MenhirLib.EngineTypes.startp = _startpos__10100_;
            MenhirLib.EngineTypes.endp = _endpos__10100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10100 : unit = Obj.magic _10100 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _startpos__1010_ = _startpos__10100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1010 = _10100 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__101_ = _startpos__1010_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _200 = _2000 in
            let _101 = _1010 in
            let _2 = _20 in
            let _100 = _1000 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__101_ in
              let _20 = _200 in
              let _10 = _101 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2344 "src/ocaml/preprocess/parser_raw.mly"
                                                    (Lident "()")
# 37179 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37190 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37208 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37219 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2345 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 37230 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37241 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37247 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2350 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _2 in
        Pexp_record(fields, exten) )
# 37296 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37307 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37313 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37392 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37403 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2355 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _4 in
        (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_record(fields, exten))) )
# 37415 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37426 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37432 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let es00 = es000 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let es0 = es00 in
            let _1 = _10 in
            let _2 =
              let es = es0 in
              
# 2591 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 37481 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2361 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array(_2) )
# 37487 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37498 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37504 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2365 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array [] )
# 37543 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37554 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37560 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let es00 = es000 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let es0 = es00 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let _4 =
              let es = es0 in
              
# 2591 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 37629 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37646 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37657 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2367 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array(_4))) )
# 37668 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37679 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37685 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37755 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37766 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__4_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2370 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array [])) )
# 37777 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37788 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37794 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let es00 = es000 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let es0 = es00 in
            let _1 = _10 in
            let _2 =
              let es = es0 in
              
# 2591 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 37846 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2376 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailexp _loc__3_ _2) )
# 37853 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37864 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37870 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = es000;
            MenhirLib.EngineTypes.startp = _startpos_es000_;
            MenhirLib.EngineTypes.endp = _endpos_es000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10000;
                  MenhirLib.EngineTypes.startp = _startpos__10000_;
                  MenhirLib.EngineTypes.endp = _endpos__10000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let es000 : (Parsetree.expression list) = Obj.magic es000 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _50 = _500 in
          let es00 = es000 in
          let _30 = _300 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _5 = _50 in
            let es0 = es00 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1000 in
            let _4 =
              let es = es0 in
              
# 2591 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 37941 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37958 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37969 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2380 "src/ocaml/preprocess/parser_raw.mly"
      ( let list_exp =
          (* TODO: review the location of list_exp *)
          let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
          mkexp ~loc:_sloc tail_exp in
        Pexp_open(od, list_exp) )
# 37984 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37995 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38001 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10100;
            MenhirLib.EngineTypes.startp = _startpos__10100_;
            MenhirLib.EngineTypes.endp = _endpos__10100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10100 : unit = Obj.magic _10100 in
        let _200 : unit = Obj.magic _200 in
        let _10000 : (Longident.t) = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _startpos__1010_ = _startpos__10100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1010 = _10100 in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__101_ = _startpos__1010_ in
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _200 = _2000 in
            let _101 = _1010 in
            let _2 = _20 in
            let _100 = _1000 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__101_ in
              let _20 = _200 in
              let _10 = _101 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2385 "src/ocaml/preprocess/parser_raw.mly"
                                                        (Lident "[]")
# 38070 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38081 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38099 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38110 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2386 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 38121 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38132 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38138 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _900;
          MenhirLib.EngineTypes.startp = _startpos__900_;
          MenhirLib.EngineTypes.endp = _endpos__900_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _700;
              MenhirLib.EngineTypes.startp = _startpos__700_;
              MenhirLib.EngineTypes.endp = _endpos__700_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _600;
                MenhirLib.EngineTypes.startp = _startpos__600_;
                MenhirLib.EngineTypes.endp = _endpos__600_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10100;
                  MenhirLib.EngineTypes.startp = _startpos__10100_;
                  MenhirLib.EngineTypes.endp = _endpos__10100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1100;
                    MenhirLib.EngineTypes.startp = _startpos__1100_;
                    MenhirLib.EngineTypes.endp = _endpos__1100_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _400;
                      MenhirLib.EngineTypes.startp = _startpos__400_;
                      MenhirLib.EngineTypes.endp = _endpos__400_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _300;
                        MenhirLib.EngineTypes.startp = _startpos__300_;
                        MenhirLib.EngineTypes.endp = _endpos__300_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _200;
                          MenhirLib.EngineTypes.startp = _startpos__200_;
                          MenhirLib.EngineTypes.endp = _endpos__200_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _10010;
                            MenhirLib.EngineTypes.startp = _startpos__10010_;
                            MenhirLib.EngineTypes.endp = _endpos__10010_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _900 : unit = Obj.magic _900 in
        let _100000 : (Parsetree.module_type) = Obj.magic _100000 in
        let _700 : unit = Obj.magic _700 in
        let _600 : (Parsetree.module_expr) = Obj.magic _600 in
        let _10100 : (Parsetree.attributes) = Obj.magic _10100 in
        let _1100 : (string Location.loc option) = Obj.magic _1100 in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _10010 : (Longident.t) = Obj.magic _10010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10010_ in
        let _endpos = _endpos__900_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__90_ = _endpos__900_ in
          let _endpos__1001_ = _endpos__10010_ in
          let _startpos__1001_ = _startpos__10010_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _90 = _900 in
          let _10000 = _100000 in
          let _70 = _700 in
          let _60 = _600 in
          let _1010 = _10100 in
          let _110 = _1100 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _1001 = _10010 in
          let _1 =
            let _endpos__9_ = _endpos__90_ in
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _endpos__100_ = _endpos__1001_ in
            let _startpos__100_ = _startpos__1001_ in
            let _9 = _90 in
            let _1000 = _10000 in
            let _7 = _70 in
            let _6 = _60 in
            let _101 = _1010 in
            let _11 = _110 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _100 = _1001 in
            let _8 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _100 = _1000 in
              let _1 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 38259 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 38270 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38276 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _5 =
              let _10 = _101 in
              let _1 = _11 in
              let _2 =
                let _1 = _10 in
                
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 38287 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 38293 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let od =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38310 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1496 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38321 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__100_ in
            let _endpos = _endpos__9_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2393 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_constraint *)
        let modexp =
          mkexp_attrs ~loc:_sloc
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
        Pexp_open(od, modexp) )
# 38335 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__90_ in
          let _startpos__1_ = _startpos__1001_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 878 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38346 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38352 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (string) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38392 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2671 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_var (_1) )
# 38398 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38409 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2672 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38415 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2673 "src/ocaml/preprocess/parser_raw.mly"
                             ( _1 )
# 38440 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2678 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 38480 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2680 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38505 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 38552 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _10 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38571 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 38582 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 38588 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2682 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
# 38597 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1000 : (Parsetree.module_type) = Obj.magic _1000 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 38656 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _10 in
        let _100 : (Parsetree.attributes) = Obj.magic _100 in
        let _11 : (string Location.loc option) = Obj.magic _11 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern) = let _6 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3325 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 38678 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 38689 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3326 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38695 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38708 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let _10 = _100 in
          let _1 = _11 in
          let _2 =
            let _1 = _10 in
            
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 38719 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3731 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 38725 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2684 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc
          (Ppat_constraint(mkpat ~loc:_sloc (Ppat_unpack _4), _6))
          _3 )
# 38736 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2692 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_any )
# 38767 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38778 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38784 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2694 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constant _1 )
# 38815 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38826 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38832 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.constant) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2696 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_interval (_1, _3) )
# 38879 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38890 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38896 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38936 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2698 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_construct(_1, None) )
# 38942 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38953 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38959 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2700 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_variant(_1, None) )
# 38990 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39001 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39007 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _110;
            MenhirLib.EngineTypes.startp = _startpos__110_;
            MenhirLib.EngineTypes.endp = _endpos__110_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39056 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2702 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_type (_2) )
# 39062 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39073 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39079 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.pattern) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39136 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2704 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open(_1, _3) )
# 39142 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39153 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39159 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2705 "src/ocaml/preprocess/parser_raw.mly"
                                                     (Lident "[]")
# 39228 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39239 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39253 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2706 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 39263 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39274 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39280 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2707 "src/ocaml/preprocess/parser_raw.mly"
                                                 (Lident "()")
# 39349 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39360 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39374 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 39384 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39395 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39401 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.pattern) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39474 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2710 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open (_1, _4) )
# 39480 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39491 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39497 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2718 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 39560 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39571 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39577 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2727 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_extension _1 )
# 39608 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 880 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39619 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2688 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39625 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 39646 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3641 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 39654 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 39675 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3642 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 39683 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3643 "src/ocaml/preprocess/parser_raw.mly"
        ( "and" )
# 39708 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3644 "src/ocaml/preprocess/parser_raw.mly"
       ( "as" )
# 39733 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3645 "src/ocaml/preprocess/parser_raw.mly"
           ( "assert" )
# 39758 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3646 "src/ocaml/preprocess/parser_raw.mly"
          ( "begin" )
# 39783 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3647 "src/ocaml/preprocess/parser_raw.mly"
          ( "class" )
# 39808 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3648 "src/ocaml/preprocess/parser_raw.mly"
               ( "constraint" )
# 39833 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3649 "src/ocaml/preprocess/parser_raw.mly"
       ( "do" )
# 39858 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3650 "src/ocaml/preprocess/parser_raw.mly"
         ( "done" )
# 39883 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3651 "src/ocaml/preprocess/parser_raw.mly"
           ( "downto" )
# 39908 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3652 "src/ocaml/preprocess/parser_raw.mly"
         ( "else" )
# 39933 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3653 "src/ocaml/preprocess/parser_raw.mly"
        ( "end" )
# 39958 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3654 "src/ocaml/preprocess/parser_raw.mly"
              ( "exception" )
# 39983 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3655 "src/ocaml/preprocess/parser_raw.mly"
             ( "external" )
# 40008 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3656 "src/ocaml/preprocess/parser_raw.mly"
          ( "false" )
# 40033 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3657 "src/ocaml/preprocess/parser_raw.mly"
        ( "for" )
# 40058 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3658 "src/ocaml/preprocess/parser_raw.mly"
        ( "fun" )
# 40083 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3659 "src/ocaml/preprocess/parser_raw.mly"
             ( "function" )
# 40108 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3660 "src/ocaml/preprocess/parser_raw.mly"
            ( "functor" )
# 40133 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3661 "src/ocaml/preprocess/parser_raw.mly"
       ( "if" )
# 40158 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3662 "src/ocaml/preprocess/parser_raw.mly"
       ( "in" )
# 40183 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3663 "src/ocaml/preprocess/parser_raw.mly"
            ( "include" )
# 40208 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3664 "src/ocaml/preprocess/parser_raw.mly"
            ( "inherit" )
# 40233 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3665 "src/ocaml/preprocess/parser_raw.mly"
                ( "initializer" )
# 40258 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3666 "src/ocaml/preprocess/parser_raw.mly"
         ( "lazy" )
# 40283 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3667 "src/ocaml/preprocess/parser_raw.mly"
        ( "let" )
# 40308 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3668 "src/ocaml/preprocess/parser_raw.mly"
          ( "match" )
# 40333 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3669 "src/ocaml/preprocess/parser_raw.mly"
           ( "method" )
# 40358 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3670 "src/ocaml/preprocess/parser_raw.mly"
           ( "module" )
# 40383 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3671 "src/ocaml/preprocess/parser_raw.mly"
            ( "mutable" )
# 40408 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3672 "src/ocaml/preprocess/parser_raw.mly"
        ( "new" )
# 40433 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3673 "src/ocaml/preprocess/parser_raw.mly"
           ( "nonrec" )
# 40458 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3674 "src/ocaml/preprocess/parser_raw.mly"
           ( "object" )
# 40483 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3675 "src/ocaml/preprocess/parser_raw.mly"
       ( "of" )
# 40508 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3676 "src/ocaml/preprocess/parser_raw.mly"
         ( "open" )
# 40533 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3677 "src/ocaml/preprocess/parser_raw.mly"
       ( "or" )
# 40558 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3678 "src/ocaml/preprocess/parser_raw.mly"
            ( "private" )
# 40583 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3679 "src/ocaml/preprocess/parser_raw.mly"
        ( "rec" )
# 40608 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3680 "src/ocaml/preprocess/parser_raw.mly"
        ( "sig" )
# 40633 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3681 "src/ocaml/preprocess/parser_raw.mly"
           ( "struct" )
# 40658 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3682 "src/ocaml/preprocess/parser_raw.mly"
         ( "then" )
# 40683 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3683 "src/ocaml/preprocess/parser_raw.mly"
       ( "to" )
# 40708 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3684 "src/ocaml/preprocess/parser_raw.mly"
         ( "true" )
# 40733 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3685 "src/ocaml/preprocess/parser_raw.mly"
        ( "try" )
# 40758 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3686 "src/ocaml/preprocess/parser_raw.mly"
         ( "type" )
# 40783 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3687 "src/ocaml/preprocess/parser_raw.mly"
        ( "val" )
# 40808 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3688 "src/ocaml/preprocess/parser_raw.mly"
            ( "virtual" )
# 40833 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3689 "src/ocaml/preprocess/parser_raw.mly"
         ( "when" )
# 40858 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3690 "src/ocaml/preprocess/parser_raw.mly"
          ( "while" )
# 40883 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3691 "src/ocaml/preprocess/parser_raw.mly"
         ( "with" )
# 40908 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = 
# 2992 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40933 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _14;
          MenhirLib.EngineTypes.startp = _startpos__14_;
          MenhirLib.EngineTypes.endp = _endpos__14_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _13;
            MenhirLib.EngineTypes.startp = _startpos__13_;
            MenhirLib.EngineTypes.endp = _endpos__13_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _12;
              MenhirLib.EngineTypes.startp = _startpos__12_;
              MenhirLib.EngineTypes.endp = _endpos__12_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _14 : (Parsetree.attributes) = Obj.magic _14 in
        let _13 : (Parsetree.attributes) = Obj.magic _13 in
        let _12 : (Longident.t) = Obj.magic _12 in
        let _5 : unit = Obj.magic _5 in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__14_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _14 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41002 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__14_ in
        let attrs2 =
          let _1 = _13 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41011 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let lid =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41024 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41037 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41045 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3001 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Te.mk_exception ~attrs
      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
    , ext )
# 41058 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2515 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 41089 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2517 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 41123 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs0 : (string Location.loc list) = Obj.magic xs0 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let xs = xs0 in
          
# 2418 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 41174 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2519 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 41183 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss000;
          MenhirLib.EngineTypes.startp = _startpos_xss000_;
          MenhirLib.EngineTypes.endp = _endpos_xss000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss000 : (Parsetree.structure_item list list) = Obj.magic xss000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss000_ in
        let _endpos = _endpos_xss000_ in
        let _v : (Parsetree.structure) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_xss00_ = _startpos_xss000_ in
          let xss00 = xss000 in
          let _1 =
            let xss0 = xss00 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 41216 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let items =
                
# 915 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 41224 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1299 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 41230 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( xs @ ys )
# 41236 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_xss00_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 837 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 41246 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1292 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 41252 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xss000;
          MenhirLib.EngineTypes.startp = _startpos_xss000_;
          MenhirLib.EngineTypes.endp = _endpos_xss000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000000;
            MenhirLib.EngineTypes.startp = _startpos__100000000_;
            MenhirLib.EngineTypes.endp = _endpos__100000000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e0000000;
              MenhirLib.EngineTypes.startp = _startpos_e0000000_;
              MenhirLib.EngineTypes.endp = _endpos_e0000000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xss000 : (Parsetree.structure_item list list) = Obj.magic xss000 in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e0000000_ in
        let _endpos = _endpos_xss000_ in
        let _v : (Parsetree.structure) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_e000000_ = _startpos_e0000000_ in
          let _endpos__10000000_ = _endpos__100000000_ in
          let xss00 = xss000 in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let _endpos__1000000_ = _endpos__10000000_ in
            let xss0 = xss00 in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 41304 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _endpos__100000_ = _endpos__1000000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let items =
                let _startpos_e000_ = _startpos_e0000_ in
                let _endpos__10000_ = _endpos__100000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _endpos__1000_ = _endpos__10000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _startpos_e0_ = _startpos_e00_ in
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41334 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      
# 1306 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 41340 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e0_ in
                    let _startpos = _startpos__1_ in
                    
# 849 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 41348 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos__1_ = _endpos__1000_ in
                  let _startpos__1_ = _startpos_e00_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 868 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 41359 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 917 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 41365 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1299 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 41371 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( xs @ ys )
# 41377 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_e000000_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 837 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 41387 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1292 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 41393 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3757 "src/ocaml/preprocess/parser_raw.mly"
    ( val_of_lwt_bindings ~loc:_loc _1 )
# 41421 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1321 "src/ocaml/preprocess/parser_raw.mly"
      ( val_of_let_bindings ~loc:_sloc _1 )
# 41449 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _110;
            MenhirLib.EngineTypes.startp = _startpos__110_;
            MenhirLib.EngineTypes.endp = _endpos__110_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Parsetree.attributes) = Obj.magic _1000 in
        let _110 : (Parsetree.extension) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__1_ = _startpos__11_ in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _1 = _10 in
              
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41492 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__2_ = _endpos__10_ in
            let _endpos = _endpos__2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1324 "src/ocaml/preprocess/parser_raw.mly"
        ( let docs = symbol_docs _sloc in
          Pstr_extension (_1, add_docs_attrs docs _2) )
# 41503 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 884 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 41514 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41520 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1327 "src/ocaml/preprocess/parser_raw.mly"
        ( Pstr_attribute _1 )
# 41551 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 884 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 41562 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41568 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1331 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 41599 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 41610 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41616 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.value_description * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1333 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 41647 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 41658 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41664 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs00000;
          MenhirLib.EngineTypes.startp = _startpos_bs00000_;
          MenhirLib.EngineTypes.endp = _endpos_bs00000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a00000;
            MenhirLib.EngineTypes.startp = _startpos_a00000_;
            MenhirLib.EngineTypes.endp = _endpos_a00000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs00000 : (Parsetree.type_declaration list) = Obj.magic bs00000 in
        let a00000 : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a00000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a00000_ in
        let _endpos = _endpos_bs00000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos_bs0000_ = _endpos_bs00000_ in
          let _startpos_a0000_ = _startpos_a00000_ in
          let bs0000 = bs00000 in
          let a0000 = a00000 in
          let _1 =
            let bs000 = bs0000 in
            let a000 = a0000 in
            let _1 =
              let bs00 = bs000 in
              let a00 = a000 in
              let _1 =
                let bs0 = bs00 in
                let a0 = a00 in
                let _1 =
                  let bs = bs0 in
                  let a = a0 in
                  
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 41713 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2847 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 41719 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2830 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41725 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1335 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_type _1 )
# 41731 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs0000_ in
          let _startpos__1_ = _startpos_a0000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 41742 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41748 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _120000;
          MenhirLib.EngineTypes.startp = _startpos__120000_;
          MenhirLib.EngineTypes.endp = _endpos__120000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _110000;
                  MenhirLib.EngineTypes.startp = _startpos__110000_;
                  MenhirLib.EngineTypes.endp = _endpos__110000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _100000;
                      MenhirLib.EngineTypes.startp = _startpos__100000_;
                      MenhirLib.EngineTypes.endp = _endpos__100000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext0000;
                        MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _13000;
                          MenhirLib.EngineTypes.startp = _startpos__13000_;
                          MenhirLib.EngineTypes.endp = _endpos__13000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _120000 : (Parsetree.attributes) = Obj.magic _120000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _110000 : (Longident.t) = Obj.magic _110000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _13000 : unit = Obj.magic _13000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__13000_ in
        let _endpos = _endpos__120000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__1300_ = _startpos__13000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _12000 = _120000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _11000 = _110000 in
          let params000 = params0000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1300 = _13000 in
          let _1 =
            let _startpos__130_ = _startpos__1300_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1200 = _12000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1100 = _11000 in
            let params00 = params000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _130 = _1300 in
            let _1 =
              let _startpos__13_ = _startpos__130_ in
              let _endpos__120_ = _endpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _120 = _1200 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _110 = _1100 in
              let params0 = params00 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _13 = _130 in
              let _1 =
                let _endpos__12_ = _endpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__13_ in
                let _12 = _120 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _11 = _110 in
                let params = params0 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _13 in
                let attrs2 =
                  let _1 = _12 in
                  
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41879 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__12_ in
                let cs =
                  let xs = xs0 in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 41888 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41901 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  
# 3563 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 41908 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41916 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3084 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 41928 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3067 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41934 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1337 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 41940 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__12000_ in
          let _startpos__1_ = _startpos__1300_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 41951 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41957 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _130000;
          MenhirLib.EngineTypes.startp = _startpos__130000_;
          MenhirLib.EngineTypes.endp = _endpos__130000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00000;
            MenhirLib.EngineTypes.startp = _startpos_xs00000_;
            MenhirLib.EngineTypes.endp = _endpos_xs00000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = priv0000;
              MenhirLib.EngineTypes.startp = _startpos_priv0000_;
              MenhirLib.EngineTypes.endp = _endpos_priv0000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70000;
                MenhirLib.EngineTypes.startp = _startpos__70000_;
                MenhirLib.EngineTypes.endp = _endpos__70000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _120000;
                  MenhirLib.EngineTypes.startp = _startpos__120000_;
                  MenhirLib.EngineTypes.endp = _endpos__120000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params0000;
                    MenhirLib.EngineTypes.startp = _startpos_params0000_;
                    MenhirLib.EngineTypes.endp = _endpos_params0000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _110000;
                      MenhirLib.EngineTypes.startp = _startpos__110000_;
                      MenhirLib.EngineTypes.endp = _endpos__110000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _100000;
                        MenhirLib.EngineTypes.startp = _startpos__100000_;
                        MenhirLib.EngineTypes.endp = _endpos__100000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ext0000;
                          MenhirLib.EngineTypes.startp = _startpos_ext0000_;
                          MenhirLib.EngineTypes.endp = _endpos_ext0000_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _14000;
                            MenhirLib.EngineTypes.startp = _startpos__14000_;
                            MenhirLib.EngineTypes.endp = _endpos__14000_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _130000 : (Parsetree.attributes) = Obj.magic _130000 in
        let xs00000 : (Parsetree.extension_constructor list) = Obj.magic xs00000 in
        let priv0000 : (Asttypes.private_flag) = Obj.magic priv0000 in
        let _70000 : unit = Obj.magic _70000 in
        let _120000 : (Longident.t) = Obj.magic _120000 in
        let params0000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params0000 in
        let _110000 : unit = Obj.magic _110000 in
        let _100000 : (Parsetree.attributes) = Obj.magic _100000 in
        let ext0000 : (string Location.loc option) = Obj.magic ext0000 in
        let _14000 : unit = Obj.magic _14000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__14000_ in
        let _endpos = _endpos__130000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__1400_ = _startpos__14000_ in
          let _endpos__13000_ = _endpos__130000_ in
          let _endpos__12000_ = _endpos__120000_ in
          let _startpos__12000_ = _startpos__120000_ in
          let _endpos__11000_ = _endpos__110000_ in
          let _startpos__11000_ = _startpos__110000_ in
          let _13000 = _130000 in
          let xs0000 = xs00000 in
          let priv000 = priv0000 in
          let _7000 = _70000 in
          let _12000 = _120000 in
          let params000 = params0000 in
          let _11000 = _110000 in
          let _10000 = _100000 in
          let ext000 = ext0000 in
          let _1400 = _14000 in
          let _1 =
            let _startpos__140_ = _startpos__1400_ in
            let _endpos__1300_ = _endpos__13000_ in
            let _endpos__1200_ = _endpos__12000_ in
            let _startpos__1200_ = _startpos__12000_ in
            let _endpos__1100_ = _endpos__11000_ in
            let _startpos__1100_ = _startpos__11000_ in
            let _1300 = _13000 in
            let xs000 = xs0000 in
            let priv00 = priv000 in
            let _700 = _7000 in
            let _1200 = _12000 in
            let params00 = params000 in
            let _1100 = _11000 in
            let _1000 = _10000 in
            let ext00 = ext000 in
            let _140 = _1400 in
            let _1 =
              let _startpos__14_ = _startpos__140_ in
              let _endpos__130_ = _endpos__1300_ in
              let _endpos__120_ = _endpos__1200_ in
              let _startpos__120_ = _startpos__1200_ in
              let _endpos__110_ = _endpos__1100_ in
              let _startpos__110_ = _startpos__1100_ in
              let _130 = _1300 in
              let xs00 = xs000 in
              let priv0 = priv00 in
              let _70 = _700 in
              let _120 = _1200 in
              let params0 = params00 in
              let _110 = _1100 in
              let _100 = _1000 in
              let ext0 = ext00 in
              let _14 = _140 in
              let _1 =
                let _endpos__13_ = _endpos__130_ in
                let _endpos__12_ = _endpos__120_ in
                let _startpos__12_ = _startpos__120_ in
                let _endpos__11_ = _endpos__110_ in
                let _startpos__11_ = _startpos__110_ in
                let _startpos__1_ = _startpos__14_ in
                let _13 = _130 in
                let xs0 = xs00 in
                let priv = priv0 in
                let _7 = _70 in
                let _12 = _120 in
                let params = params0 in
                let _11 = _110 in
                let _10 = _100 in
                let ext = ext0 in
                let _1 = _14 in
                let attrs2 =
                  let _1 = _13 in
                  
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42106 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__13_ in
                let cs =
                  let xs = xs0 in
                  
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 42115 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let tid =
                  let _endpos__1_ = _endpos__12_ in
                  let _startpos__1_ = _startpos__12_ in
                  let _1 = _12 in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42128 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  let _endpos__1_ = _endpos__11_ in
                  let _startpos__1_ = _startpos__11_ in
                  let _1 = _11 in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3564 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 42141 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _10 in
                  
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42149 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3084 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 42161 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3067 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42167 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1337 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 42173 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__13000_ in
          let _startpos__1_ = _startpos__1400_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42184 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42190 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1339 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_exception _1 )
# 42221 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42232 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42238 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12000;
          MenhirLib.EngineTypes.startp = _startpos__12000_;
          MenhirLib.EngineTypes.endp = _endpos__12000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = body000;
            MenhirLib.EngineTypes.startp = _startpos_body000_;
            MenhirLib.EngineTypes.endp = _endpos_body000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11000;
              MenhirLib.EngineTypes.startp = _startpos__11000_;
              MenhirLib.EngineTypes.endp = _endpos__11000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10000;
                MenhirLib.EngineTypes.startp = _startpos__10000_;
                MenhirLib.EngineTypes.endp = _endpos__10000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ext000;
                  MenhirLib.EngineTypes.startp = _startpos_ext000_;
                  MenhirLib.EngineTypes.endp = _endpos_ext000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1300;
                    MenhirLib.EngineTypes.startp = _startpos__1300_;
                    MenhirLib.EngineTypes.endp = _endpos__1300_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12000 : (Parsetree.attributes) = Obj.magic _12000 in
        let body000 : (Parsetree.module_expr) = Obj.magic body000 in
        let _11000 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42286 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _11000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1300 : unit = Obj.magic _1300 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1300_ in
        let _endpos = _endpos__12000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__130_ = _startpos__1300_ in
          let _endpos__1200_ = _endpos__12000_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _startpos__1100_ = _startpos__11000_ in
          let _1200 = _12000 in
          let body00 = body000 in
          let _1100 = _11000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _130 = _1300 in
          let _1 =
            let _startpos__13_ = _startpos__130_ in
            let _endpos__120_ = _endpos__1200_ in
            let _endpos__110_ = _endpos__1100_ in
            let _startpos__110_ = _startpos__1100_ in
            let _120 = _1200 in
            let body0 = body00 in
            let _110 = _1100 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _13 = _130 in
            let _1 =
              let _endpos__12_ = _endpos__120_ in
              let _endpos__11_ = _endpos__110_ in
              let _startpos__11_ = _startpos__110_ in
              let _startpos__1_ = _startpos__13_ in
              let _12 = _120 in
              let body = body0 in
              let _11 = _110 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _13 in
              let attrs2 =
                let _1 = _12 in
                
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42332 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__12_ in
              let uid =
                let _endpos__1_ = _endpos__11_ in
                let _startpos__1_ = _startpos__11_ in
                let _1 = _11 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42346 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _10 in
                
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42354 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1365 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let loc = make_loc _sloc in
      let attrs = attrs1 @ attrs2 in
      let body = Mb.mk uid body ~attrs ~loc ~docs in
      Pstr_module body, ext )
# 42367 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1341 "src/ocaml/preprocess/parser_raw.mly"
        ( _1 )
# 42373 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1200_ in
          let _startpos__1_ = _startpos__130_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42384 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42390 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body00000;
              MenhirLib.EngineTypes.startp = _startpos_body00000_;
              MenhirLib.EngineTypes.endp = _endpos_body00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1100000;
                MenhirLib.EngineTypes.startp = _startpos__1100000_;
                MenhirLib.EngineTypes.endp = _endpos__1100000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _400000;
                  MenhirLib.EngineTypes.startp = _startpos__400000_;
                  MenhirLib.EngineTypes.endp = _endpos__400000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _1000000;
                    MenhirLib.EngineTypes.startp = _startpos__1000000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = ext00000;
                      MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                      MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _130000;
                        MenhirLib.EngineTypes.startp = _startpos__130000_;
                        MenhirLib.EngineTypes.endp = _endpos__130000_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.module_binding list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let body00000 : (Parsetree.module_expr) = Obj.magic body00000 in
        let _1100000 : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42449 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1100000 in
        let _400000 : unit = Obj.magic _400000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let body0000 = body00000 in
          let _110000 = _1100000 in
          let _40000 = _400000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let body000 = body0000 in
            let _11000 = _110000 in
            let _4000 = _40000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let body00 = body000 in
              let _1100 = _11000 in
              let _400 = _4000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let body0 = body00 in
                let _110 = _1100 in
                let _40 = _400 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let body = body0 in
                  let _11 = _110 in
                  let _4 = _40 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42528 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let uid =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42542 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42550 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1400 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    ext,
    Mb.mk uid body ~attrs ~loc ~docs
  )
# 42565 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 42571 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1388 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42577 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1343 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_recmodule _1 )
# 42583 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42594 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42600 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1345 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
# 42631 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42642 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42648 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.open_declaration * string Location.loc option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1347 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_open body, ext) )
# 42679 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42690 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42696 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = bs0000;
          MenhirLib.EngineTypes.startp = _startpos_bs0000_;
          MenhirLib.EngineTypes.endp = _endpos_bs0000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1200000;
            MenhirLib.EngineTypes.startp = _startpos__1200000_;
            MenhirLib.EngineTypes.endp = _endpos__1200000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = body00000;
              MenhirLib.EngineTypes.startp = _startpos_body00000_;
              MenhirLib.EngineTypes.endp = _endpos_body00000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _1100000;
                MenhirLib.EngineTypes.startp = _startpos__1100000_;
                MenhirLib.EngineTypes.endp = _endpos__1100000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = params00000;
                  MenhirLib.EngineTypes.startp = _startpos_params00000_;
                  MenhirLib.EngineTypes.endp = _endpos_params00000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = virt00000;
                    MenhirLib.EngineTypes.startp = _startpos_virt00000_;
                    MenhirLib.EngineTypes.endp = _endpos_virt00000_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _1000000;
                      MenhirLib.EngineTypes.startp = _startpos__1000000_;
                      MenhirLib.EngineTypes.endp = _endpos__1000000_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ext00000;
                        MenhirLib.EngineTypes.startp = _startpos_ext00000_;
                        MenhirLib.EngineTypes.endp = _endpos_ext00000_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _130000;
                          MenhirLib.EngineTypes.startp = _startpos__130000_;
                          MenhirLib.EngineTypes.endp = _endpos__130000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs0000 : (Parsetree.class_declaration list) = Obj.magic bs0000 in
        let _1200000 : (Parsetree.attributes) = Obj.magic _1200000 in
        let body00000 : (Parsetree.class_expr) = Obj.magic body00000 in
        let _1100000 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42760 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1100000 in
        let params00000 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params00000 in
        let virt00000 : (Asttypes.virtual_flag) = Obj.magic virt00000 in
        let _1000000 : (Parsetree.attributes) = Obj.magic _1000000 in
        let ext00000 : (string Location.loc option) = Obj.magic ext00000 in
        let _130000 : unit = Obj.magic _130000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__130000_ in
        let _endpos = _endpos_bs0000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos_bs000_ = _endpos_bs0000_ in
          let _startpos__13000_ = _startpos__130000_ in
          let _endpos__120000_ = _endpos__1200000_ in
          let _endpos__110000_ = _endpos__1100000_ in
          let _startpos__110000_ = _startpos__1100000_ in
          let bs000 = bs0000 in
          let _120000 = _1200000 in
          let body0000 = body00000 in
          let _110000 = _1100000 in
          let params0000 = params00000 in
          let virt0000 = virt00000 in
          let _100000 = _1000000 in
          let ext0000 = ext00000 in
          let _13000 = _130000 in
          let _1 =
            let _startpos__1300_ = _startpos__13000_ in
            let _endpos__12000_ = _endpos__120000_ in
            let _endpos__11000_ = _endpos__110000_ in
            let _startpos__11000_ = _startpos__110000_ in
            let bs00 = bs000 in
            let _12000 = _120000 in
            let body000 = body0000 in
            let _11000 = _110000 in
            let params000 = params0000 in
            let virt000 = virt0000 in
            let _10000 = _100000 in
            let ext000 = ext0000 in
            let _1300 = _13000 in
            let _1 =
              let _startpos__130_ = _startpos__1300_ in
              let _endpos__1200_ = _endpos__12000_ in
              let _endpos__1100_ = _endpos__11000_ in
              let _startpos__1100_ = _startpos__11000_ in
              let bs0 = bs00 in
              let _1200 = _12000 in
              let body00 = body000 in
              let _1100 = _11000 in
              let params00 = params000 in
              let virt00 = virt000 in
              let _1000 = _10000 in
              let ext00 = ext000 in
              let _130 = _1300 in
              let _1 =
                let _startpos__13_ = _startpos__130_ in
                let _endpos__120_ = _endpos__1200_ in
                let _endpos__110_ = _endpos__1100_ in
                let _startpos__110_ = _startpos__1100_ in
                let bs = bs0 in
                let _120 = _1200 in
                let body0 = body00 in
                let _110 = _1100 in
                let params0 = params00 in
                let virt0 = virt00 in
                let _100 = _1000 in
                let ext0 = ext00 in
                let _13 = _130 in
                let a =
                  let _endpos__12_ = _endpos__120_ in
                  let _endpos__11_ = _endpos__110_ in
                  let _startpos__11_ = _startpos__110_ in
                  let _startpos__1_ = _startpos__13_ in
                  let _12 = _120 in
                  let body = body0 in
                  let _11 = _110 in
                  let params = params0 in
                  let virt = virt0 in
                  let _10 = _100 in
                  let ext = ext0 in
                  let _1 = _13 in
                  let attrs2 =
                    let _1 = _12 in
                    
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42845 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__12_ in
                  let id =
                    let _endpos__1_ = _endpos__11_ in
                    let _startpos__1_ = _startpos__11_ in
                    let _1 = _11 in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42859 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _10 in
                    
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42867 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1719 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext,
    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
  )
# 42882 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1076 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 42888 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1708 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42894 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1349 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class l, ext) )
# 42900 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs000_ in
          let _startpos__1_ = _startpos__13000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42911 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42917 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1351 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class_type l, ext) )
# 42948 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 42959 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42965 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11000;
          MenhirLib.EngineTypes.startp = _startpos__11000_;
          MenhirLib.EngineTypes.endp = _endpos__11000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = thing000;
            MenhirLib.EngineTypes.startp = _startpos_thing000_;
            MenhirLib.EngineTypes.endp = _endpos_thing000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10000;
              MenhirLib.EngineTypes.startp = _startpos__10000_;
              MenhirLib.EngineTypes.endp = _endpos__10000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ext000;
                MenhirLib.EngineTypes.startp = _startpos_ext000_;
                MenhirLib.EngineTypes.endp = _endpos_ext000_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1200;
                  MenhirLib.EngineTypes.startp = _startpos__1200_;
                  MenhirLib.EngineTypes.endp = _endpos__1200_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11000 : (Parsetree.attributes) = Obj.magic _11000 in
        let thing000 : (Parsetree.module_expr) = Obj.magic thing000 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let ext000 : (string Location.loc option) = Obj.magic ext000 in
        let _1200 : unit = Obj.magic _1200 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1200_ in
        let _endpos = _endpos__11000_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _startpos__120_ = _startpos__1200_ in
          let _endpos__1100_ = _endpos__11000_ in
          let _1100 = _11000 in
          let thing00 = thing000 in
          let _1000 = _10000 in
          let ext00 = ext000 in
          let _120 = _1200 in
          let _1 =
            let _startpos__12_ = _startpos__120_ in
            let _endpos__110_ = _endpos__1100_ in
            let _110 = _1100 in
            let thing0 = thing00 in
            let _100 = _1000 in
            let ext0 = ext00 in
            let _12 = _120 in
            let _1 =
              let _endpos__11_ = _endpos__110_ in
              let _startpos__1_ = _startpos__12_ in
              let _11 = _110 in
              let thing = thing0 in
              let _10 = _100 in
              let ext = ext0 in
              let _1 = _12 in
              let attrs2 =
                let _1 = _11 in
                
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43040 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__11_ in
              let attrs1 =
                let _1 = _10 in
                
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43049 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1437 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 43063 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1353 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_include _1 )
# 43069 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1100_ in
          let _startpos__1_ = _startpos__120_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 901 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43080 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1355 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43086 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3626 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-" )
# 43111 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3627 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-." )
# 43136 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs000;
            MenhirLib.EngineTypes.startp = _startpos_xs000_;
            MenhirLib.EngineTypes.endp = _endpos_xs000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let xs000 : (Parsetree.core_type list) = Obj.magic xs000 in
        let _3 : (bool) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.row_field) = let _5 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43187 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _4 =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 43200 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 43206 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3354 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43212 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43225 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3340 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _5 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4 )
# 43237 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.row_field) = let _2 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43270 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__11_ in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43284 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3344 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _2 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
# 43296 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          
# 124 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( None )
# 43328 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__10_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43342 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3526 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 43351 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (
# 717 "src/ocaml/preprocess/parser_raw.mly"
       (string * string option)
# 43382 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3530 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (s, _) = _1 in Pdir_string s )
# 43402 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 906 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 43413 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 43419 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43433 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3526 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 43442 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (
# 665 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 43473 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3531 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (n, m) = _1 in Pdir_int (n ,m) )
# 43493 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 906 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 43504 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 43510 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43524 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3526 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 43533 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3532 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 43580 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 906 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 43591 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 43597 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43611 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3526 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 43620 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3533 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 43667 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 906 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 43678 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 43684 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43698 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3526 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 43707 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : unit = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3534 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool false )
# 43754 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 906 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 43765 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 43771 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43785 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3526 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 43794 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : unit = Obj.magic _1000 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let x =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _1 = _10 in
              
# 3535 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool true )
# 43841 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 906 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 43852 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( Some x )
# 43858 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1000_ in
        let dir =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43872 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3526 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 43881 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e000;
              MenhirLib.EngineTypes.startp = _startpos_e000_;
              MenhirLib.EngineTypes.endp = _endpos_e000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _10000 : (Parsetree.attributes) = Obj.magic _10000 in
        let e000 : (Parsetree.expression) = Obj.magic e000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e000_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 825 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 43918 "src/ocaml/preprocess/parser_raw.ml"
        ) = let _1 =
          let _startpos_e00_ = _startpos_e000_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _1000 = _10000 in
          let e00 = e000 in
          let _1 =
            let _startpos_e0_ = _startpos_e00_ in
            let _100 = _1000 in
            let e0 = e00 in
            let _1 =
              let _10 = _100 in
              let e = e0 in
              let attrs =
                let _1 = _10 in
                
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43936 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1306 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 43942 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_e0_ in
            let _startpos = _startpos__1_ in
            
# 849 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 43950 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1000_ in
          let _startpos__1_ = _startpos_e00_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 837 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 43960 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1114 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 43966 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss00;
            MenhirLib.EngineTypes.startp = _startpos_xss00_;
            MenhirLib.EngineTypes.endp = _endpos_xss00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss00 : (Parsetree.structure_item list list) = Obj.magic xss00 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss00_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 825 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 43997 "src/ocaml/preprocess/parser_raw.ml"
        ) = let _1 =
          let _endpos_xss0_ = _endpos_xss00_ in
          let _startpos_xss0_ = _startpos_xss00_ in
          let xss0 = xss00 in
          let _1 =
            let xss = xss0 in
            
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 44007 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss0_ in
          let _startpos__1_ = _startpos_xss0_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 837 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 44017 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1118 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 44023 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 825 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 44054 "src/ocaml/preprocess/parser_raw.ml"
        ) = 
# 1122 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44058 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 825 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 44083 "src/ocaml/preprocess/parser_raw.ml"
        ) = 
# 1125 "src/ocaml/preprocess/parser_raw.mly"
    ( raise End_of_file )
# 44087 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3246 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 44112 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs0000;
          MenhirLib.EngineTypes.startp = _startpos_xs0000_;
          MenhirLib.EngineTypes.endp = _endpos_xs0000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs0000 : (Parsetree.core_type list) = Obj.magic xs0000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0000_ in
        let _endpos = _endpos_xs0000_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_xs000_ = _endpos_xs0000_ in
          let _startpos_xs000_ = _startpos_xs0000_ in
          let xs000 = xs0000 in
          let _1 =
            let xs00 = xs000 in
            let tys =
              let xs0 = xs00 in
              let xs =
                let xs = xs0 in
                
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 44147 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 44153 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3249 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_tuple tys )
# 44159 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs000_ in
          let _startpos__1_ = _startpos_xs000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 44170 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3251 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44176 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2594 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, None) )
# 44207 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2595 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, Some _4) )
# 44250 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2596 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (None, Some _2) )
# 44281 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2921 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, Public, None) )
# 44299 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2923 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 44330 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 44351 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3493 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 44359 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 44390 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3494 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 44400 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * Asttypes.variance) = 
# 2938 "src/ocaml/preprocess/parser_raw.mly"
                                       ( _2, _1 )
# 44431 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2931 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 44449 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Parsetree.core_type * Asttypes.variance) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2933 "src/ocaml/preprocess/parser_raw.mly"
      ( [p] )
# 44474 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xs00;
            MenhirLib.EngineTypes.startp = _startpos_xs00_;
            MenhirLib.EngineTypes.endp = _endpos_xs00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs00 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs00 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let ps =
          let xs0 = xs00 in
          let xs =
            let xs = xs0 in
            
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 44515 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 979 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 44521 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2935 "src/ocaml/preprocess/parser_raw.mly"
      ( ps )
# 44527 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = tyvar00;
          MenhirLib.EngineTypes.startp = _startpos_tyvar00_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar00_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let tyvar00 : (string) = Obj.magic tyvar00 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos_tyvar00_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos_tyvar0_ = _endpos_tyvar00_ in
          let _startpos__10_ = _startpos__100_ in
          let tyvar0 = tyvar00 in
          let _10 = _100 in
          let _1 =
            let tyvar = tyvar0 in
            let _1 = _10 in
            
# 2943 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_var tyvar )
# 44566 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_tyvar0_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 44577 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2946 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44583 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2945 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_any )
# 44614 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 882 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 44625 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2946 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44631 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.variance) = 
# 2950 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Invariant )
# 44649 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 2951 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Covariant )
# 44674 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 2952 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Contravariant )
# 44699 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss000;
            MenhirLib.EngineTypes.startp = _startpos_xss000_;
            MenhirLib.EngineTypes.endp = _endpos_xss000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss000 : (Parsetree.toplevel_phrase list list) = Obj.magic xss000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss000_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 44730 "src/ocaml/preprocess/parser_raw.ml"
        ) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_xss00_ = _startpos_xss000_ in
          let xss00 = xss000 in
          let _1 =
            let xss0 = xss00 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 44742 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _1 =
                
# 915 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 44750 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1145 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44756 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( xs @ ys )
# 44762 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_xss00_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 841 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 44772 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1138 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44778 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = xss000;
            MenhirLib.EngineTypes.startp = _startpos_xss000_;
            MenhirLib.EngineTypes.endp = _endpos_xss000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100000000;
              MenhirLib.EngineTypes.startp = _startpos__100000000_;
              MenhirLib.EngineTypes.endp = _endpos__100000000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = e0000000;
                MenhirLib.EngineTypes.startp = _startpos_e0000000_;
                MenhirLib.EngineTypes.endp = _endpos_e0000000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss000 : (Parsetree.toplevel_phrase list list) = Obj.magic xss000 in
        let _100000000 : (Parsetree.attributes) = Obj.magic _100000000 in
        let e0000000 : (Parsetree.expression) = Obj.magic e0000000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e0000000_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 44821 "src/ocaml/preprocess/parser_raw.ml"
        ) = let _1 =
          let _endpos_xss00_ = _endpos_xss000_ in
          let _startpos_e000000_ = _startpos_e0000000_ in
          let xss00 = xss000 in
          let _10000000 = _100000000 in
          let e000000 = e0000000 in
          let _1 =
            let _startpos_e00000_ = _startpos_e000000_ in
            let xss0 = xss00 in
            let _1000000 = _10000000 in
            let e00000 = e000000 in
            let ys =
              let xss = xss0 in
              
# 260 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.flatten xss )
# 44838 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos_e0000_ = _startpos_e00000_ in
              let _100000 = _1000000 in
              let e0000 = e00000 in
              let _1 =
                let _startpos_e000_ = _startpos_e0000_ in
                let _10000 = _100000 in
                let e000 = e0000 in
                let x =
                  let _startpos_e00_ = _startpos_e000_ in
                  let _1000 = _10000 in
                  let e00 = e000 in
                  let _1 =
                    let _100 = _1000 in
                    let e0 = e00 in
                    let _1 =
                      let _10 = _100 in
                      let e = e0 in
                      let attrs =
                        let _1 = _10 in
                        
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44864 "src/ocaml/preprocess/parser_raw.ml"
                        
                      in
                      
# 1306 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 44870 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    
# 859 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 44876 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e00_ in
                  let _startpos = _startpos__1_ in
                  
# 857 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 44884 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 917 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 44890 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1145 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44896 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( xs @ ys )
# 44902 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xss00_ in
          let _startpos__1_ = _startpos_e000000_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 841 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 44912 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1138 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44918 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 44939 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3424 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 44947 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3425 "src/ocaml/preprocess/parser_raw.mly"
                              ( _2 )
# 44984 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3476 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 45009 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3477 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1, _3) )
# 45046 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = mutable_;
                MenhirLib.EngineTypes.startp = _startpos_mutable__;
                MenhirLib.EngineTypes.endp = _endpos_mutable__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45089 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let mutable_ : (Asttypes.mutable_flag) = Obj.magic mutable_ in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos_ty_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let label =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 45106 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45117 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45125 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          
# 3619 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 45132 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1859 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, mutable_, Cfk_virtual ty), attrs )
# 45138 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45181 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 45198 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45209 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45217 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 45224 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1861 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 45230 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _11;
                  MenhirLib.EngineTypes.startp = _startpos__11_;
                  MenhirLib.EngineTypes.endp = _endpos__11_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45278 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 45296 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45307 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45315 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 45323 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1861 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 45329 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45378 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 45395 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45406 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45415 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__10_ in
        let _startpos__2_ = _startpos__10_ in
        let _1 =
          
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 45424 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__0_ in
        let _startpos__1_ = _endpos__0_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1864 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 45446 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _11;
                    MenhirLib.EngineTypes.startp = _startpos__11_;
                    MenhirLib.EngineTypes.endp = _endpos__11_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _100 : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45500 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _100 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _11 : (Parsetree.attributes) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 3398 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 45518 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45529 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__100_ in
        let _2 =
          let _1 = _11 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45538 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__11_ in
        let _startpos__2_ = _startpos__11_ in
        let _1 =
          let _1 = _10 in
          
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 45548 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__10_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1864 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 45570 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _12;
          MenhirLib.EngineTypes.startp = _startpos__12_;
          MenhirLib.EngineTypes.endp = _endpos__12_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _11;
                MenhirLib.EngineTypes.startp = _startpos__11_;
                MenhirLib.EngineTypes.endp = _endpos__11_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _12 : (Parsetree.attributes) = Obj.magic _12 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _11 : (string) = Obj.magic _11 in
        let _10 : (Parsetree.attributes) = Obj.magic _10 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__12_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _12 in
          
# 3716 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45633 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__12_ in
        let id =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45647 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _10 in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45655 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2792 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~attrs ~loc ~docs,
      ext )
# 45668 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.virtual_flag) = 
# 3583 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Concrete )
# 45686 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.virtual_flag) = 
# 3584 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Virtual )
# 45711 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3607 "src/ocaml/preprocess/parser_raw.mly"
            ( Immutable )
# 45736 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3608 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 45767 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 45798 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3614 "src/ocaml/preprocess/parser_raw.mly"
            ( Public )
# 45823 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 45854 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3616 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 45885 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs000;
          MenhirLib.EngineTypes.startp = _startpos_xs000_;
          MenhirLib.EngineTypes.endp = _endpos_xs000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs000 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs000 in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs000_ in
        let _v : (Parsetree.with_constraint) = let _6 =
          let xs00 = xs000 in
          let _1 =
            let xs0 = xs00 in
            let xs =
              let xs = xs0 in
              
# 253 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
    ( List.rev xs )
# 45946 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 929 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 45952 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2892 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45958 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos_xs000_ in
        let _5 =
          let _1 = _11 in
          
# 3194 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45967 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45980 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3117 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_type
          (_3,
           (Type.mk lident
              ~params:_2
              ~cstrs:_6
              ~manifest:_5
              ~priv:_4
              ~loc:(make_loc _sloc))) )
# 45997 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.core_type) = Obj.magic _11 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _5 =
          let _1 = _11 in
          
# 3194 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46048 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__11_ in
        let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46062 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3130 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_typesubst
         (_3,
           (Type.mk lident
              ~params:_2
              ~manifest:_5
              ~loc:(make_loc _sloc))) )
# 46077 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46127 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46140 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3138 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_module (_2, _4) )
# 46146 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46196 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 845 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46209 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3140 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_modsubst (_2, _4) )
# 46215 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3143 "src/ocaml/preprocess/parser_raw.mly"
                   ( Public )
# 46240 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3144 "src/ocaml/preprocess/parser_raw.mly"
                   ( Private )
# 46271 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
  module Symbols = struct
    
    type _ terminal = 
      | T_error : unit terminal
      | T_WITH : unit terminal
      | T_WHILE_LWT : unit terminal
      | T_WHILE : unit terminal
      | T_WHEN : unit terminal
      | T_VIRTUAL : unit terminal
      | T_VAL : unit terminal
      | T_UNDERSCORE : unit terminal
      | T_UIDENT : (
# 725 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46309 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_TYPE : unit terminal
      | T_TRY_LWT : unit terminal
      | T_TRY : unit terminal
      | T_TRUE : unit terminal
      | T_TO : unit terminal
      | T_TILDE : unit terminal
      | T_THEN : unit terminal
      | T_STRUCT : unit terminal
      | T_STRING : (
# 717 "src/ocaml/preprocess/parser_raw.mly"
       (string * string option)
# 46322 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_STAR : unit terminal
      | T_SIG : unit terminal
      | T_SEMISEMI : unit terminal
      | T_SEMI : unit terminal
      | T_RPAREN : unit terminal
      | T_REC : unit terminal
      | T_RBRACKET : unit terminal
      | T_RBRACE : unit terminal
      | T_QUOTE : unit terminal
      | T_QUESTIONQUESTION : unit terminal
      | T_QUESTION : unit terminal
      | T_PRIVATE : unit terminal
      | T_PREFIXOP : (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46339 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_PLUSEQ : unit terminal
      | T_PLUSDOT : unit terminal
      | T_PLUS : unit terminal
      | T_PERCENT : unit terminal
      | T_OR : unit terminal
      | T_OPTLABEL : (
# 696 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46349 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_OPEN : unit terminal
      | T_OF : unit terminal
      | T_OBJECT : unit terminal
      | T_NONREC : unit terminal
      | T_NEW : unit terminal
      | T_MUTABLE : unit terminal
      | T_MODULE : unit terminal
      | T_MINUSGREATER : unit terminal
      | T_MINUSDOT : unit terminal
      | T_MINUS : unit terminal
      | T_METHOD : unit terminal
      | T_MATCH_LWT : unit terminal
      | T_MATCH : unit terminal
      | T_LPAREN : unit terminal
      | T_LIDENT : (
# 679 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46368 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET_LWT : unit terminal
      | T_LETOP : (
# 661 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46374 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET : unit terminal
      | T_LESSMINUS : unit terminal
      | T_LESS : unit terminal
      | T_LBRACKETPERCENTPERCENT : unit terminal
      | T_LBRACKETPERCENT : unit terminal
      | T_LBRACKETLESS : unit terminal
      | T_LBRACKETGREATER : unit terminal
      | T_LBRACKETBAR : unit terminal
      | T_LBRACKETATATAT : unit terminal
      | T_LBRACKETATAT : unit terminal
      | T_LBRACKETAT : unit terminal
      | T_LBRACKET : unit terminal
      | T_LBRACELESS : unit terminal
      | T_LBRACE : unit terminal
      | T_LAZY : unit terminal
      | T_LABEL : (
# 666 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46394 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INT : (
# 665 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 46399 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INITIALIZER : unit terminal
      | T_INHERIT : unit terminal
      | T_INFIXOP4 : (
# 659 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46406 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP3 : (
# 658 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46411 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP2 : (
# 657 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46416 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP1 : (
# 656 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46421 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP0 : (
# 655 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46426 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INCLUDE : unit terminal
      | T_IN : unit terminal
      | T_IF : unit terminal
      | T_HASHOP : (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46434 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_HASH : unit terminal
      | T_GREATERRBRACKET : unit terminal
      | T_GREATERRBRACE : unit terminal
      | T_GREATERDOT : unit terminal
      | T_GREATER : unit terminal
      | T_FUNCTOR : unit terminal
      | T_FUNCTION : unit terminal
      | T_FUN : unit terminal
      | T_FOR_LWT : unit terminal
      | T_FOR : unit terminal
      | T_FLOAT : (
# 644 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 46449 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_FINALLY_LWT : unit terminal
      | T_FALSE : unit terminal
      | T_EXTERNAL : unit terminal
      | T_EXCEPTION : unit terminal
      | T_EQUAL : unit terminal
      | T_EOL : unit terminal
      | T_EOF : unit terminal
      | T_END : unit terminal
      | T_ELSE : unit terminal
      | T_DOWNTO : unit terminal
      | T_DOTTILDE : unit terminal
      | T_DOTOP : (
# 660 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46465 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DOTLESS : unit terminal
      | T_DOTDOT : unit terminal
      | T_DOT : unit terminal
      | T_DONE : unit terminal
      | T_DOCSTRING : (
# 733 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 46474 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DO : unit terminal
      | T_CONSTRAINT : unit terminal
      | T_COMMENT : (
# 732 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 46481 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_COMMA : unit terminal
      | T_COLONGREATER : unit terminal
      | T_COLONEQUAL : unit terminal
      | T_COLONCOLON : unit terminal
      | T_COLON : unit terminal
      | T_CLASS : unit terminal
      | T_CHAR : (
# 624 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 46492 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_BEGIN : unit terminal
      | T_BARRBRACKET : unit terminal
      | T_BARBAR : unit terminal
      | T_BAR : unit terminal
      | T_BANG : unit terminal
      | T_BACKQUOTE : unit terminal
      | T_ASSERT : unit terminal
      | T_AS : unit terminal
      | T_ANDOP : (
# 662 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46505 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_AND : unit terminal
      | T_AMPERSAND : unit terminal
      | T_AMPERAMPER : unit terminal
    
    type _ nonterminal = 
      | N_with_type_binder : (Asttypes.private_flag) nonterminal
      | N_with_constraint : (Parsetree.with_constraint) nonterminal
      | N_virtual_with_private_flag : (Asttypes.private_flag) nonterminal
      | N_virtual_with_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_virtual_flag : (Asttypes.virtual_flag) nonterminal
      | N_value_description : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_value : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_val_longident : (Longident.t) nonterminal
      | N_val_ident : (string) nonterminal
      | N_use_file : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 46525 "src/ocaml/preprocess/parser_raw.ml"
    ) nonterminal
      | N_type_variance : (Asttypes.variance) nonterminal
      | N_type_variable : (Parsetree.core_type) nonterminal
      | N_type_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_type_parameter : (Parsetree.core_type * Asttypes.variance) nonterminal
      | N_type_longident : (Longident.t) nonterminal
      | N_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_type_constraint : (Parsetree.core_type option * Parsetree.core_type option) nonterminal
      | N_tuple_type : (Parsetree.core_type) nonterminal
      | N_toplevel_phrase : (
# 825 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 46538 "src/ocaml/preprocess/parser_raw.ml"
    ) nonterminal
      | N_toplevel_directive : (Parsetree.toplevel_phrase) nonterminal
      | N_tag_field : (Parsetree.row_field) nonterminal
      | N_subtractive : (string) nonterminal
      | N_structure_item : (Parsetree.structure_item) nonterminal
      | N_structure : (Parsetree.structure) nonterminal
      | N_strict_binding : (Parsetree.expression) nonterminal
      | N_str_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_single_attr_id : (string) nonterminal
      | N_simple_pattern_not_ident : (Parsetree.pattern) nonterminal
      | N_simple_pattern : (Parsetree.pattern) nonterminal
      | N_simple_expr : (Parsetree.expression) nonterminal
      | N_simple_delimited_pattern : (Parsetree.pattern) nonterminal
      | N_signed_constant : (Parsetree.constant) nonterminal
      | N_signature_item : (Parsetree.signature_item) nonterminal
      | N_signature : (Parsetree.signature) nonterminal
      | N_sig_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_seq_expr : (Parsetree.expression) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ : ((Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_pattern_ : (Parsetree.pattern list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ : ((string Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_expr_ : (Parsetree.expression list) nonterminal
      | N_row_field : (Parsetree.row_field) nonterminal
      | N_reversed_separated_nontrivial_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_expr_ : (Parsetree.expression list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_type_parameter_ : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_BAR_row_field_ : (Parsetree.row_field list) nonterminal
      | N_reversed_separated_nonempty_llist_AND_with_constraint_ : (Parsetree.with_constraint list) nonterminal
      | N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ : (Parsetree.core_type list) nonterminal
      | N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ : (Parsetree.case list) nonterminal
      | N_reversed_nonempty_llist_typevar_ : (string Location.loc list) nonterminal
      | N_reversed_nonempty_llist_name_tag_ : (string list) nonterminal
      | N_reversed_nonempty_llist_labeled_simple_expr_ : ((Asttypes.arg_label * Parsetree.expression) list) nonterminal
      | N_reversed_nonempty_llist_functor_arg_ : ((string Location.loc * Parsetree.module_type option) list) nonterminal
      | N_reversed_llist_preceded_CONSTRAINT_constrain__ : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) nonterminal
      | N_reversed_bar_llist_extension_constructor_declaration_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_extension_constructor_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_constructor_declaration_ : (Parsetree.constructor_declaration list) nonterminal
      | N_record_expr_content : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_rec_flag : (Asttypes.rec_flag) nonterminal
      | N_private_virtual_flags : (Asttypes.private_flag * Asttypes.virtual_flag) nonterminal
      | N_private_flag : (Asttypes.private_flag) nonterminal
      | N_primitive_declaration : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_post_item_attribute : (Parsetree.attribute) nonterminal
      | N_possibly_poly_core_type_no_attr_ : (Parsetree.core_type) nonterminal
      | N_possibly_poly_core_type_ : (Parsetree.core_type) nonterminal
      | N_payload : (Parsetree.payload) nonterminal
      | N_pattern_var : (Parsetree.pattern) nonterminal
      | N_pattern_no_exn : (Parsetree.pattern) nonterminal
      | N_pattern_gen : (Parsetree.pattern) nonterminal
      | N_pattern_comma_list_pattern_no_exn_ : (Parsetree.pattern list) nonterminal
      | N_pattern_comma_list_pattern_ : (Parsetree.pattern list) nonterminal
      | N_pattern : (Parsetree.pattern) nonterminal
      | N_parse_pattern : (
# 833 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.pattern)
# 46599 "src/ocaml/preprocess/parser_raw.ml"
    ) nonterminal
      | N_parse_expression : (
# 831 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.expression)
# 46604 "src/ocaml/preprocess/parser_raw.ml"
    ) nonterminal
      | N_parse_core_type : (
# 829 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.core_type)
# 46609 "src/ocaml/preprocess/parser_raw.ml"
    ) nonterminal
      | N_paren_module_expr : (Parsetree.module_expr) nonterminal
      | N_optlabel : (string) nonterminal
      | N_option_type_constraint_ : ((Parsetree.core_type option * Parsetree.core_type option) option) nonterminal
      | N_option_preceded_EQUAL_seq_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_EQUAL_pattern__ : (Parsetree.pattern option) nonterminal
      | N_option_preceded_EQUAL_module_type__ : (Parsetree.module_type option) nonterminal
      | N_option_preceded_EQUAL_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_COLON_core_type__ : (Parsetree.core_type option) nonterminal
      | N_option_preceded_AS_mkrhs_LIDENT___ : (string Location.loc option) nonterminal
      | N_option_SEMI_ : (unit option) nonterminal
      | N_option_BAR_ : (unit option) nonterminal
      | N_opt_ampersand : (bool) nonterminal
      | N_operator : (string) nonterminal
      | N_open_description : (Parsetree.open_description * string Location.loc option) nonterminal
      | N_open_declaration : (Parsetree.open_declaration * string Location.loc option) nonterminal
      | N_nonempty_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_nonempty_list_raw_string_ : (string list) nonterminal
      | N_nonempty_list_mkrhs_LIDENT__ : (string Location.loc list) nonterminal
      | N_name_tag : (string) nonterminal
      | N_mutable_virtual_flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) nonterminal
      | N_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_mty_longident : (Longident.t) nonterminal
      | N_module_type_declaration : (Parsetree.module_type_declaration * string Location.loc option) nonterminal
      | N_module_type : (Parsetree.module_type) nonterminal
      | N_module_subst : (Parsetree.module_substitution * string Location.loc option) nonterminal
      | N_module_expr : (Parsetree.module_expr) nonterminal
      | N_module_declaration_body : (Parsetree.module_type) nonterminal
      | N_module_binding_body : (Parsetree.module_expr) nonterminal
      | N_mod_longident : (Longident.t) nonterminal
      | N_mod_ext_longident : (Longident.t) nonterminal
      | N_method_ : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_meth_list : (Parsetree.object_field list * Asttypes.closed_flag) nonterminal
      | N_match_case : (Parsetree.case) nonterminal
      | N_lwt_bindings : (Ast_helper.let_bindings) nonterminal
      | N_lwt_binding : (Ast_helper.let_bindings) nonterminal
      | N_listx_SEMI_record_pat_field_UNDERSCORE_ : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) nonterminal
      | N_list_use_file_element_ : (Parsetree.toplevel_phrase list list) nonterminal
      | N_list_text_str_structure_item__ : (Parsetree.structure_item list list) nonterminal
      | N_list_text_cstr_class_field__ : (Parsetree.class_field list list) nonterminal
      | N_list_text_csig_class_sig_field__ : (Parsetree.class_type_field list list) nonterminal
      | N_list_structure_element_ : (Parsetree.structure_item list list) nonterminal
      | N_list_signature_element_ : (Parsetree.signature_item list list) nonterminal
      | N_list_post_item_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_generic_and_type_declaration_type_subst_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_generic_and_type_declaration_type_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_and_module_declaration_ : (Parsetree.module_declaration list) nonterminal
      | N_list_and_module_binding_ : (Parsetree.module_binding list) nonterminal
      | N_list_and_class_type_declaration_ : (Parsetree.class_type_declaration list) nonterminal
      | N_list_and_class_description_ : (Parsetree.class_description list) nonterminal
      | N_list_and_class_declaration_ : (Parsetree.class_declaration list) nonterminal
      | N_letop_bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) nonterminal
      | N_letop_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_let_pattern : (Parsetree.pattern) nonterminal
      | N_let_bindings_no_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_bindings_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_labeled_simple_pattern : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) nonterminal
      | N_labeled_simple_expr : (Asttypes.arg_label * Parsetree.expression) nonterminal
      | N_label_longident : (Longident.t) nonterminal
      | N_label_let_pattern : (string * Parsetree.pattern) nonterminal
      | N_label_declarations : (Parsetree.label_declaration list) nonterminal
      | N_label_declaration_semi : (Parsetree.label_declaration) nonterminal
      | N_label_declaration : (Parsetree.label_declaration) nonterminal
      | N_item_extension : (Parsetree.extension) nonterminal
      | N_interface : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.signature)
# 46680 "src/ocaml/preprocess/parser_raw.ml"
    ) nonterminal
      | N_implementation : (
# 821 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.structure)
# 46685 "src/ocaml/preprocess/parser_raw.ml"
    ) nonterminal
      | N_ident : (string) nonterminal
      | N_generic_type_declaration_nonrec_flag_type_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_constructor_declaration_epsilon_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generic_constructor_declaration_BAR_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generalized_constructor_arguments : (Parsetree.constructor_arguments * Parsetree.core_type option) nonterminal
      | N_functor_args : ((string Location.loc * Parsetree.module_type option) list) nonterminal
      | N_functor_arg_name : (string) nonterminal
      | N_functor_arg : (string Location.loc * Parsetree.module_type option) nonterminal
      | N_function_type : (Parsetree.core_type) nonterminal
      | N_fun_def : (Parsetree.expression) nonterminal
      | N_fun_binding : (Parsetree.expression) nonterminal
      | N_formal_class_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_floating_attribute : (Parsetree.attribute) nonterminal
      | N_extension_constructor_rebind_epsilon_ : (Parsetree.extension_constructor) nonterminal
      | N_extension_constructor_rebind_BAR_ : (Parsetree.extension_constructor) nonterminal
      | N_extension : (Parsetree.extension) nonterminal
      | N_ext : (string Location.loc option) nonterminal
      | N_expr : (Parsetree.expression) nonterminal
      | N_direction_flag : (Asttypes.direction_flag) nonterminal
      | N_core_type : (Parsetree.core_type) nonterminal
      | N_constructor_declarations : (Parsetree.constructor_declaration list) nonterminal
      | N_constructor_arguments : (Parsetree.constructor_arguments) nonterminal
      | N_constrain_field : (Parsetree.core_type * Parsetree.core_type) nonterminal
      | N_constr_longident : (Longident.t) nonterminal
      | N_constr_ident : (string) nonterminal
      | N_constant : (Parsetree.constant) nonterminal
      | N_clty_longident : (Longident.t) nonterminal
      | N_class_type_declarations : (string Location.loc option * Parsetree.class_type_declaration list) nonterminal
      | N_class_type : (Parsetree.class_type) nonterminal
      | N_class_simple_expr : (Parsetree.class_expr) nonterminal
      | N_class_signature : (Parsetree.class_type) nonterminal
      | N_class_sig_field : (Parsetree.class_type_field) nonterminal
      | N_class_self_type : (Parsetree.core_type) nonterminal
      | N_class_self_pattern : (Parsetree.pattern) nonterminal
      | N_class_longident : (Longident.t) nonterminal
      | N_class_fun_def : (Parsetree.class_expr) nonterminal
      | N_class_fun_binding : (Parsetree.class_expr) nonterminal
      | N_class_field : (Parsetree.class_field) nonterminal
      | N_class_expr : (Parsetree.class_expr) nonterminal
      | N_attribute : (Parsetree.attribute) nonterminal
      | N_attr_id : (string Location.loc) nonterminal
      | N_atomic_type : (Parsetree.core_type) nonterminal
      | N_and_let_binding : (Ast_helper.let_binding) nonterminal
      | N_alias_type : (Parsetree.core_type) nonterminal
      | N_additive : (string) nonterminal
    
  end
  
  include Symbols
  
  include MenhirLib.InspectionTableInterpreter.Make (Tables) (struct
    
    include TI
    
    include Symbols
    
    include MenhirLib.InspectionTableInterpreter.Symbols (Symbols)
    
    let terminal =
      fun t ->
        match t with
        | 0 ->
            X (T T_error)
        | 1 ->
            X (T T_WITH)
        | 2 ->
            X (T T_WHILE_LWT)
        | 3 ->
            X (T T_WHILE)
        | 4 ->
            X (T T_WHEN)
        | 5 ->
            X (T T_VIRTUAL)
        | 6 ->
            X (T T_VAL)
        | 7 ->
            X (T T_UNDERSCORE)
        | 8 ->
            X (T T_UIDENT)
        | 9 ->
            X (T T_TYPE)
        | 10 ->
            X (T T_TRY_LWT)
        | 11 ->
            X (T T_TRY)
        | 12 ->
            X (T T_TRUE)
        | 13 ->
            X (T T_TO)
        | 14 ->
            X (T T_TILDE)
        | 15 ->
            X (T T_THEN)
        | 16 ->
            X (T T_STRUCT)
        | 17 ->
            X (T T_STRING)
        | 18 ->
            X (T T_STAR)
        | 19 ->
            X (T T_SIG)
        | 20 ->
            X (T T_SEMISEMI)
        | 21 ->
            X (T T_SEMI)
        | 22 ->
            X (T T_RPAREN)
        | 23 ->
            X (T T_REC)
        | 24 ->
            X (T T_RBRACKET)
        | 25 ->
            X (T T_RBRACE)
        | 26 ->
            X (T T_QUOTE)
        | 27 ->
            X (T T_QUESTIONQUESTION)
        | 28 ->
            X (T T_QUESTION)
        | 29 ->
            X (T T_PRIVATE)
        | 30 ->
            X (T T_PREFIXOP)
        | 31 ->
            X (T T_PLUSEQ)
        | 32 ->
            X (T T_PLUSDOT)
        | 33 ->
            X (T T_PLUS)
        | 34 ->
            X (T T_PERCENT)
        | 35 ->
            X (T T_OR)
        | 36 ->
            X (T T_OPTLABEL)
        | 37 ->
            X (T T_OPEN)
        | 38 ->
            X (T T_OF)
        | 39 ->
            X (T T_OBJECT)
        | 40 ->
            X (T T_NONREC)
        | 41 ->
            X (T T_NEW)
        | 42 ->
            X (T T_MUTABLE)
        | 43 ->
            X (T T_MODULE)
        | 44 ->
            X (T T_MINUSGREATER)
        | 45 ->
            X (T T_MINUSDOT)
        | 46 ->
            X (T T_MINUS)
        | 47 ->
            X (T T_METHOD)
        | 48 ->
            X (T T_MATCH_LWT)
        | 49 ->
            X (T T_MATCH)
        | 50 ->
            X (T T_LPAREN)
        | 51 ->
            X (T T_LIDENT)
        | 52 ->
            X (T T_LET_LWT)
        | 53 ->
            X (T T_LETOP)
        | 54 ->
            X (T T_LET)
        | 55 ->
            X (T T_LESSMINUS)
        | 56 ->
            X (T T_LESS)
        | 57 ->
            X (T T_LBRACKETPERCENTPERCENT)
        | 58 ->
            X (T T_LBRACKETPERCENT)
        | 59 ->
            X (T T_LBRACKETLESS)
        | 60 ->
            X (T T_LBRACKETGREATER)
        | 61 ->
            X (T T_LBRACKETBAR)
        | 62 ->
            X (T T_LBRACKETATATAT)
        | 63 ->
            X (T T_LBRACKETATAT)
        | 64 ->
            X (T T_LBRACKETAT)
        | 65 ->
            X (T T_LBRACKET)
        | 66 ->
            X (T T_LBRACELESS)
        | 67 ->
            X (T T_LBRACE)
        | 68 ->
            X (T T_LAZY)
        | 69 ->
            X (T T_LABEL)
        | 70 ->
            X (T T_INT)
        | 71 ->
            X (T T_INITIALIZER)
        | 72 ->
            X (T T_INHERIT)
        | 73 ->
            X (T T_INFIXOP4)
        | 74 ->
            X (T T_INFIXOP3)
        | 75 ->
            X (T T_INFIXOP2)
        | 76 ->
            X (T T_INFIXOP1)
        | 77 ->
            X (T T_INFIXOP0)
        | 78 ->
            X (T T_INCLUDE)
        | 79 ->
            X (T T_IN)
        | 80 ->
            X (T T_IF)
        | 81 ->
            X (T T_HASHOP)
        | 82 ->
            X (T T_HASH)
        | 83 ->
            X (T T_GREATERRBRACKET)
        | 84 ->
            X (T T_GREATERRBRACE)
        | 85 ->
            X (T T_GREATERDOT)
        | 86 ->
            X (T T_GREATER)
        | 87 ->
            X (T T_FUNCTOR)
        | 88 ->
            X (T T_FUNCTION)
        | 89 ->
            X (T T_FUN)
        | 90 ->
            X (T T_FOR_LWT)
        | 91 ->
            X (T T_FOR)
        | 92 ->
            X (T T_FLOAT)
        | 93 ->
            X (T T_FINALLY_LWT)
        | 94 ->
            X (T T_FALSE)
        | 95 ->
            X (T T_EXTERNAL)
        | 96 ->
            X (T T_EXCEPTION)
        | 97 ->
            X (T T_EQUAL)
        | 98 ->
            X (T T_EOL)
        | 99 ->
            X (T T_EOF)
        | 100 ->
            X (T T_END)
        | 101 ->
            X (T T_ELSE)
        | 102 ->
            X (T T_DOWNTO)
        | 103 ->
            X (T T_DOTTILDE)
        | 104 ->
            X (T T_DOTOP)
        | 105 ->
            X (T T_DOTLESS)
        | 106 ->
            X (T T_DOTDOT)
        | 107 ->
            X (T T_DOT)
        | 108 ->
            X (T T_DONE)
        | 109 ->
            X (T T_DOCSTRING)
        | 110 ->
            X (T T_DO)
        | 111 ->
            X (T T_CONSTRAINT)
        | 112 ->
            X (T T_COMMENT)
        | 113 ->
            X (T T_COMMA)
        | 114 ->
            X (T T_COLONGREATER)
        | 115 ->
            X (T T_COLONEQUAL)
        | 116 ->
            X (T T_COLONCOLON)
        | 117 ->
            X (T T_COLON)
        | 118 ->
            X (T T_CLASS)
        | 119 ->
            X (T T_CHAR)
        | 120 ->
            X (T T_BEGIN)
        | 121 ->
            X (T T_BARRBRACKET)
        | 122 ->
            X (T T_BARBAR)
        | 123 ->
            X (T T_BAR)
        | 124 ->
            X (T T_BANG)
        | 125 ->
            X (T T_BACKQUOTE)
        | 126 ->
            X (T T_ASSERT)
        | 127 ->
            X (T T_AS)
        | 128 ->
            X (T T_ANDOP)
        | 129 ->
            X (T T_AND)
        | 130 ->
            X (T T_AMPERSAND)
        | 131 ->
            X (T T_AMPERAMPER)
        | _ ->
            assert false
    
    and nonterminal =
      fun nt ->
        match nt with
        | 196 ->
            X (N N_additive)
        | 195 ->
            X (N N_alias_type)
        | 194 ->
            X (N N_and_let_binding)
        | 193 ->
            X (N N_atomic_type)
        | 192 ->
            X (N N_attr_id)
        | 191 ->
            X (N N_attribute)
        | 190 ->
            X (N N_class_expr)
        | 189 ->
            X (N N_class_field)
        | 188 ->
            X (N N_class_fun_binding)
        | 187 ->
            X (N N_class_fun_def)
        | 186 ->
            X (N N_class_longident)
        | 185 ->
            X (N N_class_self_pattern)
        | 184 ->
            X (N N_class_self_type)
        | 183 ->
            X (N N_class_sig_field)
        | 182 ->
            X (N N_class_signature)
        | 181 ->
            X (N N_class_simple_expr)
        | 180 ->
            X (N N_class_type)
        | 179 ->
            X (N N_class_type_declarations)
        | 178 ->
            X (N N_clty_longident)
        | 177 ->
            X (N N_constant)
        | 176 ->
            X (N N_constr_ident)
        | 175 ->
            X (N N_constr_longident)
        | 174 ->
            X (N N_constrain_field)
        | 173 ->
            X (N N_constructor_arguments)
        | 172 ->
            X (N N_constructor_declarations)
        | 171 ->
            X (N N_core_type)
        | 170 ->
            X (N N_direction_flag)
        | 169 ->
            X (N N_expr)
        | 168 ->
            X (N N_ext)
        | 167 ->
            X (N N_extension)
        | 166 ->
            X (N N_extension_constructor_rebind_BAR_)
        | 165 ->
            X (N N_extension_constructor_rebind_epsilon_)
        | 164 ->
            X (N N_floating_attribute)
        | 163 ->
            X (N N_formal_class_parameters)
        | 162 ->
            X (N N_fun_binding)
        | 161 ->
            X (N N_fun_def)
        | 160 ->
            X (N N_function_type)
        | 159 ->
            X (N N_functor_arg)
        | 158 ->
            X (N N_functor_arg_name)
        | 157 ->
            X (N N_functor_args)
        | 156 ->
            X (N N_generalized_constructor_arguments)
        | 155 ->
            X (N N_generic_constructor_declaration_BAR_)
        | 154 ->
            X (N N_generic_constructor_declaration_epsilon_)
        | 153 ->
            X (N N_generic_type_declaration_no_nonrec_flag_type_subst_kind_)
        | 152 ->
            X (N N_generic_type_declaration_nonrec_flag_type_kind_)
        | 151 ->
            X (N N_ident)
        | 150 ->
            X (N N_implementation)
        | 149 ->
            X (N N_interface)
        | 148 ->
            X (N N_item_extension)
        | 147 ->
            X (N N_label_declaration)
        | 146 ->
            X (N N_label_declaration_semi)
        | 145 ->
            X (N N_label_declarations)
        | 144 ->
            X (N N_label_let_pattern)
        | 143 ->
            X (N N_label_longident)
        | 142 ->
            X (N N_labeled_simple_expr)
        | 141 ->
            X (N N_labeled_simple_pattern)
        | 140 ->
            X (N N_let_binding_body)
        | 139 ->
            X (N N_let_bindings_ext_)
        | 138 ->
            X (N N_let_bindings_no_ext_)
        | 137 ->
            X (N N_let_pattern)
        | 136 ->
            X (N N_letop_binding_body)
        | 135 ->
            X (N N_letop_bindings)
        | 134 ->
            X (N N_list_and_class_declaration_)
        | 133 ->
            X (N N_list_and_class_description_)
        | 132 ->
            X (N N_list_and_class_type_declaration_)
        | 131 ->
            X (N N_list_and_module_binding_)
        | 130 ->
            X (N N_list_and_module_declaration_)
        | 129 ->
            X (N N_list_attribute_)
        | 128 ->
            X (N N_list_generic_and_type_declaration_type_kind__)
        | 127 ->
            X (N N_list_generic_and_type_declaration_type_subst_kind__)
        | 126 ->
            X (N N_list_post_item_attribute_)
        | 125 ->
            X (N N_list_signature_element_)
        | 124 ->
            X (N N_list_structure_element_)
        | 123 ->
            X (N N_list_text_csig_class_sig_field__)
        | 122 ->
            X (N N_list_text_cstr_class_field__)
        | 121 ->
            X (N N_list_text_str_structure_item__)
        | 120 ->
            X (N N_list_use_file_element_)
        | 119 ->
            X (N N_listx_SEMI_record_pat_field_UNDERSCORE_)
        | 118 ->
            X (N N_lwt_binding)
        | 117 ->
            X (N N_lwt_bindings)
        | 116 ->
            X (N N_match_case)
        | 115 ->
            X (N N_meth_list)
        | 114 ->
            X (N N_method_)
        | 113 ->
            X (N N_mod_ext_longident)
        | 112 ->
            X (N N_mod_longident)
        | 111 ->
            X (N N_module_binding_body)
        | 110 ->
            X (N N_module_declaration_body)
        | 109 ->
            X (N N_module_expr)
        | 108 ->
            X (N N_module_subst)
        | 107 ->
            X (N N_module_type)
        | 106 ->
            X (N N_module_type_declaration)
        | 105 ->
            X (N N_mty_longident)
        | 104 ->
            X (N N_mutable_flag)
        | 103 ->
            X (N N_mutable_virtual_flags)
        | 102 ->
            X (N N_name_tag)
        | 101 ->
            X (N N_nonempty_list_mkrhs_LIDENT__)
        | 100 ->
            X (N N_nonempty_list_raw_string_)
        | 99 ->
            X (N N_nonempty_type_kind)
        | 98 ->
            X (N N_open_declaration)
        | 97 ->
            X (N N_open_description)
        | 96 ->
            X (N N_operator)
        | 95 ->
            X (N N_opt_ampersand)
        | 94 ->
            X (N N_option_BAR_)
        | 93 ->
            X (N N_option_SEMI_)
        | 92 ->
            X (N N_option_preceded_AS_mkrhs_LIDENT___)
        | 91 ->
            X (N N_option_preceded_COLON_core_type__)
        | 90 ->
            X (N N_option_preceded_EQUAL_expr__)
        | 89 ->
            X (N N_option_preceded_EQUAL_module_type__)
        | 88 ->
            X (N N_option_preceded_EQUAL_pattern__)
        | 87 ->
            X (N N_option_preceded_EQUAL_seq_expr__)
        | 86 ->
            X (N N_option_type_constraint_)
        | 85 ->
            X (N N_optlabel)
        | 84 ->
            X (N N_paren_module_expr)
        | 83 ->
            X (N N_parse_core_type)
        | 82 ->
            X (N N_parse_expression)
        | 81 ->
            X (N N_parse_pattern)
        | 80 ->
            X (N N_pattern)
        | 79 ->
            X (N N_pattern_comma_list_pattern_)
        | 78 ->
            X (N N_pattern_comma_list_pattern_no_exn_)
        | 77 ->
            X (N N_pattern_gen)
        | 76 ->
            X (N N_pattern_no_exn)
        | 75 ->
            X (N N_pattern_var)
        | 74 ->
            X (N N_payload)
        | 73 ->
            X (N N_possibly_poly_core_type_)
        | 72 ->
            X (N N_possibly_poly_core_type_no_attr_)
        | 71 ->
            X (N N_post_item_attribute)
        | 70 ->
            X (N N_primitive_declaration)
        | 69 ->
            X (N N_private_flag)
        | 68 ->
            X (N N_private_virtual_flags)
        | 67 ->
            X (N N_rec_flag)
        | 66 ->
            X (N N_record_expr_content)
        | 65 ->
            X (N N_reversed_bar_llist_constructor_declaration_)
        | 64 ->
            X (N N_reversed_bar_llist_extension_constructor_)
        | 63 ->
            X (N N_reversed_bar_llist_extension_constructor_declaration_)
        | 62 ->
            X (N N_reversed_llist_preceded_CONSTRAINT_constrain__)
        | 61 ->
            X (N N_reversed_nonempty_llist_functor_arg_)
        | 60 ->
            X (N N_reversed_nonempty_llist_labeled_simple_expr_)
        | 59 ->
            X (N N_reversed_nonempty_llist_name_tag_)
        | 58 ->
            X (N N_reversed_nonempty_llist_typevar_)
        | 57 ->
            X (N N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_)
        | 56 ->
            X (N N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_)
        | 55 ->
            X (N N_reversed_separated_nonempty_llist_AND_with_constraint_)
        | 54 ->
            X (N N_reversed_separated_nonempty_llist_BAR_row_field_)
        | 53 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_core_type_)
        | 52 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_type_parameter_)
        | 51 ->
            X (N N_reversed_separated_nonempty_llist_STAR_atomic_type_)
        | 50 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_core_type_)
        | 49 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_expr_)
        | 48 ->
            X (N N_reversed_separated_nontrivial_llist_STAR_atomic_type_)
        | 47 ->
            X (N N_row_field)
        | 46 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_expr_)
        | 45 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_)
        | 44 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_pattern_)
        | 43 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_)
        | 42 ->
            X (N N_seq_expr)
        | 41 ->
            X (N N_sig_exception_declaration)
        | 40 ->
            X (N N_signature)
        | 39 ->
            X (N N_signature_item)
        | 38 ->
            X (N N_signed_constant)
        | 37 ->
            X (N N_simple_delimited_pattern)
        | 36 ->
            X (N N_simple_expr)
        | 35 ->
            X (N N_simple_pattern)
        | 34 ->
            X (N N_simple_pattern_not_ident)
        | 33 ->
            X (N N_single_attr_id)
        | 32 ->
            X (N N_str_exception_declaration)
        | 31 ->
            X (N N_strict_binding)
        | 30 ->
            X (N N_structure)
        | 29 ->
            X (N N_structure_item)
        | 28 ->
            X (N N_subtractive)
        | 27 ->
            X (N N_tag_field)
        | 26 ->
            X (N N_toplevel_directive)
        | 25 ->
            X (N N_toplevel_phrase)
        | 24 ->
            X (N N_tuple_type)
        | 23 ->
            X (N N_type_constraint)
        | 22 ->
            X (N N_type_kind)
        | 21 ->
            X (N N_type_longident)
        | 20 ->
            X (N N_type_parameter)
        | 19 ->
            X (N N_type_parameters)
        | 18 ->
            X (N N_type_variable)
        | 17 ->
            X (N N_type_variance)
        | 16 ->
            X (N N_use_file)
        | 15 ->
            X (N N_val_ident)
        | 14 ->
            X (N N_val_longident)
        | 13 ->
            X (N N_value)
        | 12 ->
            X (N N_value_description)
        | 11 ->
            X (N N_virtual_flag)
        | 10 ->
            X (N N_virtual_with_mutable_flag)
        | 9 ->
            X (N N_virtual_with_private_flag)
        | 8 ->
            X (N N_with_constraint)
        | 7 ->
            X (N N_with_type_binder)
        | _ ->
            assert false
    
    and lr0_incoming =
      (16, "\000\000\000\006\000F\000\004\000\b\000\n\000\012\000\014\000\018\000\020\000\024\000\026\000\028\000 \000\"\000(\0000\000<\000H\000L\000N\000P\000R\000T\000V\000X\000`\000d\000h\000n\000\138\000\144\000\146\000\158\000\160\000\162\000\176\000\178\000\180\000\184\000\190\000\192\000\194\000\202\000\204\000\206\000\218\000\222\000\224\000\238\000\242\000\254\001\000\001\004\000C\000\216\001\129\001\129\001Q\000\130\001\129\000\b\001Q\001\003\000\018\000\022\001Q\001\003\000\024\001Q\001\003\000\026\000$\0008\000>\000T\001Q\001\003\000h\000\225\000\216\000\018\000h\001u\001\127\001\003\000f\000&\000.\000>\000h\000v\001\129\000\014\001Q\001\003\000f\000>\000@\000B\000D\000F\000H\000\\\000^\000l\000r\000\148\000\150\000\152\000\154\000\156\000\164\000\174\000\196\000\210\000f\000.\000p\000\132\0002\000p\000\136\0004\000p\000\232\000\246\000\250\001\002\001\006\001\b\000\193\000.\000\031\000\236\000\016\000\018\0006\000\018\000h\001/\000:\000h\000\236\000J\000f\000X\001Q\001\003\000\018\000(\001\003\000\020\001Q\001\003\000D\000R\000^\000f\000#\000\016\0006\001/\000%\000)\000i\000.\000\228\000)\000'\000h\000\196\000\018\000\026\000<\000f\000.\000h\000\236\000h\000r\000h\000\236\0006\001/\000x\000\248\000\189\000z\0002\000\189\000\132\000\166\001u\000\248\000\252\001/\000+\0001\000Z\000a\000&\000\227\000f\000\227\000.\000\216\000\018\000\216\000h\001O\001\131\000\166\001u\000+\000\171\0001\000Z\001A\001\131\000&\001\131\001A\0007\000_\000m\0002\000\248\000_\000\205\000N\001\006\000\191\000q\001\006\001A\001\135\001\000\0006\001/\001\003\001\135\001\003\001W\001\127\001\135\0007\0002\000_\000\248\000m\0002\000m\0002\000m\0002\000\174\000w\0002\000\205\000\205\000u\0006\001/\000\216\001\135\000\145\001\003\000,\001\003\000\214\000\231\001\131\000,\000\231\001\135\000\174\000\231\000\174\0001\000Z\001A\000\234\000.\000e\000.\000\166\001u\000+\000\228\001W\001W\000.\000\228\001W\000\132\0002\000\136\000V\000\209\000h\000\236\000\145\001\003\000,\001\003\001#\0004\001%\001#\001'\000\190\000\214\000\248\000\018\000f\000\132\001a\000N\000\136\001#\0004\000g\000&\001\131\001[\001\131\000\236\001[\000Z\001\131\001\131\0019\001\003\000\131\000\248\0017\0015\0017\001W\001Y\001a\0019\001\003\000\136\001#\0004\000\214\000\199\001W\000\196\000<\000\136\001#\0004\000\214\001Y\000\136\001#\0004\000\214\001Y\001Y\000\232\000\199\000}\000\128\001\129\000\020\001Q\001\003\000R\000'\000h\000-\000}\000\224\001W\000\196\001W\000\143\000\253\000\253\000+\000@\000<\000\139\000\248\001a\000\196\000f\000\234\000.\000\132\0002\000\190\000\225\000\216\000f\000\234\000.\001_\001\003\000\129\000\253\0017\001M\0015\0017\001K\001M\001a\000\196\001_\001\003\000)\000'\000h\000-\000}\000\253\000+\000@\000\139\000\129\000\253\000*\000B\000D\000L\000\250\001Q\001\003\000\"\001\003\000P\001Q\001\003\000f\000\016\000D\000\142\000\186\000^\000\142\000\186\000f\000D\000X\001Q\001\003\000\018\000.\000\236\000X\000\020\000N\001\003\000f\000\014\001\003\000\\\000^\000b\001Q\001\003\000d\001Q\001\003\000h\000p\000j\001Q\001\003\0000\000\135\000|\000\132\000\136\000h\000\225\000\216\000h\000\239\0004\001\031\000\236\001W\000\183\000\196\000\138\001Q\001\003\000\142\000\166\000+\000\186\000\240\000\031\000E\000G\000K\000M\000\214\000M\001c\000\205\000\225\000\216\000f\000.\000\194\001Q\001\003\000G\000\155\000\159\000\228\000\161\000\228\000\161\000\234\000\161\000\248\000\161\001\000\000\031\001\127\000\205\000\161\001O\001_\000\161\000\161\000\161\000.\000\132\0002\000Y\0002\000\161\000,\000Y\000K\001_\000\161\000\177\000,\000\016\000,\000\187\000\239\000\244\000Y\000\244\000\031\000\030\000f\000h\000\236\001W\001!\000.\000h\000:\000f\001!\000\196\000l\000\031\000J\000\016\000f\000\161\000\236\001W\001\019\000\175\000.\000h\000\151\000f\000\020\000h\000\203\000\203\000.\000\140\000G\000\196\000n\000L\000\250\001Q\001\003\000\176\001\003\000f\000\016\000\018\000.\001=\000\236\000f\000\176\001\003\000{\001?\001;\000Z\000\211\000\215\000\004\000\020\000'\001\031\000\196\000<\000\232\001\135\000\015\001\135\000}\000X\000\225\000\196\000\227\000\216\000\232\000\227\000\017\000o\001\004\000\017\000Z\000\215\001\127\000\227\000\216\000\018\001/\001/\001O\001?\000\215\000.\000\215\000.\001;\000Z\000\169\000\219\000f\000.\000\219\000.\000\236\000\215\000.\000\169\001\127\000\225\001O\000\219\000\160\000|\000\132\000\134\000h\000\196\000\136\000h\000\208\000\212\000\138\001Q\001\003\000\242\001Q\001\003\000\162\001Q\001\003\000\178\001Q\001\003\000\248\000\161\000\n\000\180\001Q\001\003\000f\000\020\000\203\000.\000Z\000\182\001Q\001\003\000\161\000\160\000\184\001Q\001\003\000\161\000\196\000\250\000\029\000\031\000I\000\164\000I\000\166\000h\000\210\000f\000\254\001Q\001\003\000I\000\216\000f\0009\000I\000\030\000h\000:\000h\000J\000I\000\205\000\225\000\216\000f\000.\000B\000D\000X\001Q\001\003\000\219\000\236\000\215\000.\000\\\000^\000l\000G\000\236\001W\000\196\000U\000c\000\228\000\205\000I\001O\001_\001c\000\235\000\160\000U\000\237\001\023\000\160\000U\001S\000&\001S\000@\001S\000B\001S\000D\001S\000F\001S\000H\001S\000\\\001S\000^\001S\000r\001S\000\148\001S\000\150\001S\000\152\001S\000\154\001S\000\156\001S\000\174\001S\000\196\001S\000\228\001S\000\232\001S\000\234\001S\000\246\001S\001\006\001S\001\b\001S\001\127\001_\000I\001\137\001S\000,\000F\001\129\000U\000U\001\004\001\003\000E\000\236\001W\000\196\000U\000\153\000\196\000U\000\228\000\161\000\234\000\161\000\248\000\161\001\000\000\031\001\127\000\155\000\157\000\228\000\161\001\025\000\253\001\133\001\133\001S\000\153\000\196\000U\001\015\000\160\000U\001\002\001\025\001\017\000\250\000U\000.\000|\000\244\000]\000\244\001S\000,\000]\000\132\0002\000]\0002\000\134\000[\000\170\000\136\000I\000\004\000W\001\031\000\230\001W\000\236\001W\000\230\001W\000/\000\173\000\181\000,\000W\000W\000\133\0004\000\225\000\216\000h\000\031\000\140\000I\000\210\000f\001S\000.\000p\001S\000\132\001S\0002\000p\001S\000\136\001S\0004\000p\001S\000\216\000f\000U\000.\000p\001S\000\132\000U\0002\000p\001S\000\136\001S\0004\000p\001S\000\225\000\210\000f\001S\000.\000p\001S\000\132\001S\0002\000p\001S\000\136\001S\0004\000p\001S\001\031\000p\001S\000I\000y\001\029\001\029\001S\000U\000.\000\132\000U\0002\000\136\001S\0004\000\225\000\210\000f\001S\000.\000\132\001S\0002\000\136\001S\0004\001\031\001S\000.\000\132\001S\0002\000\136\001S\0004\000U\000\028\000\206\001U\000U\000\222\000U\000\218\000U\000\222\000U\000\218\000\196\000U\001U\000U\000\222\000U\000\218\000U\000f\000\020\000\203\000.\000\236\001\131\000Z\000U\000G\001\027\001C\001C\000^\000\161\000.\000\236\001W\000.\001C\001\027\001C\000U\000Z\000U\000Z\000\216\000U\000\233\000s\000\248\000\233\000\233\000U\000 \001S\000\204\001S\000\202\000U\000\202\000I\001S\000\172\000I\000\133\0004\001S\000\181\000,\000[\000\170\000[\000\170\000]\0002\000\244\000]\000\244\000U\001Q\001\003\000\219\000\160\000U\000X\001Q\001\003\000\018\000\196\000\219\000\236\000\215\000\196\000\219\000\223\000\160\000U\001?\000\223\000\194\001Q\001\003\001a\0019\001\003\000\160\000U\001Q\001\003\000\135\001\025\000\253\000U\000/\000\196\000U\000?\001\027\001E\001E\000?\000U\000\175\000.\000h\000\236\000\020\000\203\000\216\001W\000\196\000U\000u\000\216\001W\000\196\000U\000/\000\196\000U\000?\001\025\000\253\001S\000U\000\004\000s\000U\000\004\000s\001S\000.\000\230\000\215\000.\000\236\000\215\000.\000\230\000\215\000.\000\219\000\215\000.\000\161\000.\000\236\001W\000.\001s\000\014\000\250\001\003\000\209\000h\000\196\000U\000/\000\196\000U\000\027\000\253\001\003\000\012\000V\000V\000\012\000\021\000h\000\236\001W\000\209\000h\000\196\000U\000/\000\196\000U\000`\000\250\001\003\000\139\000h\000\236\000\020\000\203\000\216\001W\000\196\000U\000u\000\216\001W\000\147\000\196\000U\001W\000?\000\229\000\253\001\003\000\012\000<\000<\000\012\000\019\000h\000\236\000\147\000\139\000h\000\236\000\020\000\203\000\216\001W\000\196\000U\000\147\000\196\000U\000?\000t\001\129\000:\000\161\000\n\000U\000X\000\020\001Q\001\003\001/\000\196\000\215\000\179\000\253\001Q\001\003\000\018\000\223\000\253\0000\000\018\000\223\000\253\001\004\001\003\000\018\000\223\000\253\001\007\001\007\000~\001\129\000\158\001Q\001\003\000\219\000\253\000\192\001Q\001\003\000\031\000\236\001W\000\196\000$\000\201\000\201\000\253\000\194\001Q\001\003\001a\000\196\001_\001\003\000\253\0019\001\003\000\253\000\236\000*\000L\000\250\001Q\001\003\000\227\000\253\001Q\001\003\000\227\000\253\000X\001Q\001\003\000\018\000\196\000\225\000\253\000\232\000\227\000\253\000\236\000\215\000\221\000\253\001?\000\221\0000\000\018\000\236\000\215\000\253\001\004\001\003\000\018\000\236\000\215\000\253\001\005\001\005\000\158\001Q\001\003\000\215\000\253\000\194\001Q\001\003\001a\000\238\000\020\001Q\001\003\000\012\000\023\000\132\000i\0002\001G\000h\000\196\000P\001\003\000f\001W\000.\001q\000\014\001\003\000\012\000V\000V\000\012\000\207\000h\000\236\001W\000\253\000`\001\003\000\012\000<\000<\000\012\000\137\000h\000\236\000\147\000\253\000\146\001\003\000h\000n\000L\000\250\001\003\000\225\000\160\000\132\000k\0002\000\227\000\216\000h\001e\000\228\001W\001W\001O\001e\001m\001\127\001\003\000\225\000\160\001m\001m\000\253\000\224\001\003\001W\000\196\001W\001]\000\253\000\247\000\202\001)\000\253\001I\001o\000\247\001m\000\253\001\004\001\003\000\023\001G\000h\000\196\001m\000\253\001\t\001\t\001Q\001\003\000\023\001G\000h\000\236\000h\000\236\0001\000Z\000\132\001W\0001\000Z\000\171\0001\000Z\000\227\000\216\000h\001O\001i\001m\001i\001i\001i\000\253\001\004\001\003\000\023\001G\000h\000\236\001i\000\253\001\011\001\011\000\025\000O\000S\000\141\000\195\000\213\000\217\000\251\001)\000\253\0011\001\004\001\003\000'\000h\000-\000}\000\253\001\001\001\001\0013\001\004\001\003\000'\000h\000\232\000\199\000}\000\253\000\255\000\255\001I\001g\000\251\000Q\000\251\001W\000\238\001Q\001\003\000\023\001G\000h\000\196\000P\001\003\001s\000\144\001\003\000U\000\253\000\146\000\250\001\003\000f\000n\000F\001\129\001\003\000\135\001\025\000\253\000L\000\250\001\003\000\225\000\160\000\132\000k\0002\001u\000\180\001\003\001\027\000Z\001\021\000\160\001O\001k\000y\001u\001}\001\127\001\133\001}\001w\001w\001}\001\003\000\225\000\160\001}\001\003\000\135\001\025\000\253\001}\000.\000\236\001i\000.\001}\001\000\000h\000\185\000\253\001\003\001}\000\185\000\253\000\224\001\003\001]\000\253\000\245\000\202\001)\000\253\001I\001{\000\245\001}\000\236\001i\000\196\001}\001\027\001y\001y\000\253\001\004\001\003\000\023\001G\000h\001y\000\253\001\r\001\r\000\025\000;\000n\000A\000S\000\141\000\197\000\213\000\235\000\249\001\023\001)\000\253\0011\001\001\001I\001g\000=\000U\000\253\000\249\000\149\0002\000\235\000\249\001\023\000\149\0002\000\245\000\202\000=\000\202\000\219\000\253\001Q\001\003\000\219\000\253\000U\000\253\000\249\000\249\000\149\0002\000\253\000+\000@\000\139\000\127\000\253\0017\0015\0017\000'\000h\000\232\000\199\000}\000\253\000+\000@\000\139\000\127\000\253\000Q\000\202\000\215\000.\001W\000\253\000\149\0002\000I\000X\001Q\001\003\000\219\000.\000\236\000\215\000.\000U\000.\000/\000.\000U\000\004\000s\000U\000\004\000s\000\188\000U\000\188\000U\000U\000\222\000U\000\218\000\149\0002\001\003\000U\000\222\000U\000\218\000=\000\200\001-\000\000\000Q\000\200\001+\000\000\000\167\001W\000\200\000\000\000U\000\200\000\165\000\000\000\161\000\200\000\163\000\000\000\166\001/\000\026\000$\000\142\000\190\000\029\000\225\000\216\000\200\0003\0005\000*\000;\000\243\000U\000\253\000*\000\243\000*\000\000\000*\0005\000;\000\241\000\241\000U\000\253\000\241\000\241\000!\000U\000\253\000\241\000\200\000\241\000\200")
    
    and rhs =
      ((16, "\001-\001+\000\167\000\165\000\163\0003\000!\000D\000B\001A\001\135\001\000\0006\001/\001\004\001\003\001\025\000\253\000f\001W\000.\000f\000X\001Q\001\003\000\215\000.\0006\001/\000\016\000+\001\131\000+\000f\000e\000.\000+\000r\000\231\000\174\000r\000\174\000\166\001u\001\131\000\166\001u\000f\000e\000.\000\166\001u\000\132\0007\0002\000\132\000\248\000m\0002\000\132\000_\000\248\000m\0002\000z\000\189\000m\0002\000z\0002\000x\000\189\000m\0002\000x\000\189\000m\000\174\000w\0002\001O\000C\000C\000\216\001\129\000\130\001\129\000\149\0002\001k\000\180\001\003\001w\001\021\000\160\001}\000n\000L\001\003\000\225\000\160\001}\000n\000L\000\250\001\003\000\225\000\160\001}\001}\001\127\001k\000y\001O\000\146\001\003\001}\000\185\000\253\000\146\000\250\001\003\001}\000\185\000\253\000\014\000\027\000\253\000`\000\229\000\253\000\224\001\003\001]\000\253\000\144\001\003\000U\000\253\001)\000\253\001I\000\196\001}\000\236\001i\000\196\001}\001\027\001y\001\027\000Z\001}\001\027\001w\000h\000\225\000\216\000h\000f\000\161\000.\000f\000\161\000\236\001W\000.\000f\001W\000.\000\146\001\003\001m\000\253\000\014\001\003\000\207\000h\000\236\001W\000\253\000`\001\003\000\137\000h\000\236\000\147\000\253\000\224\001\003\001]\000\253\001)\000\253\001I\001e\000\132\000k\0002\001e\001O\000P\001\003\001q\000\247\000\202\001m\001\127\000n\000L\001\003\000\225\000\160\001m\000n\000L\000\250\001\003\000\225\000\160\001m\000f\001}\000.\001u\000\132\000k\0002\001u\000f\001}\000\236\001i\000.\000P\001\003\001s\000\245\000\202\001m\000\171\0001\000Z\001i\000h\000\236\0001\000Z\001i\0001\000Z\001i\000\238\000\020\001Q\001\003\000\023\001G\000h\000\196\001m\000\253\001\t\000h\000\227\000\216\000h\000\142\000\240\000$\000\186\000\018\000\132\0002\000f\000.\000f\000\234\000.\000\190\000\026\000\225\000\225\000\216\000f\000\234\000.\000\132\0002\000f\000.\000f\000\234\000.\000\190\000\026\001W\000\196\001W\001\131\000g\000&\001\131\000\136\001#\0004\000\248\000\131\001\135\001W\001\127\000\028\000\206\000\235\000\160\000U\000b\001Q\001\003\000U\000\004\000s\000\022\001Q\001\003\000U\000\022\001Q\001\003\000U\000\004\000s\000\022\001Q\001\003\000U\000\188\000U\000\022\001Q\001\003\000U\000\004\000s\000\188\000U\000\006\001Q\001\003\000U\000\222\000U\000\218\000\182\001Q\001\003\000\161\000\196\000U\001U\000U\000\222\000U\000\218\000\182\001Q\001\003\000\161\000\160\000U\000\222\000U\000\218\000I\000n\000X\001Q\001\003\000\018\000\223\000\160\000U\000n\000\194\001Q\001\003\001a\0019\001\003\000\160\000U\000n\000L\001Q\001\003\000\219\000\160\000U\000n\000L\000\250\001Q\001\003\000\219\000\160\000U\000\178\001Q\001\003\000s\000\180\001Q\001\003\001\027\001C\000\180\001Q\001\003\000f\000\020\000\203\000.\001C\000d\001Q\001\003\000U\000\004\000s\000\024\001Q\001\003\000U\000\004\000s\000\162\001Q\001\003\000U\000 \001S\000\204\001S\000\162\001Q\001\003\000U\000 \001S\000\b\001Q\001\003\000U\000\222\000U\000\218\000\184\001Q\001\003\000\161\000\196\000U\001U\000U\000\222\000U\000\218\000\254\001Q\001\003\000I\000\138\001Q\001\003\000I\000P\001Q\001\003\001s\000\245\000\202\000I\000y\000c\001_\000I\000\205\000I\001S\000\156\001S\001S\000\154\001S\001S\000\152\001S\001S\000\150\001S\001S\000\148\001S\001S\000D\001S\001S\000B\001S\001S\000@\001S\001S\000^\001S\001S\000\\\001S\001S\000&\001S\001S\000F\001S\001S\000\196\001S\001S\000r\001S\001S\000\174\001S\001S\000H\001S\001S\000\246\001S\001S\001\006\001S\001S\001\b\001S\001S\000\232\001S\0009\001S\001\137\001S\001\023\000\160\000U\000l\001\015\000\160\000U\001S\000\234\001S\000h\000p\001S\000I\000\216\001\031\000p\001S\000I\000\216\000f\000U\000.\000p\001S\000I\000\216\000\132\000U\0002\000p\001S\000I\000\216\000\136\001S\0004\000p\001S\000I\000\210\000\132\001S\0002\000p\001S\000I\000\210\000f\001S\000.\000p\001S\000I\000\210\000\136\001S\0004\000p\001S\000I\000\216\000\225\000\210\000\132\001S\0002\000p\001S\000I\000\216\000\225\000\210\000f\001S\000.\000p\001S\000I\000\216\000\225\000\210\000\136\001S\0004\000p\001S\001S\001\127\000F\001\129\000v\001\129\000\149\0002\000\248\001a\000\196\001_\001\003\001a\000\196\001_\001\003\000~\001\129\000\149\0002\000\132\000i\0002\000?\000/\000\196\000U\000Z\000U\000\236\001\131\000Z\000U\001\027\001C\000f\000\020\000\203\000.\001C\0001\000\171\0001\000Z\001A\000h\000\236\0001\000Z\001A\0001\000Z\001A\000f\000.\000f\001=\000\236\000\215\000.\000\018\000\016\000{\000N\001[\000\236\001[\000Z\001\131\000\236\001\131\000\248\001a\0019\001\003\001a\0019\001\003\000\020\001Q\001\003\000'\000h\000\232\000\199\000}\000\253\000\020\001Q\001\003\000R\000'\000h\000\232\000\199\000}\000\253\000\020\001Q\001\003\000'\000h\000-\000}\000\253\000\020\001Q\001\003\000R\000'\000h\000-\000}\000\253\000\018\000h\000=\000\200\000Q\000\200\000t\001\129\000\149\0002\000\209\000h\000\236\000\145\001\003\000\209\000h\000\236\000\145\001\003\000,\001\003\001'\001%\001%\001#\000h\000h\000\236\001W\000h\000\225\000\216\000h\000I\000\140\000I\000\030\000h\000:\000h\000J\000I\000:\000f\001!\000\175\000.\000:\000h\000J\000f\001\019\000\175\000.\000J\000\151\000\030\000f\001!\000.\000\030\000h\000\140\000G\000G\000\031\000?\000\031\000/\000\196\000U\000\031\000\236\000u\000\216\001W\000\196\000U\000\031\000\236\000\020\000\203\000\216\001W\000\196\000U\000\153\000\196\000U\000E\000\236\001W\000\196\000U\000n\001Q\001\003\000\135\001\025\000\253\001\023\001\133\000n\001\003\000\135\001\025\000\253\000n\000F\001\129\001\003\000\135\001\025\000\253\001\021\001\133\000\161\000\161\000\236\001W\000\031\000?\000G\000\236\001W\000\196\000U\000\153\000\196\000U\001\017\001\015\001\002\001\025\001\004\001\003\000\023\001G\000h\001y\000\253\001\r\001\004\001\003\000\023\001G\000h\000\236\001i\000\253\001\011\001\004\001\003\000\023\001G\000h\000\196\001m\000\253\001\t\001\004\001\003\000\018\000\223\000\253\001\007\001\004\001\003\000\018\000\236\000\215\000\253\001\005\001\127\001\003\001\004\001\003\000'\000h\000-\000}\000\253\001\001\001\004\001\003\000'\000h\000\232\000\199\000}\000\253\000\255\000\143\000\253\000*\000\251\000O\000\251\000*\000\249\000*\000U\000\253\000\249\000;\000\249\001o\000\247\001{\000\245\000;\000\243\000*\000\241\000*\000U\000\253\000\241\000;\000\241\0005\000\241\001\031\000\183\000\177\001\031\000\183\000\177\000,\001\031\000\183\000\177\000,\000\016\000\187\001\031\000\183\000\177\000,\000\239\000j\001Q\001\003\000\135\001\025\000\253\000\237\000\235\001\133\000\161\000Z\000U\000\161\000\n\000U\000Z\000U\000\161\000Z\000\216\000h\000\236\000\145\001\003\000,\001\003\000\231\001\131\000,\000\231\000h\000\236\000\145\001\003\000,\001\003\001\131\000,\000h\000\236\000\145\001\003\001\131\000\214\001\003\000\019\000h\000\236\000\147\001\003\000\139\000h\000?\000\250\001\003\000\139\000h\000?\001\003\000\139\000h\000\236\000\147\000\196\000U\000\250\001\003\000\139\000h\000\236\000\147\000\196\000U\001\003\000\139\000h\000\236\000\020\000\203\000\216\001W\000\196\000U\000\250\001\003\000\139\000h\000\236\000\020\000\203\000\216\001W\000\196\000U\000\018\000\227\000\216\000\018\000\227\000f\000\227\000.\000\018\000\225\000\216\000\018\000\196\000\219\000\236\000\215\000\196\000\219\001?\000\223\000\236\000\215\001?\000\221\000\"\001\003\000=\000\202\000\176\001\003\001;\000Z\000\219\000\169\000\219\001\127\000\225\000\219\000\169\000\219\000f\000.\001O\000X\001Q\001\003\000\018\000\232\000\227\000\253\000(\001\003\000Q\000\202\000\176\001\003\001;\000Z\000\215\000X\000\020\000N\001\003\000\219\000f\000\215\000.\000\215\001\127\000\211\000\215\000Z\000\215\000\215\000\004\000o\001O\000X\000\020\001Q\001\003\001/\000\179\000\253\001/\000\227\000\216\001/\000V\000V\000\012\000V\000\012\000\012\000V\000\252\001/\000h\000h\000\203\000$\000$\000\201\001W\000<\001W\001Y\000<\001Y\001W\000\196\001Y\001W\000\196\000<\001Y\000\214\000<\000\214\001W\000\196\000\214\001W\000\196\000<\000\214\000\136\001#\0004\000<\000\136\001#\0004\001W\000\196\000\136\001#\0004\001W\000\196\000<\000\136\001#\0004\000L\001Q\001\003\000\219\000\253\000L\000\250\001Q\001\003\000\219\000\253\000L\001Q\001\003\000\227\000\253\000L\000\250\001Q\001\003\000\227\000\253\000>\000l\001\002\000\210\000f\000.\000\210\000f\000.\000p\000\210\000\132\0002\000\210\000\132\0002\000p\000\210\000\136\0004\000\210\000\136\0004\000p\000\164\000\250\000\156\000\154\000\152\000\150\000\148\000D\000B\000@\000^\000\\\000&\000F\000\196\000r\000\174\000H\000\246\001\006\001\b\000\232\001\006\000\248\000,\001\000\000h\000\236\001W\000\196\001S\000\196\000\215\000\196\000\161\000\196\000U\000/\000J\000:\000h\000\236\000f\000\219\000\236\000\215\000.\000f\000\219\000.\000f\000\014\001\003\001S\000.\000f\000\014\001\003\001S\000\236\000\215\000.\000f\000\014\001\003\001S\000\236\000\215\000\230\000\215\000.\000f\000\014\001\003\001S\000\230\000\215\000.\001W\000\200\000U\000\200\000\161\000\200\000\161\000\234\000\161\000\161\001\127\000\155\000\161\001\000\000\031\000\159\000\161\000\248\000\161\000\194\001Q\001\003\000\161\000\159\000\228\000\161\000\161\000\228\000\161\000\157\000\228\000\161\000\153\000\228\000\161\000G\001_\000\161\000\205\000\161\000\138\001Q\001\003\000G\000\153\000\234\000\161\000\153\001\127\000\155\000\153\001\000\000\031\000\157\000\153\000\248\000\161\000h\000\016\000=\000\236\000Q\000\236\001W\000:\000\161\000:\000\161\000\n\000U\001W\000u\000\216\001W\001\135\000u\000\216\001\135\000\128\001\129\000\149\0002\000\192\001Q\001\003\000\031\000\236\001W\000\196\000\201\000\253\000<\000<\000\012\000<\000\012\000\012\000<\0000\000W\000I\000\004\000W\0015\0017\000\131\0017\0015\001K\0017\001M\000\129\0017\000\129\001M\0015\0017\000\127\0017\000}\000\224\001W\000\196\001W\001?\000{\001?\001\029\000y\001\029\000\205\000w\000\205\0006\001/\000u\0006\001/\000\233\000\248\000\233\000s\000\248\000\233\001\135\000q\001\006\001\135\000\017\000o\001\004\000\017\000_\000m\000\248\000_\001W\000k\000\228\001W\000)\000i\000\228\000)\001\131\000g\000&\001\131\000e\000\228\001W\001W\000\228\001W\000c\000\228\001S\001S\000\228\001S\000a\000&\001\131\001\131\000&\001\131\0007\001W\001S\001S\000,\001S\000,\000]\000h\000\181\000h\000\181\000,\000h\000\181\000,\000[\000\161\000\161\000,\000\161\000,\000Y\001\031\000\173\000\181\001\031\000\173\000\181\000,\001\031\000\173\000\181\000,\000W\001S\001S\000,\001S\000,\000U\001S\000,\000F\001\129\000U\000\194\001Q\001\003\001a\0019\001\003\000\253\000\251\001)\000\253\001I\000\025\000\141\0011\001\001\0013\000\255\000\020\001Q\001\003\000'\000+\000@\000\139\000\127\000\253\000\020\001Q\001\003\000R\000'\000+\000@\000\139\000\127\000\253\000S\000X\001Q\001\003\000\018\000\221\000\253\000X\001Q\001\003\000\018\000\196\000\225\000\253\000\217\000X\001Q\001\003\0000\000\018\000\236\000\215\000\253\001\005\000\213\000\195\000\158\001Q\001\003\000\215\000\253\000\238\001Q\001\003\000\023\001G\000h\000\236\001i\000\253\001\011\001g\001c\000^\000\142\000^\000\186\000D\000\142\000D\000\186\000\136\000\239\0004\000\132\000Y\0002\000|\000Y\000\244\000|\000\244\000\212\001S\000\172\000\208\000I\000f\000U\000.\000f\000U\000/\000.\000I\000\216\000f\000U\000.\000I\000\216\000\132\000U\0002\000I\000\210\000\132\001S\0002\000I\000\210\000f\001S\000.\000I\000\210\000\136\001S\0004\000I\000\216\000\225\000\210\000\132\001S\0002\000I\000\216\000\225\000\210\000f\001S\000.\000I\000\216\000\225\000\210\000\136\001S\0004\000I\000\216\000\136\001S\0004\000\242\001Q\001\003\000U\000\202\000\242\001Q\001\003\000\202\000T\001Q\001\003\001u\000f\000X\001Q\001\003\000\219\000.\000f\000X\001Q\001\003\000\219\000\236\000\215\000.\000\029\001c\001_\000\205\000>\000I\000\250\000I\000\134\000[\000\170\000\134\000\170\000I\000\216\001\031\000\225\000\216\000f\000U\000.\000\225\000\216\000\134\000[\000\170\000I\000\166\000h\000I\000\164\000I\001O\0008\000\225\000\216\000f\000.\000\136\000\133\0004\000\225\000\216\000\136\000\133\0004\000|\000]\000\244\000|\000\244\000\225\000\216\000|\000]\000\244\000\225\000\216\000|\000\244\000\132\000]\0002\000\225\000\216\000\132\000]\0002\000\225\000\216\000\132\0002\000\225\000\216\000f\000X\001Q\001\003\000\219\000\236\000\215\000.\000\031\000E\000f\000\161\000.\000K\000f\000X\001Q\001\003\000\018\000.\000f\000X\001Q\001\003\000\018\000\236\000\215\000.\000\016\000M\000M\000\214\000M\001_\000\205\000\166\000+\000\225\000\216\000K\000\225\000\216\000\132\0002\000\225\000\216\000f\000.\000\225\000\216\000f\000\161\000.\000f\000\161\000\236\001W\000.\001O\000h\000\018\001\004\001\000\000\254\000\242\000\238\000\224\000\222\000\218\000\206\000\204\000\202\000\194\000\192\000\190\000\184\000\180\000\178\000\176\000\162\000\160\000\158\000\146\000\144\000\138\000n\000d\000`\000X\000V\000T\000R\000P\000N\000L\000H\000<\0000\000(\000\"\000 \000\028\000\026\000\024\000\020\000\014\000\012\000\n\000\b\000\004\000S\000\194\001Q\001\003\001a\000\196\001_\001\003\000\253\000\196\000U\001\027\001E\000f\000\020\000\203\000.\001E\000\249\000U\000\253\000\249\000\235\001\023\001)\000\253\001I\000\141\000\025\0011\001\001\000\020\001Q\001\003\000'\000+\000@\000\139\000\129\000\253\000\020\001Q\001\003\000R\000'\000+\000@\000\139\000\129\000\253\000A\000X\001Q\001\003\000\018\000\223\000\253\000X\001Q\001\003\0000\000\018\000\223\000\253\001\007\000\213\000\197\000\238\001Q\001\003\000\023\001G\000h\001y\000\253\001\r\001g\000\158\001Q\001\003\000\219\000\253\000^\000\\\000\205\000N\000\191\000q\001\003\000\205\001\003\000\166\001/\000\166\001/\000$\000\166\001/\000\142\000\166\001/\000\029\000\166\001/\000\225\000\166\001/\000\190\000\166\001/\000\026\000U\000\253\000*\000\243\000*\0005\000*\000\200\001\131\000a\000\236\001W\000\236\001W\000\230\001W\000\230\001W\000\196\000\199\000h\000\227\000\216\000h\000#\000%\000)\000f\000i\000.\0006\001/\000\016\000D\000^\000\241\000\200\000U\000\253\000\241\000\200\000h\000f\000\193\000.\000\031\000\225\000\216\000\031\001\003\000\021\000h\000\236\001W\001\003\000\209\000h\000\196\000U\000\250\001\003\000\209\000h\000\196\000U\001\003\000\209\000h\000/\000\196\000U\000\250\001\003\000\209\000h\000/\000\196\000U\000\014\001Q\001\003\000\031\000\236\001W\000\253\000\012\000\012\000V\000\012\000\012\000V\000\012\000<\000\012\000\012\000<\000\020\000'\001\031\000\015\001\135\000}\000\020\000'\001\031\000\232\001\135\000X\000\225\000\196\000\227\000X\000\225\000\232\000\227\000\196\000\196\000<"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\014\000\018\000\021\000\027\000\029\000\030\000\031\000!\000%\000(\000*\000,\000/\0004\0007\000;\000@\000D\000F\000J\000P\000Q\000R\000U\000Y\000Z\000]\000`\000f\000m\000o\000q\000r\000w\000}\000\128\000\131\000\135\000\139\000\141\000\142\000\144\000\148\000\150\000\153\000\155\000\156\000\159\000\162\000\167\000\167\000\170\000\170\000\174\000\181\000\188\000\192\000\194\000\195\000\196\000\200\000\201\000\206\000\208\000\214\000\221\000\224\000\225\000\229\000\234\000\239\000\240\000\244\000\249\000\252\001\007\001\b\001\011\001\012\001\r\001\014\001\015\001\016\001\018\001\020\001\023\001\024\001\025\001\026\001\031\001!\001#\001&\001'\001(\001+\001,\001/\0012\0013\0014\0015\0017\0018\0019\001<\001B\001F\001L\001R\001Z\001a\001l\001u\001v\001~\001\135\001\142\001\150\001\154\001\159\001\167\001\173\001\179\001\187\001\193\001\200\001\211\001\215\001\219\001\225\001\227\001\228\001\230\001\232\001\235\001\238\001\241\001\244\001\247\001\250\001\253\002\000\002\003\002\006\002\t\002\012\002\015\002\018\002\021\002\024\002\027\002\030\002!\002$\002&\002(\002+\002/\0022\0025\002:\002A\002H\002O\002V\002]\002d\002m\002v\002\127\002\129\002\129\002\131\002\135\002\140\002\144\002\148\002\148\002\151\002\152\002\155\002\157\002\161\002\163\002\168\002\169\002\173\002\178\002\181\002\183\002\188\002\189\002\190\002\191\002\191\002\193\002\197\002\199\002\203\002\206\002\215\002\225\002\233\002\242\002\243\002\244\002\246\002\248\002\252\003\001\003\b\003\t\003\n\003\012\003\r\003\016\003\017\003\020\003\021\003\023\003\025\003\027\003\029\003\"\003$\003)\003+\003/\0031\0033\0034\0036\003:\003A\003I\003L\003Q\003W\003Y\003^\003e\003g\003h\003k\003m\003r\003u\003v\003y\003y\003\129\003\129\003\138\003\138\003\147\003\147\003\153\003\153\003\160\003\160\003\162\003\162\003\170\003\170\003\179\003\179\003\181\003\181\003\183\003\185\003\185\003\187\003\191\003\193\003\193\003\195\003\195\003\197\003\197\003\199\003\199\003\201\003\205\003\207\003\209\003\212\003\216\003\222\003\227\003\233\003\234\003\236\003\239\003\244\003\247\003\254\004\001\004\007\004\t\004\r\004\014\004\015\004\020\004\024\004\029\004$\004,\0046\004A\004B\004E\004I\004J\004M\004O\004S\004U\004W\004Y\004]\004b\004c\004e\004f\004h\004k\004l\004s\004w\004|\004\129\004\132\004\134\004\135\004\138\004\141\004\142\004\149\004\150\004\153\004\153\004\154\004\154\004\155\004\156\004\158\004\160\004\162\004\163\004\165\004\166\004\168\004\169\004\171\004\172\004\174\004\177\004\181\004\182\004\184\004\187\004\191\004\194\004\198\004\203\004\209\004\214\004\220\004\225\004\231\004\232\004\233\004\234\004\237\004\241\004\244\004\248\004\251\004\255\005\000\005\001\005\002\005\003\005\004\005\005\005\006\005\007\005\b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\005\017\005\018\005\019\005\020\005\021\005\022\005\022\005\022\005\023\005\023\005\024\005\024\005\026\005\026\005\028\005\028\005\030\005\030\005 \005 \005\"\005\"\005$\005$\005%\005&\005)\005.\0051\0056\005=\005F\005M\005O\005Q\005S\005V\005X\005Y\005\\\005]\005`\005d\005g\005j\005m\005p\005q\005s\005u\005y\005|\005~b\006\t\006\n\006\012\006\015\006\017\006\020\006\024\006\025\006\027\006\030\006!\006%\006*\006+\006-\0060\0065\006<\006=\006?\006@\006A\006B\006D\006F\006O\006Y\006Z\006`\006g\006h\006q\006r\006s\006x\006\130\006\131\006\132\006\134\006\136\006\138\006\140\006\143\006\146\006\149\006\151\006\154\006\156\006\159\006\163\006\168\006\173\006\178\006\183\006\188\006\195\006\202\006\209\006\214\006\219\006\223\006\227\006\233\006\241\006\242\006\243\006\244\006\245\006\247\006\249\006\252\006\254\007\001\007\006\007\011\007\014\007\017\007\018\007\019\007\023\007\026\007\031\007\"\007$\007)\007-\0070\0075\0079\007C\007D\007E\007H\007I\007O\007W\007X\007Y\007\\\007]\007^\007`\007c\007g\007k\007p\007u\007v\007w\007x\007y\007z\007{\007|\007}\007~b\002\b\004\b\006\b\t\b\012\b\015\b\018\b\021\b\024\b\027\b\029\b\031\b \b!\b\"\b$\b(\b*\b*\b,\b-\b0\b2\b2\b3\b6\b8\b9\b9\b:\b;\b=\bA\bB\bE\bF\bI\bN\bS\bY\b_\bf\bm\bm\bn\bo\bq\bs\bt\bv\bx\b~\b\131\b\135\b\139\b\140\b\142"))
    
    and lr0_core =
      (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000F\000G\000H\000I\000J\000K\000L\000M\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000]\000^\000_\000`\000a\000b\000c\000d\000e\000f\000g\000h\000i\000j\000k\000l\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\t\001\n\001\011\001\012\001\r\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001 \001!\001\"\001#\001$\001%\001&\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001:\001;\001<\001=\001>\001?\001@\001A\001B\001C\001D\001E\001F\001G\001H\001I\001J\001K\001L\001M\001N\001O\001P\001Q\001R\001S\001T\001U\001V\001W\001X\001Y\001Z\001[\001\\\001]\001^\001_\001`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001p\001q\001r\001s\001t\001u\001v\001w\001x\001y\001z\001{\001|\001}\001~t\002\n\002\015\002\016\002\017\002\018\002\019\002\020\002\021\002\022\002\023\002\007\002\b\002\011\002\012\002\r\002\014\002\024\002\025\002\026\002\027\002\028\002\029\002\030\002\031\002 \002!\002\"\002#\002$\002%\002&\002'\002(\002)\002*\002+\002,\002-\002.\002/\0020\0021\0022\0023\0024\0025\0026\0027\0028\0029\002:\002;\002<\002=\002>\002?\002@\002A\002B\002C\002D\002E\002F\002G\002H\002I\002J\002K\002L\002M\002N\002O\002P\002Q\002R\002S\002T\002U\002V\002W\002X\002Y\002Z\002[\002\\\002]\002^\002_\002`\002a\002b\002c\002d\002e\002f\002g\002h\002i\002j\002k\002l\002m\002n\002o\002p\002q\002r\002s\002t\002u\002v\002w\002x\002y\002z\002{\002|\002}\002~b\003\t\003\020\003\021\003\004\003\005\003\006\003\007\003\n\003\011\003\012\003\r`\003a\003b\003c\003d\003e\003f\003g\003h\003i\003j\003k\003l\003m\003n\003o\003p\003q\003r\003s\003t\003u\003v\003w\003x\003y\003z\003{\003|\003}\003~\003\127\003\128\003\129\003\130\003\218\003\219\003\220\003\221\003\222\003\223\003\224\003\225\003\226\003\227\003\228\003\229\003\230\003\231\003\232\003\233\003\234\003\235\003\236\003\237\003\238\003\239\003\240\003\241\003\242\003\243\003\244\003\245\003\246\003\247\003\248\003\249\003\250\003\251\003\252\003\253\003\254\003\255\004\000\004\001\004\002\004\003\004\004\004\005\004\006\004\007\004\b\004\t\004\n\004\011\004\012\004\r\004\014\004\015\004\016\004\017\004\018\004\019\004\020\004\021\004\022\004\023\004\024\004\025\004\026\004\027\004\028\004\029\004\030\004\031\004 \004!\004\"\004#\004$\004%\004&\004'\004(\004)\004*\004+\004,\004-\004.\004/\0040\0041\0042\0043\0044\0045\0046\0047\0048\0049\004:\004;\004<\004=\004>\004?\004@\004A\004B\004C\004D\004E\004F\004G\004H\004I\004J\004K\004L\004M\004N\004O\004P\004Q\004R\004S\004T\004U\004V\004W\004X\004Y\004Z\004[\004\\\004]\004^\004_\004`\004a\004b\004c\004d\004e\004f\004g\004h\004i\004j\004k\004l\004m\004n\004o\004p\004q\004r\004s\004t\004u\004v\004w\004x\004y\004z\004{\004|\004}\004~b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\005\017\005\018\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\005\030\005\031\005 \005!\005\"\005#\005$\005%\005&\005'\005(\005)\005*\005+\005,\005-\005.\005/\0050\0051\0052\0053\0054\0055\0056\0057\0058\0059\005:\005;\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005K\005L\005M\005N\005O\005P\005Q\005R\005S\005T\005U\005V\005W\005X\005Y\005Z\005[\005\\\005]\005^\005_\005`\005a\005b\005c\005d\005e\005f\005g\005h\005i\005j\005k\005l\005m\005n\005o\005p\005q\005r\005s\005t\005u\005v\005w\005x\005y\005z\005{\005|\005}\005~b\006\t\006\n\006\011\006\012\006\r\006\014\006\015\006\016\006\017\006\018\006\019\006\020\006\021\006\022\006\023\006\024\006\025\006\026\006\027\006\028\006\029\006\030\006\031\006 \006!\006\"\006#\006$\006%\006&\006'\006(\006)\006*\006+\006,\006-\006.\006/\0060\0061\0062\0063\0064\0065\0066\0067\0068\0069\006:\006;\006<\006=\006>\006?\006@\006A\006B\006C\006D\006E\006F\006G\006H\006I\006J\006K\006L\006M\006N\006O\006P\006Q\006R\006S\006T\006U\006V\006W\006X\006Y\006Z\006[\006\\\006]\006^\006_\006`\006a\006b\006c\006d\006e\006f\006g\006h\006i\006j\006k\006l\006m\006n\006o\006p\006q\006r\006s\006t\006u\006v\006w\006x\006y\006z\006{\006|\006}\006~
    
    and lr0_items =
w\129\000\001)\129\000\001)\001\000\001\"\129\000\001\"\001\000\0003\001\000\0002\129\000\000\201\001\000\0002\130\000\001,\001\000\000\190\129\000\001w\001\000\000\\\001\000\000\\\002\000\001{\129\000\001{\130\000\001{\131\000\001ww\130\000\001w\131\000\001{\132\000\001{\133\000\000\007\129\000\000\160\001\000\000\007\001\000\000k\129\000\000l\001\000\000\007\002\000\000\216\129\000\000\216\130\000\000\216\131\000\000\216\001\000\000\011\129\000\000\t\001\000\000\006\129\000\000\006\001\000\000\006\130\000\000\006\131\000\000\006\132\000\000\160\001\000\000k\129\000\000\169\129\000\000\169\130\000\001\023\001\000\001\022\129\000\000k\001\000\000j\129\000\000j\001\000\000i\129\000\001\023\002\000\001\022\130\000\000k\002\000\000j\130\000\000j\002\000\000i\130\000\001\023\003\000\001\022\131\000\000k\003\000\000j\131\000\000j\003\000\000i\131\000\001u\001\000\001\023\004\000\000k\004\000\000j\004\000\001u\129\000\001s\001\000\001q\129\000\001t\001\000\001s\129\000\001s\130\000\001q\130\000\001\004\129\000\001s\002\000\001\005\001\000\001s\003\000\001\005\002\000\001\005\003\000\001\023\005\000\000k\005\000\000j\005\000\001p\129\000\000k\006\000\000j\006\000\001p\001\000\000\160\001\000\000.\001\000\0000\129\000\000\187\001\000\000\185\001\000\000\183\001\000\000\182\001\000\000/\129\000\000/\001\000\000\011\129\000\000\t\001\000\000\006\129\000\000\006\001\000\000/\002\000\001p\129\000\000c\001\000\000c\002\000\001p\129\000\000\n\001\000\000\t\129\000\001p\129\000\000\155\001\000\000\154\001\000\000\153\001\000\000\155\002\000\000\154\002\000\000\153\002\000\000\254\001\000\000\007\001\000\000\254\002\000\000\007\002\000\000\015\001\000\000\014\129\000\000\207\129\000\000\015\002\000\000\014\130\000\000\014\001\000\000\r\129\000\000\014\002\000\000\r\130\000\000\r\001\000\000\012\129\000\000\012\001\000\000\n\129\000\000\n\130\000\000\012\130\000\000\179\001\000\000\179\002\000\000\b\001\000\000c\129\000\000b\001\000\000c\130\000\001m\129\000\001\b\129\000\001\b\130\000\001q\001\000\000\161\001\000\000\160\129\000\000\161\002\000\000\161\003\000\000\161\001\000\000\160\129\000\000\161\004\000\000\160\130\000\000\160\131\000\001q\002\000\000\160\130\000\001q\003\000\000\015\129\000\001\b\131\000\000\011\001\000\000\b\129\000\000\011\002\000\000\011\003\000\000\b\130\000\000b\129\000\000b\130\000\000b\131\000\000b\132\000\001m\001\000\001\t\001\000\000\011\001\000\000\b\129\000\001\t\002\000\001\t\003\000\000\011\001\000\000\b\129\000\000c\131\000\001\t\129\000\001\002\129\000\001\003\001\000\000\012\131\000\000\012\132\000\001\003\002\000\001\003\003\000\001g\001\000\001f\129\000\001f\130\000\000\206\001\000\001f\131\000\001f\132\000\001\001\001\000\001\001\002\000\000\004\129\000\001\001\003\000\000\005\001\000\000\005\002\000\000\005\003\000\000\005\004\000\001f\133\000\001\000\129\000\000\005\001\000\001g\002\000\001\n\001\000\0008\001\000\0008\002\000\0007\129\000\000\005\001\000\001\t\129\000\000\012\002\000\000\012\003\000\000\r\002\000\000\r\003\000\001\003\001\000\000\r\004\000\000\r\005\000\001\003\001\000\000\r\131\000\000\rb\129\000\000\154\130\000\000\153\130\000\000\153\131\000\000\236\129\000\000\005\001\000\000\n\002\000\000\t\130\000\000\t\131\000\000c\003\000\000c\004\000\000c\005\000\000/\130\000\000/\131\000\001\006\129\000\000\011\130\000\000\t\002\000\000\011\131\000\000\t\003\000\000\011\132\000\000\011\133\000\000\t\004\000\001\006\130\000\001\006\131\000\0008\001\000\001\007\001\000\0008\001\000\000\006\002\000\000\006\003\000\001\007\002\000\001\007\003\000\0008\001\000\000.\129\000\000\r\001\000\000\012\129\000\000\012\001\000\000.\130\000\000\187\002\000\000\176\001\000\000n\129\000\000n\001\000\000n\130\000\000n\002\000\000n\131\000\000n\003\000\000n\132\000\000n\004\000\000n\133\000\000n\005\000\000n\134\000\000n\135\000\000\187\003\000\000\187\004\000\000p\001\000\000o\129\000\000p\002\000\000o\001\000\0000\001\000\000\185\002\000\000h\129\000\0006\129\000\000.\001\000\000/\129\000\000/\001\000\000.\129\000\000h\130\000\000g\001\000\0006\001\000\0006\002\000\0006\003\000\001\006\001\000\0005\129\000\001\006\002\000\0005\130\000\001\006\003\000\0005\131\000\000\011\001\000\000\b\129\000\000g\002\000\001\005\129\000\0005\001\000\000\011\001\000\000\b\129\000\000h\001\000\000g\129\000\000g\130\000\000g\131\000\000g\132\000\000\011\001\000\000\b\129\000\001\005\129\000\000h\002\000\0005\001\000\000\011\001\000\000\b\129\000\000h\131\000\000h\132\000\000\245\001\000\0007\001\000\000h\129\000\000\245\002\000\000\244\001\000\000\244\129\000\000\182\002\000\0008\001\000\000\183\002\000\000i\001\000\000i\002\000\000i\003\000\000\186\129\000\000\186\130\000\000\186\131\000\000\184\129\000\001p\002\000\000\188\001\000\000\187\129\000\000\186\001\000\000\185\129\000\000\184\001\000\000\183\129\000\000\181\129\000\0008\001\000\000\188\002\000\000\187\130\000\000\186\002\000\000\185\130\000\000\184\002\000\000\183\130\000\000\188\003\000\000\186\003\000\000\184\003\000\000\188\004\000\000\188\005\000\000\188\006\000\000\186\004\000\000\184\004\000\000\187\131\000\000\187\132\000\000\187\133\000\000\185\131\000\000\183\131\000\000\182\129\000\000j\007\000\000j\b\000\000\250\129\000\000j\t\000\000\237\129\000\000\237\130\000\001a\001\000\001`\129\000\000k\001\000\000j\129\000\001a\002\000\001`\130\000\000k\002\000\000j\130\000\001a\003\000\001`\131\000\000k\003\000\000j\131\000\001a\004\000\000k\004\000\001a\005\000\000k\005\000\001p\129\000\000k\006\000\000k\007\000\000\250\129\000\000k\b\000\000\250\130\000\000\250\131\000\0008\001\000\000\250\132\000\000\250\133\000\0008\001\000\000\138\129\000\000\138\130\000\000k\t\000\001a\006\000\001a\007\000\000\239\001\000\001a\b\000\000h\129\000\000\\\129\000\000h\130\000\000\\\130\000\000\\\131\000\0003\001\000\0002\129\000\0003\002\000\0003\003\000\0002\001\000\0002\002\000\0003\129\000\000\162\001\000\0001\129\000\0001\001\000\000\162\002\000\0001\130\000\0001\131\000\0001\132\000\0001\133\000\000\\\132\000\000\\\133\000\001a\t\000\000\248\001\000\000\247\129\000\001a\n\000\000\247\130\000\000\248\002\000\000\245\129\000\000\246\129\000\000\246\001\000\000\247\001\000\000i\001\000\000]\001\000\000]\002\000\000]\003\000\000]\004\000\001r\129\000\001`\132\000\000j\132\000\001p\129\000\000j\133\000\000j\134\000\000\250\129\000\000j\135\000\000j\136\000\001`\133\000\001`\134\000\001`\135\000\001`\136\000\000\248\001\000\000\247\129\000\001`\137\000\000\141\129\000\000\141\001\000\000\004\001\000\000\003\129\000\000\189\001\000\000\188\129\000\000\189\002\000\000\189\003\000\000\189\004\000\000\165\001\000\000\165\002\000\000F\001\000\000F\002\000\000F\003\000\000\029\129\000\000\029\001\000\001:\001\000\001\030\129\000\001\030\001\000\001\030\002\000\001\030\130\000\001\029\129\000\001\029\001\000\001\029\002\000\001\029\130\000\001wf\001\000\001e\129\000\000:\001\000\000:\002\000\000:\003\000\000B\001\000\000B\002\000\000B\003\000\001w\001\000\000U\001\000\000U\002\000\000\150\001\000\000\150\002\000\000\150\003\000\000\242\129\000\000\150\004\000\001 \129\000\001 \001\000\001\031\129\000\0002\001\000\001\031\001\000\000q\129\000\000\162\001\000\000r\001\000\000\162\002\000\000r\002\000\000rr\129\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\001\014\130\000\001\014\002\000\001\014\131\000\001=\003\000\001;\129\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\213\130\000\000\149\131\000\000\149\003\000\000\148\131\000\000\148\003\000\000\149\132\000\000\149\004\000\000\148\132\000\000\149\005\000\000\208\129\000\000\149\006\000\000\149\133\000\001 \130\000\001 \002\000\001 \003\000\0017\001\000\000z\129\000\000z\001\000\000y\129\000\000y\001\000\000w\129\000\000w\001\000\000w\002\000\000q\001\000\000p\129\000\000q\002\000\000q\003\000\0008\001\000\000w\003\000\000w\004\000\000w\130\000\000u\129\000\000u\001\000\000u\002\000\000u\003\000\000\214\129\000\000T\001\000\0017\001\000\000\127\129\000\000v\129\000\000v\001\000\000\232\129\000\000v\002\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\127\001\000\000~\129\000\000\127\002\000\000\127\003\000\0008\001\000\000v\003\000\000v\004\000\000v\005\000\000\232\001\000\000v\130\000\001w\129\000\001[\129\000\001?\001\000\0019\129\000\0019\001\000\0018\001\000\0003\001\000\0002\129\000\001[\130\000\000\180\001\000\000\179\129\000\000\180\002\000\001[\131\000\001[\132\000\000x\001\000\000x\002\000\001Z\129\000\000|\001\000\000@\001\000\000?\129\000\000?\001\000\000>\129\000\000@\002\000\000?\130\000\000@\003\000\000@\004\000\000@\005\000\000\165\129\000\000\165\130\000\000d\129\000\000d\001\000\000e\129\000\000e\001\000\000d\002\000\000d\130\000\000d\131\000\000\171\001\000\000\170\001\000\000\170\002\000\000\251\129\000\000fk\129\000\000\175\003\000\000\174\129\000\000\173\129\000\000\251\001\000\000\173\001\000\000\172\129\000\000\171\129\000\000\171\002\000\000\171\003\000\000\173\001\000\000\172\129\000\000\171\129\000\000d\132\000\000dr\001\000\001\012\129\000\001\012\001\000\000\211\129\000\0012\001\000\001w\001\000\000q\129\000\001!\129\000\001!\001\000\000E\129\000\000E\130\000\000E\131\000\001(\001\000\001'\129\000\001(\002\000\001'\130\000\001(\003\000\001'\131\000\000C\129\000\000C\001\000\000C\130\000\000C\002\000\000C\131\000\000C\003\000\000@\129\000\000@\130\000\000@\131\000\000\255\129\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\152\129\000\000\152\001\000\000\151\129\000\000\152\002\000\000A\129\000\000A\001\000\000A\130\000\000A\002\000\000A\131\000\000A\003\000\001w\129\000\001?\001\000\0019\129\000\0019\001\000\0018\001\000\000A\132\000\0003\001\000\0002\129\000\000A\133\000\000A\134\000\000A\135\000\000`\001\000\000=\129\000\000=\001\000\000=\130\000\000=\002\000\000=\131\000\000=\003\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000=\132\000\000=\004\000\000=\133\000\000D\129\000\000D\130\000\000D\131\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000D\132\000\000D\133\000\001,\129\000\001*\001\000\001xs\129\000\000s\130\000\000t\001\000\000t\002\000\000t\129\000\0010\001\000\001/\129\000\001.\001\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001#\129\000\001#\001\000\000t\130\000\001+\129\000\001x\129\000\0016\129\000\0016\001\000\0015\129\000\0014\129\000\0014\001\000\0012\129\000\0011\129\000\001/\001\000\001.\129\000\000\162\001\000\0001\129\000\0001\001\000\001x\130\000\0016\130\000\0016\002\000\0015\130\000\0014\130\000\0014\002\000\0012\130\000\0011\130\000\001/\002\000\001.\130\000\000\162\002\000\0001\130\000\001w\129\000\0016\131\000\0011\131\000\001.\131\000\0001\131\000\0011\132\000\000\199\001\000\000\004\001\000\000\198\129\000\000\003\129\000\0016\132\000\0016\133\000\0016\134\000\0016\135\000\000\168\001\000\000\167\129\000\000\166\129\000\0016\136\000\0016\137\000\000\173\001\000\000\172\129\000\000\171\129\000\0016\138\000\001f\001\000\000\200\129\000\001e|\129\000\000S\129\000\000S\130\000\000S\131\000\001\018\001\000\001\017\129\000\001\017\001\000\001\016\129\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000M\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\131\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000L\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\003\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000K\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\131\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000K\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\003\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000N\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\003\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000P\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\003\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000M\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\003\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000L\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\131\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000O\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\003\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000J\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\131\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000J\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\003\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000I\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\131\000\000I\129\000\000I\001\000\000H\129\000\000I\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\003\000\000I\001\000\000H\129\000\000H\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\131\000\000H\129\000\000O\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\131\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000N\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\131\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001\b\002\000\001\b\003\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000R\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\003\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000T\130\000\001\b\001\000\000Z\129\000\000T\131\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000P\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\131\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000Q\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\003\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000Q\130\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\131\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000Z\130\000\001+\001\000\000G\129\000\0010\001\000\001/\129\000\001.\001\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001#\129\000\001#\001\000\000G\130\000\000S\001\000\001\b\001\000\000Z\129\000\000T\129\000\000S\002\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001\018\002\000\001\017\130\000\001\017\002\000\001\018\003\000\001\018\004\000\001\018\005\000\001\017\131\000\000\005\129\000\000\005\130\000\0017\129\000\000{\129\000\000{\130\000\000{\131\000\0008\001\000\000{\132\000\000{\133\000\000\231\129\000\000\230\129\000\000\229\129\000\000\229\001\000\000\226\129\000\000{\001\000\000{\002\000\000{\003\000\000\226\130\000\000\226\131\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\229\002\000\000\229\003\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\231\130\000\000\231\131\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\230\130\000\000\230\131\000\000\229\130\000\000\230\001\000\000\231\001\000\000\226\001\000\000\226\002\000\000\226\003\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\005\131\000\000\005\132\000\000|\130\000\000\151\002\000\001\bn\129\000\001\bo\001\000\001o\002\000\0008\001\000\001n\129\000\001n\001\000\001n\130\000\001n\002\000\0008\001\000\001n\131\000\001n\132\000\0008\001\000\000\215\129\000\001\016\002\000\001\015\130\000\001\015\002\000\001\016\003\000\001\015\131\000\001\015\003\000\001\016\004\000\001\015\132\000\001\016\005\000\000\243\001\000\0012\132\000\0012\133\000\001x\129\000\0016\129\000\0016\001\000\0015\129\000\0014\129\000\0014\001\000\0012\129\000\0011\129\000\001/\001\000\001.\129\000\000\162\001\000\000r\001\000\0001\129\000\0001\001\000\001x\130\000\0016\130\000\0016\002\000\0015\130\000\0014\130\000\0014\002\000\0012\130\000\0011\130\000\001/\002\000\001.\130\000\000\162\002\000\000r\002\000\0001\130\000\001w\001\000\000r\003\000\001x\131\000\000s\001\000\0010\001\000\001/\129\000\001.\001\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001#\129\000\001#\001\000\000s\002\000\001%\002\000\001$\130\000\001$\002\000\000X\130\000\000X\002\000\000W\130\000\001$\131\000\000X\003\000\001$\132\000\001\b\001\000\000Z\129\000\000X\004\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001$\133\000\000X\005\000\000X\006\000\001\b\001\000\000Z\129\000\000X\007\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001$\003\000\000W\131\000\001$\004\000\001\b\001\000\000Z\129\000\000W\132\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001$\005\000\000W\133\000\000W\134\000\001\b\001\000\000Z\129\000\000W\135\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001%\003\000\000X\131\000\001%\004\000\001\b\001\000\000Z\129\000\000X\132\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001%\005\000\000X\133\000\000X\134\000\001\bb\001\000\000Z\129\000\000V\007\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001#\131\000\000V\131\000\001#\132\000\000V\132\000\001#\133\000\000V\133\000\000V\134\000\001\b\001\000\000Z\129\000\000V\135\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001'\003\000\000W\003\000\001'\004\000\001\b\001\000\000Z\129\000\000W\004\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001'\005\000\000W\005\000\000W\006\000\001\b\001\000\000Z\129\000\000W\007\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\131\000\001&\003\000\001%\131\000\000\162\001\000\000r\001\000\000Z\003\000\000Y\131\000\000Y\003\000\001&\132\000\001&\004\000\001%\132\000\000Z\004\000\000Y\132\000\000Y\004\000\001&\005\000\000Y\133\000\001&\006\000\001\b\001\000\000Z\129\000\000Y\134\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\007\000\000Y\135\000\000Y\136\000\001\b\001\000\000Z\129\000\000Y\137\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001%\133\000\000Y\005\000\001%\134\000\001\b\001\000\000Z\129\000\000Y\006\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001%\135\000\000Y\007\000\000Y\b\000\001\b\001\000\000Z\129\000\000Y\t\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\133\000\000Z\005\000\001&\134\000\001\b\001\000\000Z\129\000\000Z\006\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\135\000\000Z\007\000\000Z\b\000\001\b\001\000\000Z\129\000\000Z\t\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001.\003\000\000U\131\000\000U\132\000\001\b\001\000\000Z\129\000\000U\133\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\0010\001\000\001/\129\000\001.\001\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001#\129\000\001#\001\000\000r\129\000\000\252\129\000\000F\130\000\000\252\130\000\000\252\001\000\001\b\001\000\000Z\129\000\000T\129\000\000R\130\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001#\004\000\001#\005\000\001#\131\000\001#\132\000\001#\133\000\001'\003\000\001'\004\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001'\005\000\001&\131\000\001&\003\000\001%\131\000\000\162\001\000\000r\001\000\001&\132\000\001&\004\000\001%\132\000\001&\005\000\001&\006\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\007\000\001%\133\000\001%\134\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001%\135\000\001&\133\000\001&\134\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001&\135\000\001.\003\000\001$\132\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001$\133\000\001$\003\000\001$\004\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001$\005\000\001%\003\000\001%\004\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001%\005\000\000D\134\000\0008\129\000\0009\001\000\000D\135\000\000D\136\000\000D\137\000\000D\138\000\000D\139\000\000=\134\000\000=\135\000\000=\136\000\000=\137\000\000=\005\000\000=\006\000\000=\007\000\000=\b\000\000=\t\000\000=\n\000\000=\011\000\000`\002\000\001w\129\000\001?\001\000\0019\129\000\0019\001\000\0018\001\000\000a\129\000\0003\001\000\0002\129\000\000a\130\000\000a\131\000\000a\132\000\000`\129\000\000`\130\000\000\011\001\000\000\b\129\000\000`\131\000\000`\132\000\000x\129\000\000a\001\000\000a\002\000\000ab\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000C\134\000\000C\006\000\000C\007\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000C\b\000\001(\004\000\001'\132\000\001'\133\000\0010\001\000\001/\129\000\001.\001\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001#\129\000\001#\001\000\000E\132\000\001!\002\000\001\b\001\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001!\003\000\0010\001\000\001/\129\000\001.\001\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001#\129\000\001#\001\000\001!\130\000\0012\002\000\0012\003\000\001\b\001\000\000\211\130\000\000Z\129\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\001\r\002\000\001\012\130\000\001\012\002\000\001\r\003\000\001\012\131\000\001\r\004\000\001-\130\000\001-\002\000\001-\003\000\0015\002\000\0015\003\000\0013\130\000\0013\002\000\0013\003\000\000@\bb\000\000?\t\000\000|\002\000\000|\003\000\000|\004\000\000|\005\000\000|\006\000\001Z\130\000\000_\129\000\000_\130\000\000_\131\000\000_\001\000\001[\001\000\001[\002\000\001[\133\000\000\127\130\000\000\214\130\000\000u\004\000\000u\005\000\000u\130\000\001n\129\000\001n\001\000\000z\130\000\000z\002\000\000z\131\000\000z\132\000\000z\133\000\000z\134\000\0008\001\000\000z\135\000\000z\136\000\000\254\129\000\000z\003\000\000z\004\000\000z\005\000\0008\001\000\000z\006\000\000z\007\000\000y\130\000\000y\131\000\000y\132\000\000y\002\000\000\150\005\000\000\150\006\000\001\b\001\000\000Z\129\000\000U\003\000\000T\129\000\000R\001\000\000Q\129\000\000Q\001\000\000P\129\000\000P\001\000\000O\129\000\000O\001\000\000N\129\000\000N\001\000\000M\129\000\000M\001\000\000L\129\000\000L\001\000\000K\129\000\000K\001\000\000J\129\000\000J\001\000\000I\129\000\000I\001\000\000H\129\000\000B\004\000\000B\005\000\001\000\001\000\000B\006\000\000:\004\000\000:\005\000\001\000\001\000\000:\006\000\001\bb\000\000\173\001\000\000\172\129\000\000\171\129\000\000\219\t\000\000\170\133\000\000\168\001\000\000\167\129\000\000\166\129\000\0019\135\000\000\173\001\000\000\172\129\000\000\171\129\000\0019\136\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\029\130\000\000\029\002\000\000\029\003\000\000\029\131\000\0008\001\000\000\029\132\000\000\029\133\000\000F\004\000\000\022\129\000\001{\001\000\001z\001\000\001{\002\000\001z\002\000\001{\003\000\001z\003\000\001{\004\000\001z\004\000\001z\005\000\001z\006\000\001{\005\000\001{\006\000\001{\007\000\000\022\130\000\000\022\131\000\001z\129\000\001y\129\000\001y\001\000\001~\001\000\001}\001\000\001~\002\000\001}\129\000\000\176\001\000\001}\130\000\001y\002\000\001y\003\000\001y\004\000\001y\005\000\0008\001\000\001z\130\000\001y\130\000\001z\131\000\001y\131\000\001y\132\000\001y\133\000\001z\132\000\001z\133\000\001z~\129\000\001\127\130\000\001\127\001\000\000\239\001\000\001\127\002\000\000\156\130\000\000\156\131\000\000\156\132\000\000\156\133\000\000\159\002\000\000\158\002\000\000\157\002\000\000\159\003\000\000\158\003\000\000\157\003\000\000\159\004\000\000\158\004\000\000\159\005\000\000\159\006\000\000\159\007\000\000\159\b\000\0008\001\000\000\159\t\000\000\159\n\000\000\158\005\000\000\158\006\000\000\158\007\000\000\157\004\000\000m\129\000\000m\130\000\000\235\001\000\000\234\129\000\000\235\002\000\000\234\130\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\235\003\000\000\235\004\000\001b\129\000\001b\001\000\000\174\001\000\000\174\002\000\000\174\003\000\000\174\004\000\000\174\005\000\000\212\129\000\000\212\130\000\000\173\001\000\000\172\129\000\000\171\129\000\000\174\006\000\000\174\007\000\001b\130\000\001b\002\000\001b\131\000\001b\003\000\001b\004\000\001b\005\000\001b\006\000\001b\132\000\001b\133\000\001b\134\000\001b\135\000\000\133\129\000\000\133\130\000\000\133\131\000\000\133\132\000\000\133\133\000\000\133\134\000\001b\136\000\000]\129\000\000]\130\000\001e\001\000\001e\002\000\001e\003\000\001e\004\000\000\168\001\000\000\167\129\000\000\166\129\000\001e\005\000\000\238\001\000\000\238\002\000\000\238\003\000\000\238\004\000\000\238\005\000\000\238\006\000\0008\001\000\000\238\007\000\000\181\001\000\000\180\129\000\000\181\002\000\000\238\b\000\000\238\t\000\001Z\001\000\001\018\129\000\001Z\002\000\001\018\130\000\001Z\003\000\001\018\131\000\001Z\004\000\001\018\132\000\001Z\005\000\001Z\006\000\001Z\007\000\001Z\b|p\129\000\000+\001\000\000)\129\000\000)\130\000\000)\131\000\000)\132\000\000#\001\000\000\r\001\000\000\012\129\000\000\012\001\000\001\n\001\000\001\003\129\000\0008\001\000\000*\001\000\000*\002\000\000)\001\000\000)\002\000\000)\003\000\001q\001\000\000\161\001\000\000\160\129\000\000+\129\000\001q\002\000\000\160\130\000\000+\130\000\001q\003\000\000+\131\000\000#\129\000\000\015\129\000\000)\004\000\000(\129\000\000$\129\000\000*\003\000\000)\133\000\001\027\136\000\001\027\137\000\000\131\129\000\000\131\130\000\000\131\131\000\000\131\132\000\000\131\133\000\000\131\134\000\000\131\135\000\000\131\136\000\000\131\137\000\001\027\138\000\001\020\129\000\000\140\001\000\001\023\129\000\001\021\001\000\001\026\129\000\001\026\001\000\001\025\001\000\000\140\002\000\001\019\129\000\001\019\130\000\001\021\129\000\000\136\129\000\000\136\130\000\000\136\131\000\000\136\132\000\000\136\133\000\000\250\129\000\000\136\134\000\000\136\135\000\000\136\136\000\001\021\130\000\001\022\001\000\000\137\129\000\000\137\130\000\000\137\131\000\000\137\132\000\000\137\133\000\000\137\134\000\000\250\129\000\000\137\135\000\000\137\136\000\000\137\137\000\001\022\002\000\001\020\001\000\001\028\001\000\000\139\130\000\000\233\130\000\001\019\001\000\000\234\002\000\0008\001\000\001d\001\000\000*\129\000\001d\002\000\001d\003\000\001d\004\000\001d\005\000\001d\006\000\000\025\129\000\000(\001\000\000(\002\000\000(\003\000\000\024\001\000\000\024\002\000\000\024\003\000\000\024\004\000\000\022\001\000\000\021\129\000\000\022\002\000\000\022\003\000\000'\129\000\000&\001\000\000}\129\000\000}\001\000\000\019\129\000\000\019\001\000\000}\130\000\000}\131\000\000}\132\000\000}\133\000\000}\134\000\000}\135\000\000\019\130\000\000\019\002\000\000\019\131\000\000\019\132\000\000\162\001\000\000\019\133\000\000\019\134\000\000'\001\000\001\004\001\000\000'\002\000\000'\003\000\000'\004\000\000\018\001\000\000\018\002\000\000\027\129\000\000\027\001\000\000\027\002\000\000~\001\000\000\018\129\000\000\018\130\000\000\021\001\000\000\020\129\000\000\017\129\000\000\252\129\000\000\020\130\000\000&\129\000\000\020\001\000\000\018\131\000\000\020\002\000\000~\002\000\000\027\003\000\000\020\001\000\000\027\130\000\000\018\003\000\000\020\001\000\000\019\135\000\000\019\003\000\000\162\001\000\000\019\004\000\000\019\005\000\000\020\001\000\000\019\006\000\000}\002\000\000}\003\000\000}\004\000\000}d\007\000\001d\b\000\000\130\129\000\000\130\130\000\000\130\131\000\000\130\132\000\000\130\133\000\000\130\134\000\000\130\135\000\000\130\136\000\001d\t\000\001_\129\000\000\142\001\000\000|\001\000\001a\129\000\001Y\129\000\001_\001\000\001c\129\000\001c\001\000\001]\001\000\000\151\001\000\000\142\002\000\001]\129\000\000|\129\000\001^\001\000\001^\002\000\001`\001\000\001`\002\000\001^\129\000\001d\129\000\000\233\001\000\001\\\129\000\001\\\130\000\001\\\131\000\000]\131\000\000]\132\000\001]\001\000\000\151\001\000\0009\129\000\001\\\001\000\001]\129\000\000|\129\000\000S\129\000\000m\131\000\000m\132\000\000F\005\000\000F\006\000\000\165\003\000\000\165\004\000\000\189\005\000\000\168\001\000\000\167\129\000\000\166\129\000\000\189\006\000\000\188\130\000\000\188\131\000\000\188\132\000\000\168\001\000\000\167\129\000\000\166\129\000\000\188\133\000\000\141\130\000\000\141\131\000\000\141\132\000\000\141\002\000\000\237\131\000\000\237\132\000\000j\n\000\001\023\006\000\001\023\007\000\001\023\b\000\001\023\t\000\000\249\129\000\001\023\n\000\000\249\130\000\000\248\129\000\000\249\001\000\001\022\132\000\000j\132\000\000i\132\000\001p\129\000\000j\133\000\000i\133\000\000i\134\000\000i\135\000\000\250\129\000\000i\136\000\000i\137\000\001\022\133\000\001\022\134\000\001\022\135\000\001\022\136\000\000\249\129\000\001\022\137\000\000\169\131\000\000\169\132\000\000\173\001\000\000\172\129\000\000\171\129\000\000\006\133\000\000\006\134\000\001{\134\000\0008\001\000\001{\135\000\000\\\003\000\000\\\004\000\0010\001\000\001/\129\000\001.\001\000\001,\002\000\001'\001\000\001&\129\000\001&\001\000\001%\129\000\001%\001\000\001$\129\000\001$\001\000\001#\129\000\001#\001\000\001)\130\000\001)\002\000\001)\131\000\001)\003\000\001)\132\000\001)\004\000\001)\133\000\001)\005\000\000\168\001\000\000\167\129\000\000\166\129\000\001)\006\000\001)\134\000\001)\135\000\000\173\001\000\000\172\129\000\000\171\129\000\001)\136\000\001\"\130\000\001\"\002\000\001\"\003\000\001\"\131\000\001\"\132\000\000B\132\000\000B\133\000\001\000\001\000\000B\134\000\000<\004\000\000;\132\000\000;\004\000\000:\132\000\000<\005\000\000;\005\000\001\000\001\000\000<\006\000\000;\006\000\000<\007\000\000<\b\000\000;\133\000\000;\134\000\000D\004\000\000D\005\000\000D\006\000\000D\007\000\000\017\003\000\000\017\004\000\000<\131\000\000<\132\000\000<\133\000\000<\134\000\000<\135\000\000l\129\000\000l\130\000\000\000\001\000\000\000\128\000\000m\001\000\000m\002\000\000\000\129\000\000\001\000\000\000\001\001\000\000\220\001\000\0008\001\000\000\220\002\000\000\001\128\000\000\220\129\000\000\220\130\000\000\001\129\000\000\002\000\000\000\225\129\000\000\224\001\000\000\223\001\000\000\222\001\000\000\221\129\000\000\221\001\000\000\221\002\000\000\002\001\000\000\002\128\000\001j\129\000\001j\001\000\001i\129\000\001i\001\000\001h\129\000\001h\001\000\001g\129\000\001j\130\000\001j\002\000\001i\130\000\001i\002\000\001h\130\000\001h\002\000\001g\130\000\001j\131\000\001h\003\000\001h\131\000\001j\003\000\001i\003\000\001x\129\000\001i\131\000\000\162\001\000\001x\130\000\000\162\002\000\001l\129\000\000\002\129\000\001l\001\000\001l\002\000\000\145\001\000\000\145\002\000\001k\001\000\001k\002\000\001k\003\000\001k\129\000\001k\130\000\000\003\000\000\000\146\129\000\000\146\001\000\000\147\129\000\000\147\001\000\000\147\002\000\000\147\130\000\000\146\130\000\000\146\131\000\000\146\132\000\000\146\002\000\000\003\001\000\001v\129\000\001v\130\000\001v\131\000\001v\132\000\001v\001\000\001v\002"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000F\000J\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000[\000]\000^\000_\000`\000a\000b\000i\000j\000k\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\n\001\011\001\012\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\023\001\024\001\026\001\027\001\030\001\031\001\"\001#\001$\001%\001'\001(\001)\001,\001-\001.\001/\0010\0011\0012\0013\0017\0018\001;\001<\001=\001>\001@\001A\001B\001C\001E\001F\001G\001H\001J\001K\001L\001N\001O\001P\001Q\001R\001T\001U\001W\001X\001Z\001\\\001]\001^\001_\001a\001b\001d\001e\001h\001i\001j\001l\001m\001n\001o\001q\001r\001s\001t\001v\001y\001|\001~t\002\n\002\011\002\012\002\r\002\014\002\015\002\016\002\017\002\018\002\019\002\020\002\021\002\022\002\024\002\025\002\026\002\030\002\"\002&\002(\002*\002,\002-\002/\0020\0022\0023\0025\0026\0027\0028\0029\002:\002;\002<\002>\002@\002A\002C\002D\002E\002F\002G\002H\002K\002M\002N\002O\002P\002Q\002R\002U\002V\002W\002X\002Y\002Z\002[\002\\\002^\002_\002`\002a\002b\002d\002f\002g\002i\002j\002k\002l\002m\002p\002q\002s\002t\002u\002w\002x\002y\002z\002{\002|\002}\002~n\003\011\003\017\003\018\003\024\003\025\003\031\003 \003!\003\"\003$\003*\003+\003-\0033\0039\003?\003@\003B\003C\003D\003E\003M\003O\003P\003Q\003R\003X\003\\\003_\003`\003a\003b\003c\003d\003e\003f\003k\003m\003n\003p\003q\003s\003t\003u\003v\003x\003y\003z\003{\003|\003~t\004\016\004\017\004\022\004\023\004\024\004\028\004\029\004\030\004\031\004!\004\"\004&\004'\004)\004+\004-\0040\0041\0042\0044\0045\0046\0047\0048\0049\004;\004=\004?\004A\004C\004E\004F\004G\004H\004I\004Q\004R\004T\004V\004X\004`\004a\004b\004c\004d\004f\004h\004j\004q\004r\004s\004t\004u\004{\004|\004}\004~\004\127\004\140\004\141\004\154\004\155\004\156\004\159\004\160\004\161\004\162\004\163\004\176\004\183\004\184\004\185\004\209\004\210\004\211\004\212\004\213\004\214\004\227\004\228\004\241\004\253\005\002\005\003\005\005\005\007\005\b\005\t\005\n\005\014\005\015\005\019\005\020\005\022\005\024\005\026\005\028\005\029\005\031\005 \005!\005#\005$\005&\0053\0054\0055\0056\0058\0059\005:\005;\005=\005>\005?\005Z\005[\005s\005t\005\140\005\141\005\165\005\166\005\190\005\191\005\215\005\216\005\240\005\241\006\t\006\n\006\"\006#\006;\006<\006T\006U\006m\006n\006\134\006\135\006\159\006\160\006\184\006\185\006\209\006\210\006\234\006\235\007\003\007\004\007\028\007\029\0075\0076\007N\007O\007g\007h\007\128\007\129\007\131\007\144\007\145\007\169\007\172\007\173\007\174\007\175\007\176\007\177\007\178\007\180\007\181\007\183\007\184\007\185\007\191\007\192\007\193\007\194\007\200\007\201\007\207\007\208\007\214\007\215\007\216\007\217\007\218\007\220\007\221\007\227\007\228\007\229\007\230\007\231\007\255\b\005\b\006\b\007\b\t\b\n\b\011\b\012\b\r\b\014\b\016\b\017\b\018\b\020\b\021\b\022\b\023\b1\b3\b4\b6\b7\b8\b9\b:\b;\b<\b=\bJ\bK\bL\bO\bP\bR\bT\bW\bX\bZ\b[\b^\ba\bc\bd\be\bf\bg\bu\b\130\b\132\b\133\b\134\b\147\b\153\b\155\b\180\b\182\b\183\b\207\b\209\b\234\b\236\b\237\t\005\t\007\t \t\"\t#\t;\tI\tK\tM\tO\tP\th\tj\tl\tn\to\t\135\t\137\t\162\t\164\t\165\t\189\t\197\t\203\t\205\t\230\t\232\t\233\n\001\n\003\n\028\n\030\n\031\n7\n9\nR\nT\nU\nm\no\np\n\136\n\149\n\151\n\152\n\153\n\177\n\178\n\179\n\180\n\181\n\182\n\183\n\207\n\208\n\213\n\216\n\217\n\241\n\242\n\243\011\011\011\012\011\r\011%\011&\011'\011?\011@\011A\011Y\011Z\011[\011s\011t\011u\011v\011w\011x\011y\011z\011{\011|\011}\011~\011\127\011\128\011\129\011\130\011\131\011\132\011\133\011\134\011\135\011\136\011\144\011\145\011\146\011\147\011\148\011\151\011\152\011\153\011\154\011\155\011\156\011\157\011\160\011\167\011\168\011\169\011\171\011\172\011\173\011\174\011\175\011\176\011\177\011\178\011\180\011\181\011\182\011\183\011\185\011\186\011\187\011\188\011\190\011\192\011\217\011\218\011\242\011\243\011\244\011\245\012\002\012\026\012\027\012(\012)\012*\012B\012E\012G\012H\012I\012J\012K\012L\012M\012N\012O\012P\012Q\012R\012S\012W\012X\012Y\012Z\012[\012\\\012]\012^\012b\012c\012g\012h\012l\012m\012n\012o\012p\012q\012r\012s\012t\012u\012v\012w\012x\012y\012z\012{\012|\012}\012~\012\127\012\128\012\129\012\130\012\131\012\132\012\133\012\134\012\135\012\136\012\137\012\138\012\139\012\143\012\144\012\145\012\146\012\148\012\149\012\150\012\152\012\153\012\155\012\156\012\157\012\158\012\159\012\160\012\161\012\162\012\163\012\187\012\188\012\189\012\191\012\192\012\193\012\195\012\222\012\223\012\224\012\228\012\229\012\231\012\236\012\237\012\238\012\242\012\243\012\247\012\251\012\252\r\003\r\004\r\005\r\007\r\b\r\t\r\n\r\012\r\014\r\016\r\018\r\019\r\020\r\021\r\022\r\023\r\024\r\025\r\028\r\030\r\031\r!\r\"\r#\r$\r%\r'\r)\r+\r,\r-\r.\r/\r0\r1\r4\r7\r:\r=\r?\r@\rA\rB\rD\rE\rF\rH\rI\rK\rL\rM\rN\rP\rQ\rR\rS\rW\rY\rZ\r\\\r]\r^\r_\r`\ra\rd\rg\ri\rj\rk\rl\rn\ro\rp\rq\rr\rs\rt\ru\rv\rx\r\127\r\128\r\129\r\132\r\133\r\134\r\135\r\136\r\137\r\141\r\142\r\143\r\145\r\147\r\148\r\149\r\150\r\151\r\152\r\153\r\154\r\155\r\156\r\157\r\158\r\159\r\160\r\161\r\162\r\163\r\164\r\165\r\166\r\170\r\171\r\172\r\173\r\174\r\175\r\176\r\178\r\179\r\181\r\182\r\183\r\184\r\186\r\188\r\190\r\192\r\193\r\194\r\195\r\196\r\197\r\198\r\199\r\201\r\202\r\204\r\205\r\206\r\207\r\210\r\211\r\212\r\213\r\216\r\217\r\222\r\226\r\230\r\233\r\234\r\236\r\237\r\238\r\241\r\242\r\243\r\247\r\248\r\249\r\250\r\251\r\252\r\253\r\254\014\002\014\003\014\004\014\005\014\006\014\007\014\011\014\012\014\r\014\014\014\015\014\016\014\017\014\021\014\022\014\023\014\024\014\025\014\026\014\028\014\029\014\030\014\031\014 \014!\014\"\014$\014%\014&\014'\014(\014)\014*\014+\014-\014.\014/\0140\0141\0143\0144\0146\0147\0148\0149\014:\014<\014=\014>\014?\014A\014B\014D\014E\014F\014G\014H\014I\014J\014K\014L\014M\014O\014Q\014R\014S\014U\014V\014W\014Y\014Z\014]\014_\014`\014a\014b\014d\014f\014g\014h\014j\014k\014l\014n\014o\014q\014s\014t\014u\014v\014x\014y\014{\014|\014}\014~b\015\t\015\n\015\011\015\012\015\r\015\015\015\016\015\017\015\019\015\020\015\021\015\023\015\024\015\025\015\026\015\027\015\029\015\030\015 \015!\015\"\015$\015&\015'\015)\015*\015+\015-\015.\015/\0151\0152\0154\0155\0157\0158\0159\015:\015;\015>\015?\015@\015A\015B\015D\015E\015F\015G\015H\015I\015K\015L\015M\015N\015O\015P\015Q\015R\015S\015T\015U\015V\015W\015X\015Z\015[\015\\\015]\015_\015`\015a\015b\015c\015d\015e\015f\015g\015h\015i\015j\015k\015l\015m\015n\015o\015p\015q\015r\015s\015t\015v\015w\015y\015z\015{\015|\015}\015~b\016\t\016\n\016\011\016\012\016\r\016\014\016\015\016\016\016\017\016\018\016\019\016\020\016\022\016\023\016\024\016\025\016\026\016\027\016\028\016\"\016#\016$\016%\016,\0163\0164\0165\0166\0167\0168\016;\016=\016>\016?\016@\016A\016B\016C\016D\016E\016F\016G\016H\016I\016K\016L\016M\016N\016O\016P\016Q\016R\016S\016T\016U\016V\016W\016X\016Y\016Z"))
    
    and nullable =
      "\000\016R\002\000\128\000\002\028 \003\255\001\128\000\255\254\000\000\b\016\128\000\192\000"
    
    and first =
      (132, "2\248H\018\197V\254fz\002\160\251\145@\003\142\003/\132\129,Uo\230g\160*\015\185\020\0008\224\001\136@\000@\0020$Z\000 \n\128\000\001\004\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000$\000\128\000A\000\004 \000 \000\025\000\000 \0002\248H\018\197V\254fz\002\128\251\145@\003\142\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000@\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\002\001\000\b\000\000\000\000\000\000\000\128\000\128\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\0002\248H\018\197V\254fz\002\160\251\145@\003\142\000\000\000\000\004\000 \000\000\000\000\000\000\000\000\000\000\001\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\002\004\000\"\000\000\000\000\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\001\128\000 \000\0000\184@\000 \000\000\000\000\000\003/\132\129,Uo\230g\160*\015\185\020\0008\224\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000$\000\000\000A\000\164 \000 \000\024\000\000 \0002\248H\018\197V\254fz\002\128\251\129@\003\142\000\024\164\000\132\128#\002E`\002\000\164\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\005\237\217\016A\127\021 \000\1528\0298\224\176(4\001\136@\000@\002 $R\000 \n\000\000\001\004\000\024\132\000\004\000#\002E \002\000\160\000\000\016@\000\136@\018\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000E\000\000\000\000\000\000\000\000\000\000@\000@\002\000\000\002\000\000\b\000\000\001\000\000$\000\000\000A\000\004 \000 \000\024\000\000 \000\002@\b\000\004\016\000B\000\002\000\001\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\0000\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000@\001\128\000 \000\0000\184@\000 \000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\001\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\004\000\004\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\132\000\004\000#\002E\160\002\000\168\000\000\017@\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\138@\026\b@0$v\000\000\n\001@\001\140\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136@\018\000@0$r\000\000\n\001@\001\140\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\0002\248H\026\197V\254fz\002\128\251\129@\007\142\000\016\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@0\184@\018\193F\254$z\000\128\250\001@\001\142\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \003\240\006\004\128\000|b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\001\000\000\001\003\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\016\000\128\000\000\000\000\000\000\b\000\024\000\002\000\000\003\011\132\000\002\000\000\002\000\000\000\001\136@\000@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\b\000\004\016\nB\000\002 \001\128\000\002\000\000$\000\000\000A\000\164 \000 \000\024\000\000 \000\002\000\000\000\000\001\000B\001\128\000\000\000\001\000\000\000 \000\000\000\000\016\004 \b\000\000\000\000\016\000\000\002@\b\000\004\016\nB\000\002\000\001\128\000\002\000\000$\000\128\000A\000\004 \000 \000\024\000\000 \000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\024\132\000\004\000#\002E\160\002\000\160\000\000\016@\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\132\000\004\000#\002E\160\002\000\168\000\000\016@\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\001\136@\000@\0020$Z\000 \n\000\000\001\004\000\024\164\000\132\128#\002E`\002\000\160\000\000\016@\000\138@\026\b@0$v\000\000\n\001@\001\140\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000$\000\128\000A\000\004 \000 \000\025\000\000 \0002\248H\018\197V\254fz\002\128\251\145@\003\142\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\024\164\000\132\128\163\002E`\002\000\160\000\000P@\001\138@\bH\0020$V\000 \n@\000%\004\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\003\011\132\001,\020o\226G\160\b\015\160\020\000\024\224\000\004\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\016\000\024\000\002\000\000\003\011\133\000\002\000\000\000\000\000\000\001\128\000(\b\0000\184@\000 \000\000\000\000\000\000\b\128\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\136\000\000\000\000 \000@\000\000\002\000\000\000\000\000\000\004\000\000\000\000\000\000 \000\000\128\000\000\016\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\128\000(\t\0002\184@\000 \000\000\000\000\000\000\b\000\000\000\016\003\000\004\000\000\000\000\000\000\000\000\000\128\000\000\001\000\018 @\000\000\000\000\000\000\000\000 \000\000\000\000\016\004 \b\000\000\000\000\016\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\024\164\000\132\128#\002E`\002\000\160\000\000\016@\001\138@\bH\0020$V\000 \n@\000\005\004\000 \000\000\000\000\016\004 \024\000\000\000\000\016\000\000\000\128\000\000\001\0002 @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000^\221\145\004\023\241R\000\t\131\129\211\142\011\002\131@\024\000\002\000\000\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\024\000\002\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000")
    
  end) (ET) (TI)
  
end

let use_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1755 lexer lexbuf) : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 47435 "src/ocaml/preprocess/parser_raw.ml"
    ))

and toplevel_phrase =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1734 lexer lexbuf) : (
# 825 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 47443 "src/ocaml/preprocess/parser_raw.ml"
    ))

and parse_pattern =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1730 lexer lexbuf) : (
# 833 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.pattern)
# 47451 "src/ocaml/preprocess/parser_raw.ml"
    ))

and parse_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1726 lexer lexbuf) : (
# 831 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.expression)
# 47459 "src/ocaml/preprocess/parser_raw.ml"
    ))

and parse_core_type =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1722 lexer lexbuf) : (
# 829 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.core_type)
# 47467 "src/ocaml/preprocess/parser_raw.ml"
    ))

and interface =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1718 lexer lexbuf) : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.signature)
# 47475 "src/ocaml/preprocess/parser_raw.ml"
    ))

and implementation =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
# 821 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.structure)
# 47483 "src/ocaml/preprocess/parser_raw.ml"
    ))

module Incremental = struct
  
  let use_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1755 initial_position) : (
# 827 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase list)
# 47493 "src/ocaml/preprocess/parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and toplevel_phrase =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1734 initial_position) : (
# 825 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.toplevel_phrase)
# 47501 "src/ocaml/preprocess/parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_pattern =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1730 initial_position) : (
# 833 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.pattern)
# 47509 "src/ocaml/preprocess/parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1726 initial_position) : (
# 831 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.expression)
# 47517 "src/ocaml/preprocess/parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_core_type =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1722 initial_position) : (
# 829 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.core_type)
# 47525 "src/ocaml/preprocess/parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and interface =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1718 initial_position) : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.signature)
# 47533 "src/ocaml/preprocess/parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
  and implementation =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 821 "src/ocaml/preprocess/parser_raw.mly"
      (Parsetree.structure)
# 47541 "src/ocaml/preprocess/parser_raw.ml"
      ) MenhirInterpreter.checkpoint)
  
end

# 3801 "src/ocaml/preprocess/parser_raw.mly"
  

# 47549 "src/ocaml/preprocess/parser_raw.ml"

# 269 "/usr/local/home/trefis/opam2/4.08.0/lib/menhir/standard.mly"
  

# 47554 "src/ocaml/preprocess/parser_raw.ml"
